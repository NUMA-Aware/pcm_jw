!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABSOLUTE	daemon/daemon/daemon.h	/^	enum Mode { DIFFERENCE, ABSOLUTE };$/;"	e	enum:PCMDaemon::Mode
AD_BW	pcm-memory.cpp	/^float AD_BW(const memdata_t *md, const uint32 skt)$/;"	f
ALIGN	daemon/daemon/common.h	39;"	d
ALIGNMENT	daemon/daemon/common.h	38;"	d
ALIGNMENT	daemon/daemon/test/main.cpp	7;"	d	file:
APOLLO_LAKE	cpucounters.h	/^        APOLLO_LAKE = 92,$/;"	e	enum:pcm::PCM::SupportedCPUModels
ARCH_LLC_MISS_EVTNR	types.h	133;"	d
ARCH_LLC_MISS_UMASK	types.h	134;"	d
ARCH_LLC_REFERENCE_EVTNR	types.h	130;"	d
ARCH_LLC_REFERENCE_UMASK	types.h	131;"	d
ASM_SRCS	daemon/client/Debug/sources.mk	/^ASM_SRCS := $/;"	m
ASM_SRCS	daemon/daemon/Debug/sources.mk	/^ASM_SRCS := $/;"	m
ATOM	cpucounters.h	/^        ATOM = 28,$/;"	e	enum:pcm::PCM::SupportedCPUModels
ATOM_2	cpucounters.h	/^        ATOM_2 = 53,$/;"	e	enum:pcm::PCM::SupportedCPUModels
ATOM_MEM_LOAD_RETIRED_L2_HIT_EVTNR	types.h	138;"	d
ATOM_MEM_LOAD_RETIRED_L2_HIT_EVTNR	types.h	144;"	d
ATOM_MEM_LOAD_RETIRED_L2_HIT_EVTNR	types.h	150;"	d
ATOM_MEM_LOAD_RETIRED_L2_HIT_UMASK	types.h	139;"	d
ATOM_MEM_LOAD_RETIRED_L2_HIT_UMASK	types.h	145;"	d
ATOM_MEM_LOAD_RETIRED_L2_HIT_UMASK	types.h	151;"	d
ATOM_MEM_LOAD_RETIRED_L2_MISS_EVTNR	types.h	141;"	d
ATOM_MEM_LOAD_RETIRED_L2_MISS_EVTNR	types.h	147;"	d
ATOM_MEM_LOAD_RETIRED_L2_MISS_EVTNR	types.h	153;"	d
ATOM_MEM_LOAD_RETIRED_L2_MISS_UMASK	types.h	142;"	d
ATOM_MEM_LOAD_RETIRED_L2_MISS_UMASK	types.h	148;"	d
ATOM_MEM_LOAD_RETIRED_L2_MISS_UMASK	types.h	154;"	d
AVOTON	cpucounters.h	/^        AVOTON = 77,$/;"	e	enum:pcm::PCM::SupportedCPUModels
AbstractRawCounter	width_extender.h	/^    struct AbstractRawCounter$/;"	s	class:pcm::CounterWidthExtender
AfterState	pcm-core.cpp	/^	std::vector<CoreCounterState> BeforeState, AfterState;$/;"	v
AfterState	pcm-latency.cpp	/^ServerUncoreCounterState * AfterState;$/;"	v
AfterState_core	pcm-latency.cpp	/^std::vector<CoreCounterState> BeforeState_core, AfterState_core;$/;"	v
Aggregator	topology.cpp	/^Aggregator::Aggregator()$/;"	f	class:pcm::Aggregator
Aggregator	topology.h	/^class Aggregator : Visitor$/;"	c	namespace:pcm
ApplicationJSON	pcm-sensor-server.cpp	/^    ApplicationJSON,$/;"	e	enum:MimeType	file:
ArchLLCMissPos	cpucounters.h	/^          ArchLLCMissPos = 0,$/;"	e	enum:pcm::BasicCounterState::__anon6
ArchLLCRefPos	cpucounters.h	/^           ArchLLCRefPos = 1,$/;"	e	enum:pcm::BasicCounterState::__anon6
AsynchronCounterState	cpuasynchcounter.h	/^    AsynchronCounterState()$/;"	f	class:AsynchronCounterState
AsynchronCounterState	cpuasynchcounter.h	/^class AsynchronCounterState {$/;"	c
BAYTRAIL	cpucounters.h	/^        BAYTRAIL = 55,$/;"	e	enum:pcm::PCM::SupportedCPUModels
BB0_MSR_PERF_CNT_1	types.h	229;"	d
BB0_MSR_PERF_CNT_CTL_1	types.h	230;"	d
BB0_MSR_PERF_GLOBAL_CTL	types.h	228;"	d
BB1_MSR_PERF_CNT_1	types.h	233;"	d
BB1_MSR_PERF_CNT_CTL_1	types.h	234;"	d
BB1_MSR_PERF_GLOBAL_CTL	types.h	232;"	d
BDX	cpucounters.h	/^        BDX = 79,$/;"	e	enum:pcm::PCM::SupportedCPUModels
BDX_CBO_MSR_PMON_BOX_GET_FLT	types.h	916;"	d
BDX_CBO_MSR_PMON_BOX_GET_OPC0	types.h	915;"	d
BDX_CBO_MSR_PMON_BOX_GET_TID	types.h	917;"	d
BDX_DE	cpucounters.h	/^        BDX_DE = 86,$/;"	e	enum:pcm::PCM::SupportedCPUModels
BEGIN_LIST	pcm-sensor-server.cpp	/^    const char BEGIN_LIST = '[';$/;"	m	class:JSONPrinter	file:
BEGIN_OBJECT	pcm-sensor-server.cpp	/^    const char BEGIN_OBJECT = '{';$/;"	m	class:JSONPrinter	file:
BROADWELL	cpucounters.h	/^        BROADWELL = 61,$/;"	e	enum:pcm::PCM::SupportedCPUModels
BROADWELL_XEON_E3	cpucounters.h	/^        BROADWELL_XEON_E3 = 71,$/;"	e	enum:pcm::PCM::SupportedCPUModels
BUILD_PATH	WinMSRDriver/Win7/mymake.bat	/^set BUILD_PATH=$/;"	v
BarGaugePanel	dashboard.cpp	/^    BarGaugePanel(int x_, int y_, int w_, int h_, const std::string & title_) : Panel(x_, y_, w_, h_, title_) {}$/;"	f	class:BarGaugePanel
BarGaugePanel	dashboard.cpp	/^class BarGaugePanel : public Panel$/;"	c	file:
BasicCounterState	cpucounters.h	/^    BasicCounterState() :$/;"	f	class:pcm::BasicCounterState
BasicCounterState	cpucounters.h	/^class BasicCounterState$/;"	c	namespace:pcm
BecktonUncorePMUCNTCTLRegister	types.h	/^struct BecktonUncorePMUCNTCTLRegister$/;"	s	namespace:pcm
BecktonUncorePMUZDPCTLFVCRegister	types.h	/^struct BecktonUncorePMUZDPCTLFVCRegister$/;"	s	namespace:pcm
BeforeState	pcm-core.cpp	/^	std::vector<CoreCounterState> BeforeState, AfterState;$/;"	v
BeforeState	pcm-latency.cpp	/^ServerUncoreCounterState * BeforeState;$/;"	v
BeforeState_core	pcm-latency.cpp	/^std::vector<CoreCounterState> BeforeState_core, AfterState_core;$/;"	v
BromolowPlatform	pcm-pcie.h	/^    BromolowPlatform(PCM *m, bool csv, bool bandwidth, bool verbose, uint32 delay) :$/;"	f	class:BromolowPlatform
BromolowPlatform	pcm-pcie.h	/^class BromolowPlatform: public LegacyPlatform$/;"	c
CBOCounter	cpucounters.h	/^    std::array<std::array<uint64, maxCounters>, maxCBOs> CBOCounter;$/;"	m	class:pcm::ServerUncoreCounterState
CBO_MSR_PMON_CTL_EDGE_DET	types.h	907;"	d
CBO_MSR_PMON_CTL_EN	types.h	909;"	d
CBO_MSR_PMON_CTL_EVENT	types.h	904;"	d
CBO_MSR_PMON_CTL_INVERT	types.h	910;"	d
CBO_MSR_PMON_CTL_RST	types.h	906;"	d
CBO_MSR_PMON_CTL_THRESH	types.h	911;"	d
CBO_MSR_PMON_CTL_TID_EN	types.h	908;"	d
CBO_MSR_PMON_CTL_UMASK	types.h	905;"	d
CBoEventTid	cpucounters.h	/^    enum CBoEventTid$/;"	g	class:pcm::PCM
CC_DEPS	daemon/client/Debug/sources.mk	/^CC_DEPS := $/;"	m
CC_DEPS	daemon/daemon/Debug/sources.mk	/^CC_DEPS := $/;"	m
CC_SRCS	daemon/client/Debug/sources.mk	/^CC_SRCS := $/;"	m
CC_SRCS	daemon/daemon/Debug/sources.mk	/^CC_SRCS := $/;"	m
CENTERTON	cpucounters.h	/^        CENTERTON = 54,$/;"	e	enum:pcm::PCM::SupportedCPUModels
CERT_FILE_NAME	pcm-sensor-server.cpp	65;"	d	file:
CFLAGS	daemon/daemon/test/Makefile	/^CFLAGS=-c -Wall -std=c++11$/;"	m
CHERRYTRAIL	cpucounters.h	/^        CHERRYTRAIL = 76,$/;"	e	enum:pcm::PCM::SupportedCPUModels
CH_MASK	cpucounters.h	/^        CH_MASK,$/;"	e	enum:pcm::PCM::PerfmonField
CLARKDALE	cpucounters.h	/^        CLARKDALE = 37,$/;"	e	enum:pcm::PCM::SupportedCPUModels
CLIENT_H_	daemon/client/client.h	21;"	d
CLOCK_MONOTONIC_RAW	daemon/daemon/daemon.cpp	27;"	d	file:
CML	cpucounters.h	/^        CML = 166,$/;"	e	enum:pcm::PCM::SupportedCPUModels
CML_1	cpucounters.h	/^        CML_1 = 165,$/;"	e	enum:pcm::PCM::SupportedCPUModels
COMMON_H_	daemon/daemon/common.h	16;"	d
COMMON_OBJS	Makefile	/^COMMON_OBJS = msr.o cpucounters.o pci.o mmio.o client_bw.o utils.o topology.o dashboard.o debug.o threadpool.o resctrl.o$/;"	m
CONNECT	pcm-sensor-server.cpp	/^    CONNECT,$/;"	e	enum:HTTPRequestMethod	file:
COUNTER_INDEX	cpucounters.h	/^        COUNTER_INDEX$/;"	e	enum:pcm::PCM::PerfmonField
CPP_DEPS	daemon/client/Debug/sources.mk	/^CPP_DEPS := $/;"	m
CPP_DEPS	daemon/daemon/Debug/sources.mk	/^CPP_DEPS := $/;"	m
CPP_SRCS	daemon/client/Debug/sources.mk	/^CPP_SRCS := $/;"	m
CPP_SRCS	daemon/daemon/Debug/sources.mk	/^CPP_SRCS := $/;"	m
CPUASYNCHCOUNTER_HEADER	cpuasynchcounter.h	19;"	d
CPUCNT_INIT_THE_REST_OF_EVTCNT	cpucounters.cpp	2732;"	d	file:
CPUCNT_INIT_THE_REST_OF_EVTCNT	cpucounters.cpp	2801;"	d	file:
CPUCOUNTERS_HEADER	cpucounters.h	17;"	d
CPUCounters_CLIENTBW_H	client_bw.h	17;"	d
CPUCounters_LSPCI_H	lspci.h	2;"	d
CPUCounters_MSR_H	msr.h	17;"	d
CPUCounters_PCI_H	pci.h	19;"	d
CPUCounters_TYPES_H	types.h	17;"	d
CPU_CLK_UNHALTED_REF_ADDR	types.h	52;"	d
CPU_CLK_UNHALTED_THREAD_ADDR	types.h	51;"	d
CPU_intensive_task	realtime.cpp	/^void CPU_intensive_task()$/;"	f
CPX_M3UPI_PORT0_REGISTER_DEV_ADDR	types.h	/^constexpr auto CPX_M3UPI_PORT0_REGISTER_DEV_ADDR = (0x12);$/;"	m	namespace:pcm
CPX_M3UPI_PORT0_REGISTER_FUNC_ADDR	types.h	/^constexpr auto CPX_M3UPI_PORT0_REGISTER_FUNC_ADDR = (1);$/;"	m	namespace:pcm
CPX_M3UPI_PORT1_REGISTER_DEV_ADDR	types.h	/^constexpr auto CPX_M3UPI_PORT1_REGISTER_DEV_ADDR = (0x12);$/;"	m	namespace:pcm
CPX_M3UPI_PORT1_REGISTER_FUNC_ADDR	types.h	/^constexpr auto CPX_M3UPI_PORT1_REGISTER_FUNC_ADDR = (2);$/;"	m	namespace:pcm
CPX_M3UPI_PORT2_REGISTER_DEV_ADDR	types.h	/^constexpr auto CPX_M3UPI_PORT2_REGISTER_DEV_ADDR = (0x13);$/;"	m	namespace:pcm
CPX_M3UPI_PORT2_REGISTER_FUNC_ADDR	types.h	/^constexpr auto CPX_M3UPI_PORT2_REGISTER_FUNC_ADDR = (1);$/;"	m	namespace:pcm
CPX_M3UPI_PORT3_REGISTER_DEV_ADDR	types.h	/^constexpr auto CPX_M3UPI_PORT3_REGISTER_DEV_ADDR = (0x13);$/;"	m	namespace:pcm
CPX_M3UPI_PORT3_REGISTER_FUNC_ADDR	types.h	/^constexpr auto CPX_M3UPI_PORT3_REGISTER_FUNC_ADDR = (2);$/;"	m	namespace:pcm
CPX_M3UPI_PORT4_REGISTER_DEV_ADDR	types.h	/^constexpr auto CPX_M3UPI_PORT4_REGISTER_DEV_ADDR = (0x14);$/;"	m	namespace:pcm
CPX_M3UPI_PORT4_REGISTER_FUNC_ADDR	types.h	/^constexpr auto CPX_M3UPI_PORT4_REGISTER_FUNC_ADDR = (1);$/;"	m	namespace:pcm
CPX_M3UPI_PORT5_REGISTER_DEV_ADDR	types.h	/^constexpr auto CPX_M3UPI_PORT5_REGISTER_DEV_ADDR = (0x14);$/;"	m	namespace:pcm
CPX_M3UPI_PORT5_REGISTER_FUNC_ADDR	types.h	/^constexpr auto CPX_M3UPI_PORT5_REGISTER_FUNC_ADDR = (2);$/;"	m	namespace:pcm
CPX_QPI_PORT3_REGISTER_DEV_ADDR	types.h	675;"	d
CPX_QPI_PORT3_REGISTER_FUNC_ADDR	types.h	676;"	d
CPX_QPI_PORT4_REGISTER_DEV_ADDR	types.h	677;"	d
CPX_QPI_PORT4_REGISTER_FUNC_ADDR	types.h	678;"	d
CPX_QPI_PORT5_REGISTER_DEV_ADDR	types.h	679;"	d
CPX_QPI_PORT5_REGISTER_FUNC_ADDR	types.h	680;"	d
CRd	cpucounters.h	/^        CRd = 0x181,       \/\/ Demand Code Read$/;"	e	enum:pcm::PCM::PCIeEventCode
CRd	pcm-pcie.h	/^        CRd,$/;"	e	enum:GrantleyPlatform::eventIdx
CRd	pcm-pcie.h	/^        CRd,$/;"	e	enum:PurleyPlatform::eventIdx
CRd_hit	pcm-pcie.h	/^            CRd_hit,$/;"	e	enum:PurleyPlatform::Events
CRd_miss	pcm-pcie.h	/^            CRd_miss,$/;"	e	enum:GrantleyPlatform::Events
CRd_miss	pcm-pcie.h	/^            CRd_miss,$/;"	e	enum:PurleyPlatform::Events
CRd_total	pcm-pcie.h	/^            CRd_total,$/;"	e	enum:GrantleyPlatform::Events
CStateResidency	cpucounters.h	/^    uint64 CStateResidency[PCM::MAX_C_STATE + 1];$/;"	m	class:pcm::BasicCounterState
CStateResidency	cpucounters.h	/^    uint64 CStateResidency[PCM::MAX_C_STATE + 1];$/;"	m	class:pcm::UncoreCounterState
CUSTOM_CORE_EVENTS	cpucounters.h	/^        CUSTOM_CORE_EVENTS = 1,     \/*!< Custom set of core events specified in the parameter to the program method. The parameter must be a pointer to array of four \\c CustomCoreEventDescription values *\/$/;"	e	enum:pcm::PCM::ProgramMode
CXX	Makefile	/^CXX=c++$/;"	m
CXX_DEPS	daemon/client/Debug/sources.mk	/^CXX_DEPS := $/;"	m
CXX_DEPS	daemon/daemon/Debug/sources.mk	/^CXX_DEPS := $/;"	m
CXX_SRCS	daemon/client/Debug/sources.mk	/^CXX_SRCS := $/;"	m
CXX_SRCS	daemon/daemon/Debug/sources.mk	/^CXX_SRCS := $/;"	m
CX_MSR_PMON_BOX_CTL	cpucounters.cpp	/^uint64 PCM::CX_MSR_PMON_BOX_CTL(uint32 Cbo) const$/;"	f	class:pcm::PCM
CX_MSR_PMON_BOX_FILTER	cpucounters.cpp	/^uint64 PCM::CX_MSR_PMON_BOX_FILTER(uint32 Cbo) const$/;"	f	class:pcm::PCM
CX_MSR_PMON_BOX_FILTER1	cpucounters.cpp	/^uint64 PCM::CX_MSR_PMON_BOX_FILTER1(uint32 Cbo) const$/;"	f	class:pcm::PCM
CX_MSR_PMON_CTLY	cpucounters.cpp	/^uint64 PCM::CX_MSR_PMON_CTLY(uint32 Cbo, uint32 Ctl) const$/;"	f	class:pcm::PCM
CX_MSR_PMON_CTRY	cpucounters.cpp	/^uint64 PCM::CX_MSR_PMON_CTRY(uint32 Cbo, uint32 Ctr) const$/;"	f	class:pcm::PCM
C_DEPS	daemon/client/Debug/sources.mk	/^C_DEPS := $/;"	m
C_DEPS	daemon/daemon/Debug/sources.mk	/^C_DEPS := $/;"	m
C_SRCS	daemon/client/Debug/sources.mk	/^C_SRCS := $/;"	m
C_SRCS	daemon/daemon/Debug/sources.mk	/^C_SRCS := $/;"	m
C_UPPER_DEPS	daemon/client/Debug/sources.mk	/^C_UPPER_DEPS := $/;"	m
C_UPPER_DEPS	daemon/daemon/Debug/sources.mk	/^C_UPPER_DEPS := $/;"	m
C_UPPER_SRCS	daemon/client/Debug/sources.mk	/^C_UPPER_SRCS := $/;"	m
C_UPPER_SRCS	daemon/daemon/Debug/sources.mk	/^C_UPPER_SRCS := $/;"	m
CatchAll	pcm-sensor-server.cpp	/^    CatchAll = 0,$/;"	e	enum:MimeType	file:
ChaPipelineQueue	cpucounters.h	/^    enum ChaPipelineQueue$/;"	g	class:pcm::PCM
Character	pcm-sensor-server.cpp	/^    Character = 18,$/;"	e	enum:HeaderType	file:
CheckAndForceRTMAbortMode	utils.cpp	/^bool CheckAndForceRTMAbortMode(const char * arg, PCM * m)$/;"	f	namespace:pcm
Client	daemon/client/client.cpp	/^	Client::Client()$/;"	f	class:PCMDaemon::Client
Client	daemon/client/client.h	/^	class Client {$/;"	c	namespace:PCMDaemon
ClientBW	client_bw.cpp	/^ClientBW::ClientBW()$/;"	f	class:pcm::ClientBW
ClientBW	client_bw.h	/^class ClientBW$/;"	c	namespace:pcm
ClientImcReadsCounter	width_extender.h	/^        ClientImcReadsCounter(std::shared_ptr<ClientBW> clientBW_) : clientBW(clientBW_) { }$/;"	f	struct:pcm::CounterWidthExtender::ClientImcReadsCounter
ClientImcReadsCounter	width_extender.h	/^    struct ClientImcReadsCounter : public AbstractRawCounter$/;"	s	class:pcm::CounterWidthExtender
ClientImcWritesCounter	width_extender.h	/^        ClientImcWritesCounter(std::shared_ptr<ClientBW> clientBW_) : clientBW(clientBW_) { }$/;"	f	struct:pcm::CounterWidthExtender::ClientImcWritesCounter
ClientImcWritesCounter	width_extender.h	/^    struct ClientImcWritesCounter : public AbstractRawCounter$/;"	s	class:pcm::CounterWidthExtender
ClientIoRequestsCounter	width_extender.h	/^        ClientIoRequestsCounter(std::shared_ptr<ClientBW> clientBW_) : clientBW(clientBW_) { }$/;"	f	struct:pcm::CounterWidthExtender::ClientIoRequestsCounter
ClientIoRequestsCounter	width_extender.h	/^    struct ClientIoRequestsCounter : public AbstractRawCounter$/;"	s	class:pcm::CounterWidthExtender
ClientUncore	topology.h	/^    ClientUncore( PCM* m, int32 socketID ) : Uncore( m, socketID ) {}$/;"	f	class:pcm::ClientUncore
ClientUncore	topology.h	/^class ClientUncore : public Uncore$/;"	c	namespace:pcm
CollectionInformation	PCM-Service_Win/PCMService.h	/^        CollectionInformation()$/;"	f	struct:PCMServiceNS::CollectionInformation
CollectionInformation	PCM-Service_Win/PCMService.h	/^    ref struct CollectionInformation {$/;"	s	namespace:PCMServiceNS
ContainsOtherHeaders	pcm-sensor-server.cpp	/^    ContainsOtherHeaders = 20,$/;"	e	enum:HeaderType	file:
Core	topology.h	/^    Core( PCM* m, int32 coreID, int32 tileID, int32 socketID ) {$/;"	f	class:pcm::Core
Core	topology.h	/^class Core : public SystemObject$/;"	c	namespace:pcm
CoreC0StateResidencyHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable CoreC0StateResidencyHash_;		$/;"	m	class:PCMServiceNS::MeasureThread
CoreC3StateResidencyHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable CoreC3StateResidencyHash_;$/;"	m	class:PCMServiceNS::MeasureThread
CoreC6StateResidencyHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable CoreC6StateResidencyHash_;$/;"	m	class:PCMServiceNS::MeasureThread
CoreC7StateResidencyHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable CoreC7StateResidencyHash_;$/;"	m	class:PCMServiceNS::MeasureThread
CoreCounterState	cpucounters.h	/^class CoreCounterState : public BasicCounterState$/;"	c	namespace:pcm
CoreEvent	pcm-core.cpp	/^struct CoreEvent$/;"	s	file:
CoreLocalMemoryBWMetricAvailable	cpucounters.cpp	/^bool PCM::CoreLocalMemoryBWMetricAvailable() const$/;"	f	class:pcm::PCM
CoreRemoteMemoryBWMetricAvailable	cpucounters.cpp	/^bool PCM::CoreRemoteMemoryBWMetricAvailable() const$/;"	f	class:pcm::PCM
CoreTaskQueue	cpucounters.cpp	/^    CoreTaskQueue(int32 core) :$/;"	f	class:pcm::CoreTaskQueue
CoreTaskQueue	cpucounters.cpp	/^class CoreTaskQueue$/;"	c	namespace:pcm	file:
CounterMutex	cpuasynchcounter.h	/^    pthread_mutex_t CounterMutex;$/;"	m	class:AsynchronCounterState
CounterMutex	width_extender.h	/^    Mutex CounterMutex;$/;"	m	class:pcm::CounterWidthExtender
CounterWidthExtender	cpucounters.cpp	/^CounterWidthExtender::CounterWidthExtender(AbstractRawCounter * raw_counter_, uint64 counter_width_, uint32 watchdog_delay_ms_) : raw_counter(raw_counter_), counter_width(counter_width_), watchdog_delay_ms(watchdog_delay_ms_)$/;"	f	class:pcm::CounterWidthExtender
CounterWidthExtender	width_extender.h	/^class CounterWidthExtender$/;"	c	namespace:pcm
CounterWidthExtenderRegister	cpucounters.h	/^    CounterWidthExtenderRegister(const std::shared_ptr<CounterWidthExtender> & handle_) :$/;"	f	class:pcm::CounterWidthExtenderRegister
CounterWidthExtenderRegister	cpucounters.h	/^class CounterWidthExtenderRegister : public HWRegister$/;"	c	namespace:pcm
CountersCore	PCM-Service_Win/PCMService.h	/^        initonly String^ CountersCore = gcnew String(L"PCM Core Counters");$/;"	m	class:PCMServiceNS::MeasureThread
CountersQpi	PCM-Service_Win/PCMService.h	/^        initonly String^ CountersQpi = gcnew String(L"PCM QPI Counters");$/;"	m	class:PCMServiceNS::MeasureThread
CountersSocket	PCM-Service_Win/PCMService.h	/^        initonly String^ CountersSocket = gcnew String(L"PCM Socket Counters");$/;"	m	class:PCMServiceNS::MeasureThread
CpuClkUnhaltedRef	cpucounters.h	/^    checked_uint64 CpuClkUnhaltedRef;$/;"	m	class:pcm::BasicCounterState
CpuClkUnhaltedThread	cpucounters.h	/^    checked_uint64 CpuClkUnhaltedThread;$/;"	m	class:pcm::BasicCounterState
Cpuid	winring0/OlsApiInit.h	/^_Cpuid Cpuid = NULL;$/;"	v
CpuidPx	winring0/OlsApiInit.h	/^_CpuidPx CpuidPx = NULL;$/;"	v
CpuidTx	winring0/OlsApiInit.h	/^_CpuidTx CpuidTx = NULL;$/;"	v
CsvOutputType	utils.h	/^enum CsvOutputType$/;"	g	namespace:pcm
CustomCoreEventDescription	cpucounters.h	/^    struct CustomCoreEventDescription$/;"	s	class:pcm::PCM
CustomHeader	pcm-sensor-server.cpp	/^    CustomHeader = 22,$/;"	e	enum:HeaderType	file:
CustomIIOEventDescription	cpucounters.h	/^    struct CustomIIOEventDescription$/;"	s	class:pcm::PCM
DAEMON_H_	daemon/daemon/daemon.h	16;"	d
DBG	debug.h	87;"	d
DDR	pcm-latency.cpp	39;"	d	file:
DDRLatencyMetricsAvailable	cpucounters.h	/^    bool DDRLatencyMetricsAvailable() const$/;"	f	class:pcm::PCM
DEFAULT_DISPLAY_COLUMNS	pcm-memory.cpp	43;"	d	file:
DEFAULT_EVENTS	cpucounters.h	/^        DEFAULT_EVENTS = 0,         \/*!< Default choice of events, the additional parameter is not needed and ignored *\/$/;"	e	enum:pcm::PCM::ProgramMode
DEFAULT_HTTPS_PORT	pcm-sensor-server.cpp	/^constexpr unsigned int DEFAULT_HTTPS_PORT = DEFAULT_HTTP_PORT;$/;"	v
DEFAULT_HTTP_PORT	pcm-sensor-server.cpp	/^constexpr unsigned int DEFAULT_HTTP_PORT = 9738;$/;"	v
DEFAULT_SHM_ID_LOCATION	daemon/daemon/common.h	/^static const char DEFAULT_SHM_ID_LOCATION[] = "\/tmp\/opcm-daemon-shm-id";$/;"	v
DELAY	cpuasynchcounter.h	30;"	d
DELETE	pcm-sensor-server.cpp	/^    DELETE,$/;"	e	enum:HTTPRequestMethod	file:
DENVERTON	cpucounters.h	/^        DENVERTON = 95,$/;"	e	enum:pcm::PCM::SupportedCPUModels
DIFFERENCE	daemon/daemon/daemon.h	/^	enum Mode { DIFFERENCE, ABSOLUTE };$/;"	e	enum:PCMDaemon::Mode
DIVIDER	cpucounters.h	/^        DIVIDER,$/;"	e	enum:pcm::PCM::PerfmonField
DOS_DEVICE_NAME	WinMSRDriver/Win7/msrmain.c	29;"	d	file:
DOWN_AND_LEFT	utils.cpp	455;"	d	file:
DOWN_AND_LEFT	utils.cpp	462;"	d	file:
DOWN_AND_RIGHT	utils.cpp	454;"	d	file:
DOWN_AND_RIGHT	utils.cpp	461;"	d	file:
DRAMClocks	cpucounters.h	/^    std::array<uint64, maxChannels> DRAMClocks;$/;"	m	class:pcm::ServerUncoreCounterState
DRAMEnergyHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable DRAMEnergyHash_;$/;"	m	class:PCMServiceNS::MeasureThread
DRAMEnergyStatus	cpucounters.h	/^    uint64 DRAMEnergyStatus;$/;"	m	class:pcm::UncoreCounterState
DRAMSpeed	pcm-latency.cpp	/^double DRAMSpeed;$/;"	v
DRd	cpucounters.h	/^        DRd = 0x182,       \/\/ Demand Data Read$/;"	e	enum:pcm::PCM::PCIeEventCode
DRd	pcm-pcie.h	/^        DRd,$/;"	e	enum:GrantleyPlatform::eventIdx
DRd	pcm-pcie.h	/^        DRd,$/;"	e	enum:PurleyPlatform::eventIdx
DRd_hit	pcm-pcie.h	/^            DRd_hit,$/;"	e	enum:PurleyPlatform::Events
DRd_miss	pcm-pcie.h	/^            DRd_miss,$/;"	e	enum:GrantleyPlatform::Events
DRd_miss	pcm-pcie.h	/^            DRd_miss,$/;"	e	enum:PurleyPlatform::Events
DRd_total	pcm-pcie.h	/^            DRd_total,$/;"	e	enum:GrantleyPlatform::Events
DWORD	types.h	/^    typedef uint32 DWORD;$/;"	t	union:pcm::cvt_ds
Daemon	daemon/daemon/daemon.cpp	/^	Daemon::Daemon(int argc, char *argv[])$/;"	f	class:PCMDaemon::Daemon
Daemon	daemon/daemon/daemon.h	/^	class Daemon {$/;"	c	namespace:PCMDaemon
Dashboard	dashboard.cpp	/^    Dashboard(const std::string & title_) : title(title_) {}$/;"	f	class:Dashboard
Dashboard	dashboard.cpp	/^class Dashboard$/;"	c	file:
Data	utils.h	/^    Data$/;"	e	enum:pcm::CsvOutputType
Date	pcm-sensor-server.cpp	/^    Date = 4,$/;"	e	enum:HeaderType	file:
DateOrETag	pcm-sensor-server.cpp	/^    DateOrETag = 10,$/;"	e	enum:HeaderType	file:
DateOrSeconds	pcm-sensor-server.cpp	/^    DateOrSeconds = 15,$/;"	e	enum:HeaderType	file:
DeinitOpenLibSys	winring0/OlsApiInit.h	/^BOOL DeinitOpenLibSys(HMODULE *hModule)$/;"	f
DeinitializeOls	winring0/OlsApiInit.h	/^_DeinitializeOls DeinitializeOls = NULL;$/;"	v
DelimiterAndNewLine	pcm-sensor-server.cpp	/^        DelimiterAndNewLine,$/;"	e	enum:JSONPrinter::LineEndAction	file:
DelimiterOnly	pcm-sensor-server.cpp	/^        DelimiterOnly,$/;"	e	enum:JSONPrinter::LineEndAction	file:
DllMain	PCM-Lib_Win/dllmain.cpp	/^BOOL APIENTRY DllMain( HMODULE hModule,$/;"	f
Driver	PCM_Win/windriver.h	/^    Driver() :$/;"	f	class:pcm::Driver
Driver	PCM_Win/windriver.h	/^    Driver(const std::wstring& driverPath) :$/;"	f	class:pcm::Driver
Driver	PCM_Win/windriver.h	/^    Driver(const std::wstring& driverPath, const std::wstring& driverName, const std::wstring& driverDescription) :$/;"	f	class:pcm::Driver
Driver	PCM_Win/windriver.h	/^class Driver$/;"	c	namespace:pcm
DriverEntry	WinMSRDriver/Win7/msrmain.c	/^DRIVER_INITIALIZE DriverEntry;$/;"	v
DriverEntry	WinMSRDriver/Win7/msrmain.c	/^DriverEntry($/;"	f
DummySocketStates	pcm-core.cpp	/^	std::vector<SocketCounterState> DummySocketStates;$/;"	v
DummySocketStates	pcm-latency.cpp	/^std::vector<SocketCounterState> DummySocketStates;$/;"	v
EDCCounter	cpucounters.h	/^    std::array<std::array<uint64, maxCounters>, maxChannels> EDCCounter; \/\/ EDC controller X counter$/;"	m	class:pcm::ServerUncoreCounterState
EDCRegisterLocation	cpucounters.h	/^    std::vector<std::pair<uint32, uint32> > EDCRegisterLocation; \/\/ EDCRegisterLocation: (device, function)$/;"	m	class:pcm::ServerPCICFGUncore
EDC_CH_PCI_PMON_FIXED_CTL_EN	types.h	818;"	d
EDC_Rd_socket	pcm-memory.cpp	/^    float EDC_Rd_socket[max_sockets];$/;"	m	struct:memdata	file:
EDC_Rd_socket_chan	pcm-memory.cpp	/^    float EDC_Rd_socket_chan[max_sockets][max_edc_channels];$/;"	m	struct:memdata	file:
EDC_Wr_socket	pcm-memory.cpp	/^    float EDC_Wr_socket[max_sockets];$/;"	m	struct:memdata	file:
EDC_Wr_socket_chan	pcm-memory.cpp	/^    float EDC_Wr_socket_chan[max_sockets][max_edc_channels];$/;"	m	struct:memdata	file:
EDGE_DET	cpucounters.h	/^        EDGE_DET,$/;"	e	enum:pcm::PCM::PerfmonField
ENABLE	cpucounters.h	/^        ENABLE,$/;"	e	enum:pcm::PCM::PerfmonField
END_LIST	pcm-sensor-server.cpp	/^    const char END_LIST = ']';$/;"	m	class:JSONPrinter	file:
END_OBJECT	pcm-sensor-server.cpp	/^    const char END_OBJECT = '}';$/;"	m	class:JSONPrinter	file:
END_OF_MODEL_LIST	cpucounters.h	/^        END_OF_MODEL_LIST = 0x0ffff$/;"	e	enum:pcm::PCM::SupportedCPUModels
ETag	pcm-sensor-server.cpp	/^    ETag = 9,$/;"	e	enum:HeaderType	file:
EVENT_SELECT	cpucounters.h	/^        EVENT_SELECT,$/;"	e	enum:pcm::PCM::PerfmonField
EVENT_SIZE	pcm-core.cpp	202;"	d	file:
EXE	Makefile	/^EXE = pcm.x pcm-numa.x pcm-latency.x pcm-power.x pcm-sensor.x pcm-msr.x pcm-memory.x pcm-tsx.x pcm-pcie.x pcm-core.x pcm-iio.x pcm-lspci.x pcm-pcicfg.x$/;"	m
EXECUTABLE	daemon/daemon/test/Makefile	/^EXECUTABLE=test$/;"	m
EXECUTABLES	daemon/client/Debug/sources.mk	/^EXECUTABLES := $/;"	m
EXECUTABLES	daemon/daemon/Debug/sources.mk	/^EXECUTABLES := $/;"	m
EXE_OBJS	Makefile	/^EXE_OBJS = $(EXE:.x=.o)$/;"	m
EXT_CUSTOM_CORE_EVENTS	cpucounters.h	/^        EXT_CUSTOM_CORE_EVENTS = 2, \/*!< Custom set of core events specified in the parameter to the program method. The parameter must be a pointer to a \\c ExtendedCustomCoreEventDescription  data structure *\/$/;"	e	enum:pcm::PCM::ProgramMode
Email	pcm-sensor-server.cpp	/^    Email = 8,$/;"	e	enum:HeaderType	file:
ErrorCode	cpucounters.h	/^    enum ErrorCode {$/;"	g	class:pcm::PCM
Event	cpucounters.h	/^    checked_uint64 Event[PERF_MAX_CUSTOM_COUNTERS];$/;"	m	class:pcm::BasicCounterState
EventPosition	cpucounters.h	/^    enum EventPosition {$/;"	g	class:pcm::ServerPCICFGUncore
EventPosition	cpucounters.h	/^    enum EventPosition$/;"	g	class:pcm::PCM
EventPosition	cpucounters.h	/^    enum EventPosition$/;"	g	class:pcm::ServerUncoreCounterState
EventSelectRegister	types.h	/^    EventSelectRegister() : value(0) {}$/;"	f	struct:pcm::EventSelectRegister
EventSelectRegister	types.h	/^struct EventSelectRegister$/;"	s	namespace:pcm
Events	pcm-pcie.h	/^    enum Events {$/;"	g	class:BromolowPlatform
Events	pcm-pcie.h	/^    enum Events {$/;"	g	class:GrantleyPlatform
Events	pcm-pcie.h	/^    enum Events {$/;"	g	class:PurleyPlatform
ExtendedCustomCoreEventDescription	cpucounters.h	/^        ExtendedCustomCoreEventDescription() : fixedCfg(NULL), nGPCounters(0), gpCounterCfg(NULL)$/;"	f	struct:pcm::PCM::ExtendedCustomCoreEventDescription
ExtendedCustomCoreEventDescription	cpucounters.h	/^    struct ExtendedCustomCoreEventDescription$/;"	s	class:pcm::PCM
FB_INS_RD	pcm-latency.cpp	51;"	d	file:
FB_OCC_RD	pcm-latency.cpp	50;"	d	file:
FC_MASK	cpucounters.h	/^        FC_MASK,$/;"	e	enum:pcm::PCM::PerfmonField
FORM_PCI_ADDR	MacMSRDriver/PCIDriverInterface.h	24;"	d
FileMapType	resctrl.h	/^        typedef std::unordered_map<int, std::vector<std::string> > FileMapType;$/;"	t	class:pcm::Resctrl
FindPciDeviceByClass	winring0/OlsApiInit.h	/^_FindPciDeviceByClass FindPciDeviceByClass = NULL;$/;"	v
FindPciDeviceById	winring0/OlsApiInit.h	/^_FindPciDeviceById FindPciDeviceById = NULL;$/;"	v
FixedEventControlRegister	types.h	/^    FixedEventControlRegister() : value(0) {}$/;"	f	struct:pcm::FixedEventControlRegister
FixedEventControlRegister	types.h	/^struct FixedEventControlRegister$/;"	s	namespace:pcm
Float	pcm-sensor-server.cpp	/^    Float = 3,$/;"	e	enum:HeaderType	file:
GET	pcm-sensor-server.cpp	/^    GET = 1,$/;"	e	enum:HTTPRequestMethod	file:
GETOPT_H_	freegetopt/getopt.h	38;"	d
GaugePanel	dashboard.cpp	/^    GaugePanel(int x_, int y_, int w_, int h_, const std::string & title_) : Panel(x_, y_, w_, h_, title_) {}$/;"	f	class:GaugePanel
GaugePanel	dashboard.cpp	/^class GaugePanel : public Panel$/;"	c	file:
GetDllStatus	winring0/OlsApiInit.h	/^_GetDllStatus GetDllStatus = NULL;$/;"	v
GetDllVersion	winring0/OlsApiInit.h	/^_GetDllVersion GetDllVersion = NULL;$/;"	v
GetDriverStatus	winring0/OlsApiInit.h	/^_GetDriverStatus GetDriverStatus = NULL;$/;"	v
GetDriverType	winring0/OlsApiInit.h	/^_GetDriverType GetDriverType = NULL;$/;"	v
GetDriverVersion	winring0/OlsApiInit.h	/^_GetDriverVersion GetDriverVersion = NULL;$/;"	v
GetOlsString	winring0/OlsApiInit.h	114;"	d
GetOlsString	winring0/OlsApiInit.h	116;"	d
GetOlsStringA	winring0/OlsApiInit.h	/^_GetOlsStringA GetOlsStringA = NULL;$/;"	v
GetOlsStringW	winring0/OlsApiInit.h	/^_GetOlsStringW GetOlsStringW = NULL;$/;"	v
GetOlsValue	winring0/OlsApiInit.h	/^_GetOlsValue GetOlsValue = NULL;$/;"	v
Globals	PCM-Service_Win/PCMService.h	/^    ref struct Globals$/;"	s	namespace:PCMServiceNS
GrantleyPlatform	pcm-pcie.h	/^    GrantleyPlatform(PCM *m, bool csv, bool bandwidth, bool verbose, uint32 delay) :$/;"	f	class:GrantleyPlatform
GrantleyPlatform	pcm-pcie.h	/^class GrantleyPlatform: public LegacyPlatform$/;"	c
GraphPanel	dashboard.cpp	/^    GraphPanel(int x_, int y_, int w_, int h_, const std::string & title_, const std::string & yAxisLabel_, bool stack_)$/;"	f	class:GraphPanel
GraphPanel	dashboard.cpp	/^class GraphPanel : public Panel$/;"	c	file:
HARegisterLocation	cpucounters.h	/^    std::vector<std::pair<uint32, uint32> > HARegisterLocation;  \/\/ HARegisterLocation: (device, function)$/;"	m	class:pcm::ServerPCICFGUncore
HASWELL	cpucounters.h	/^        HASWELL = 60,$/;"	e	enum:pcm::PCM::SupportedCPUModels
HASWELLX	cpucounters.h	/^        HASWELLX = 63,$/;"	e	enum:pcm::PCM::SupportedCPUModels
HASWELL_2	cpucounters.h	/^        HASWELL_2 = 70,$/;"	e	enum:pcm::PCM::SupportedCPUModels
HASWELL_ULT	cpucounters.h	/^        HASWELL_ULT = 69,$/;"	e	enum:pcm::PCM::SupportedCPUModels
HA_PCI_PMON_CTL_EDGE_DET	types.h	965;"	d
HA_PCI_PMON_CTL_EN	types.h	967;"	d
HA_PCI_PMON_CTL_EVENT	types.h	962;"	d
HA_PCI_PMON_CTL_INVERT	types.h	968;"	d
HA_PCI_PMON_CTL_OV_EN	types.h	966;"	d
HA_PCI_PMON_CTL_RST	types.h	964;"	d
HA_PCI_PMON_CTL_THRESH	types.h	969;"	d
HA_PCI_PMON_CTL_UMASK	types.h	963;"	d
HEAD	pcm-sensor-server.cpp	/^    HEAD,$/;"	e	enum:HTTPRequestMethod	file:
HIT	pcm-pcie.h	/^    enum eventFilter {TOTAL, MISS, HIT, fltLast};$/;"	e	enum:IPlatform::eventFilter
HORIZONTAL	utils.cpp	452;"	d	file:
HORIZONTAL	utils.cpp	459;"	d	file:
HSX_C0_MSR_PMON_BOX_CTL	types.h	883;"	d
HSX_C0_MSR_PMON_BOX_FILTER	types.h	875;"	d
HSX_C0_MSR_PMON_BOX_FILTER1	types.h	874;"	d
HSX_C0_MSR_PMON_BOX_STATUS	types.h	882;"	d
HSX_C0_MSR_PMON_CTL0	types.h	880;"	d
HSX_C0_MSR_PMON_CTL1	types.h	879;"	d
HSX_C0_MSR_PMON_CTL2	types.h	878;"	d
HSX_C0_MSR_PMON_CTL3	types.h	877;"	d
HSX_C0_MSR_PMON_CTR0	types.h	872;"	d
HSX_C0_MSR_PMON_CTR1	types.h	871;"	d
HSX_C0_MSR_PMON_CTR2	types.h	870;"	d
HSX_C0_MSR_PMON_CTR3	types.h	869;"	d
HSX_CBO_MSR_STEP	types.h	885;"	d
HSX_HA0_REGISTER_DEV_ADDR	types.h	588;"	d
HSX_HA0_REGISTER_FUNC_ADDR	types.h	589;"	d
HSX_HA1_REGISTER_DEV_ADDR	types.h	590;"	d
HSX_HA1_REGISTER_FUNC_ADDR	types.h	591;"	d
HSX_MC0_CH0_REGISTER_DEV_ADDR	types.h	520;"	d
HSX_MC0_CH0_REGISTER_FUNC_ADDR	types.h	524;"	d
HSX_MC0_CH1_REGISTER_DEV_ADDR	types.h	521;"	d
HSX_MC0_CH1_REGISTER_FUNC_ADDR	types.h	525;"	d
HSX_MC0_CH2_REGISTER_DEV_ADDR	types.h	522;"	d
HSX_MC0_CH2_REGISTER_FUNC_ADDR	types.h	526;"	d
HSX_MC0_CH3_REGISTER_DEV_ADDR	types.h	523;"	d
HSX_MC0_CH3_REGISTER_FUNC_ADDR	types.h	527;"	d
HSX_MC1_CH0_REGISTER_DEV_ADDR	types.h	529;"	d
HSX_MC1_CH0_REGISTER_FUNC_ADDR	types.h	533;"	d
HSX_MC1_CH1_REGISTER_DEV_ADDR	types.h	530;"	d
HSX_MC1_CH1_REGISTER_FUNC_ADDR	types.h	534;"	d
HSX_MC1_CH2_REGISTER_DEV_ADDR	types.h	531;"	d
HSX_MC1_CH2_REGISTER_FUNC_ADDR	types.h	535;"	d
HSX_MC1_CH3_REGISTER_DEV_ADDR	types.h	532;"	d
HSX_MC1_CH3_REGISTER_FUNC_ADDR	types.h	536;"	d
HSX_PCU_MSR_PMON_BOX_CTL_ADDR	types.h	806;"	d
HSX_PCU_MSR_PMON_BOX_FILTER_ADDR	types.h	799;"	d
HSX_PCU_MSR_PMON_CTL0_ADDR	types.h	804;"	d
HSX_PCU_MSR_PMON_CTL1_ADDR	types.h	803;"	d
HSX_PCU_MSR_PMON_CTL2_ADDR	types.h	802;"	d
HSX_PCU_MSR_PMON_CTL3_ADDR	types.h	801;"	d
HSX_PCU_MSR_PMON_CTR0_ADDR	types.h	797;"	d
HSX_PCU_MSR_PMON_CTR1_ADDR	types.h	796;"	d
HSX_PCU_MSR_PMON_CTR2_ADDR	types.h	795;"	d
HSX_PCU_MSR_PMON_CTR3_ADDR	types.h	794;"	d
HSX_QPI_PORT0_REGISTER_DEV_ADDR	types.h	661;"	d
HSX_QPI_PORT0_REGISTER_FUNC_ADDR	types.h	662;"	d
HSX_QPI_PORT1_REGISTER_DEV_ADDR	types.h	663;"	d
HSX_QPI_PORT1_REGISTER_FUNC_ADDR	types.h	664;"	d
HSX_QPI_PORT2_REGISTER_DEV_ADDR	types.h	665;"	d
HSX_QPI_PORT2_REGISTER_FUNC_ADDR	types.h	666;"	d
HTML	pcm-sensor-server.cpp	/^    HTML,$/;"	e	enum:OutputFormat	file:
HTTPConnection	pcm-sensor-server.cpp	/^    HTTPConnection( HTTPServer* hs, int socketFD, struct sockaddr_in clientAddr, std::vector<http_callback> const & cl ) : hs_( hs ), socketStream_( socketFD ), clientAddress_( clientAddr ), callbackList_( cl ) {}$/;"	f	class:HTTPConnection
HTTPConnection	pcm-sensor-server.cpp	/^    HTTPConnection( HTTPServer* hs, int socketFD, struct sockaddr_in clientAddr, std::vector<http_callback> const & cl, SSL* ssl = nullptr ) : hs_( hs ), socketStream_( socketFD, ssl ), clientAddress_( clientAddr ), callbackList_( cl ) {}$/;"	f	class:HTTPConnection
HTTPConnection	pcm-sensor-server.cpp	/^class HTTPConnection : public Work {$/;"	c	file:
HTTPHeader	pcm-sensor-server.cpp	/^    HTTPHeader( char const * n, char const * v ) : name_( n ), value_( v ) {$/;"	f	class:HTTPHeader
HTTPHeader	pcm-sensor-server.cpp	/^    HTTPHeader( std::string n, std::string v ) : name_( n ), value_( v ) {$/;"	f	class:HTTPHeader
HTTPHeader	pcm-sensor-server.cpp	/^class HTTPHeader {$/;"	c	file:
HTTPHeaderProperties	pcm-sensor-server.cpp	/^class HTTPHeaderProperties {$/;"	c	file:
HTTPHeaderProperty	pcm-sensor-server.cpp	/^        HTTPHeaderProperty( std::string name, enum HeaderType ht, bool w = false, bool l = false, char lsc = ',' ) :$/;"	f	struct:HTTPHeaderProperties::HTTPHeaderProperty
HTTPHeaderProperty	pcm-sensor-server.cpp	/^    struct HTTPHeaderProperty {$/;"	s	class:HTTPHeaderProperties	file:
HTTPMessage	pcm-sensor-server.cpp	/^class HTTPMessage {$/;"	c	file:
HTTPMethodProperties	pcm-sensor-server.cpp	/^class HTTPMethodProperties {$/;"	c	file:
HTTPMethodProperty	pcm-sensor-server.cpp	/^    struct HTTPMethodProperty {$/;"	s	class:HTTPMethodProperties	file:
HTTPProtocol	pcm-sensor-server.cpp	/^enum HTTPProtocol {$/;"	g	file:
HTTPProtocol_Spare	pcm-sensor-server.cpp	/^    HTTPProtocol_Spare = 255$/;"	e	enum:HTTPProtocol	file:
HTTPReponseCode_Spare	pcm-sensor-server.cpp	/^    HTTPReponseCode_Spare = 1000 \/\/ Filler$/;"	e	enum:HTTPResponseCode	file:
HTTPRequest	pcm-sensor-server.cpp	/^    HTTPRequest() : method_( HTTPRequestMethod::GET ) {}$/;"	f	class:HTTPRequest
HTTPRequest	pcm-sensor-server.cpp	/^class HTTPRequest : public HTTPMessage {$/;"	c	file:
HTTPRequestHasBody	pcm-sensor-server.cpp	/^enum HTTPRequestHasBody {$/;"	g	file:
HTTPRequestMethod	pcm-sensor-server.cpp	/^enum HTTPRequestMethod {$/;"	g	file:
HTTPRequestMethod_Spare	pcm-sensor-server.cpp	/^    HTTPRequestMethod_Spare = 255 \/\/ To save some space for future methods$/;"	e	enum:HTTPRequestMethod	file:
HTTPResponse	pcm-sensor-server.cpp	/^    HTTPResponse() : responseCode_( HTTPResponseCode::RC_200_OK ) {}$/;"	f	class:HTTPResponse
HTTPResponse	pcm-sensor-server.cpp	/^class HTTPResponse : public HTTPMessage {$/;"	c	file:
HTTPResponseCode	pcm-sensor-server.cpp	/^enum HTTPResponseCode {$/;"	g	file:
HTTPSServer	pcm-sensor-server.cpp	/^    HTTPSServer( std::string const & ip, uint16_t port ) : HTTPServer( ip, port ), sslCTX_( nullptr ) {}$/;"	f	class:HTTPSServer
HTTPSServer	pcm-sensor-server.cpp	/^    HTTPSServer() : HTTPServer( "", 443 ) {}$/;"	f	class:HTTPSServer
HTTPSServer	pcm-sensor-server.cpp	/^class HTTPSServer : public HTTPServer {$/;"	c	file:
HTTPServer	pcm-sensor-server.cpp	/^    HTTPServer( std::string const & ip, uint16_t port ) : Server( ip, port ) {$/;"	f	class:HTTPServer
HTTPServer	pcm-sensor-server.cpp	/^    HTTPServer() : Server( "", 80 ) {$/;"	f	class:HTTPServer
HTTPServer	pcm-sensor-server.cpp	/^class HTTPServer : public Server {$/;"	c	file:
HTTP_0_9	pcm-sensor-server.cpp	/^    HTTP_0_9 = 1,$/;"	e	enum:HTTPProtocol	file:
HTTP_1_0	pcm-sensor-server.cpp	/^    HTTP_1_0,$/;"	e	enum:HTTPProtocol	file:
HTTP_1_1	pcm-sensor-server.cpp	/^    HTTP_1_1,$/;"	e	enum:HTTPProtocol	file:
HTTP_2_0	pcm-sensor-server.cpp	/^    HTTP_2_0,$/;"	e	enum:HTTPProtocol	file:
HWRegister	cpucounters.h	/^class HWRegister$/;"	c	namespace:pcm
HWRegisterPtr	cpucounters.h	/^    typedef std::shared_ptr<HWRegister> HWRegisterPtr;$/;"	t	class:pcm::UncorePMU
H_EVENT_NAME	cpucounters.h	/^        H_EVENT_NAME,$/;"	e	enum:pcm::PCM::PerfmonField
Header1	utils.h	/^    Header1,$/;"	e	enum:pcm::CsvOutputType
Header2	utils.h	/^    Header2,$/;"	e	enum:pcm::CsvOutputType
HeaderType	pcm-sensor-server.cpp	/^enum HeaderType {$/;"	g	file:
HeaderType_Spare	pcm-sensor-server.cpp	/^    HeaderType_Spare = 127 \/\/ Reserving some values$/;"	e	enum:HeaderType	file:
Hlt	winring0/OlsApiInit.h	/^_Hlt Hlt = NULL;$/;"	v
HltPx	winring0/OlsApiInit.h	/^_HltPx HltPx = NULL;$/;"	v
HltTx	winring0/OlsApiInit.h	/^_HltTx HltTx = NULL;$/;"	v
HostPort	pcm-sensor-server.cpp	/^    HostPort = 13,$/;"	e	enum:HeaderType	file:
HyperThread	topology.h	/^    HyperThread( PCM* m, int32 threadID, int32 osID, enum Status status ) : pcm_(m), threadID_(threadID), osID_(osID), status_(status) {}$/;"	f	class:pcm::HyperThread
HyperThread	topology.h	/^class HyperThread : public SystemObject$/;"	c	namespace:pcm
IA32_CR_FIXED_CTR_CTRL	types.h	54;"	d
IA32_CR_PERF_GLOBAL_CTRL	types.h	53;"	d
IA32_DEBUGCTL	types.h	67;"	d
IA32_PERFEVTSEL0_ADDR	types.h	55;"	d
IA32_PERFEVTSEL1_ADDR	types.h	56;"	d
IA32_PERFEVTSEL2_ADDR	types.h	57;"	d
IA32_PERFEVTSEL3_ADDR	types.h	58;"	d
IA32_PERF_GLOBAL_OVF_CTRL	types.h	/^constexpr auto IA32_PERF_GLOBAL_OVF_CTRL = 0x390;$/;"	m	namespace:pcm
IA32_PERF_GLOBAL_STATUS	types.h	/^constexpr auto IA32_PERF_GLOBAL_STATUS = 0x38E;$/;"	m	namespace:pcm
IA32_PMC0	types.h	69;"	d
IA32_PMC1	types.h	70;"	d
IA32_PMC2	types.h	71;"	d
IA32_PMC3	types.h	72;"	d
IA32_PQR_ASSOC	types.h	298;"	d
IA32_QM_CTR	types.h	300;"	d
IA32_QM_EVTSEL	types.h	299;"	d
IA32_TIME_STAMP_COUNTER	types.h	80;"	d
ICL	cpucounters.h	/^        ICL = 126,$/;"	e	enum:pcm::PCM::SupportedCPUModels
ICL_1	cpucounters.h	/^        ICL_1 = 125,$/;"	e	enum:pcm::PCM::SupportedCPUModels
IGNORED	cpucounters.h	/^        IGNORED,$/;"	e	enum:pcm::PCM::PerfmonField
IIOCounter	cpucounters.h	/^    std::array<std::array<uint64, maxCounters>, maxIIOStacks> IIOCounter;$/;"	m	class:pcm::ServerUncoreCounterState
IIOCounterState	cpucounters.h	/^typedef SimpleCounterState IIOCounterState;$/;"	t	namespace:pcm
IIOEventsAvailable	cpucounters.h	/^    bool IIOEventsAvailable() const$/;"	f	class:pcm::PCM
IIOPMUCNTCTLRegister	types.h	/^    IIOPMUCNTCTLRegister() : value(0) { }$/;"	f	struct:pcm::IIOPMUCNTCTLRegister
IIOPMUCNTCTLRegister	types.h	/^    IIOPMUCNTCTLRegister(const uint64 v) : value(v) { }$/;"	f	struct:pcm::IIOPMUCNTCTLRegister
IIOPMUCNTCTLRegister	types.h	/^struct IIOPMUCNTCTLRegister$/;"	s	namespace:pcm
IIO_CBDMA	cpucounters.h	/^        IIO_CBDMA = 0, \/\/ shared with DMI$/;"	e	enum:pcm::PCM::__anon3
IIO_MCP0	cpucounters.h	/^        IIO_MCP0 = 4,$/;"	e	enum:pcm::PCM::__anon3
IIO_MCP1	cpucounters.h	/^        IIO_MCP1 = 5,$/;"	e	enum:pcm::PCM::__anon3
IIO_MSR_PMON_CTL_CH_MASK	types.h	950;"	d
IIO_MSR_PMON_CTL_EDGE_DET	types.h	945;"	d
IIO_MSR_PMON_CTL_EN	types.h	947;"	d
IIO_MSR_PMON_CTL_EVENT	types.h	942;"	d
IIO_MSR_PMON_CTL_FC_MASK	types.h	951;"	d
IIO_MSR_PMON_CTL_INVERT	types.h	948;"	d
IIO_MSR_PMON_CTL_OV_EN	types.h	946;"	d
IIO_MSR_PMON_CTL_RST	types.h	944;"	d
IIO_MSR_PMON_CTL_THRESH	types.h	949;"	d
IIO_MSR_PMON_CTL_UMASK	types.h	943;"	d
IIO_PCIe0	cpucounters.h	/^        IIO_PCIe0 = 1,$/;"	e	enum:pcm::PCM::__anon3
IIO_PCIe1	cpucounters.h	/^        IIO_PCIe1 = 2,$/;"	e	enum:pcm::PCM::__anon3
IIO_PCIe2	cpucounters.h	/^        IIO_PCIe2 = 3,$/;"	e	enum:pcm::PCM::__anon3
IIO_STACK_COUNT	cpucounters.h	/^        IIO_STACK_COUNT = 6$/;"	e	enum:pcm::PCM::__anon3
IMC_DEV_IDS	cpucounters.cpp	/^static const uint32 IMC_DEV_IDS[] = {$/;"	m	namespace:pcm	file:
INST_RETIRED_ANY_ADDR	types.h	50;"	d
INVALID	cpucounters.h	/^        INVALID, \/* Use to parse invalid field *\/$/;"	e	enum:pcm::PCM::PerfmonField
INVALID_MODE	cpucounters.h	/^        INVALID_MODE                \/*!< Non-programmed mode *\/$/;"	e	enum:pcm::PCM::ProgramMode
INVERT	cpucounters.h	/^        INVERT,$/;"	e	enum:pcm::PCM::PerfmonField
IO_CTL_MSR_READ	WinMSRDriver/Win7/msrstruct.h	28;"	d
IO_CTL_MSR_WRITE	WinMSRDriver/Win7/msrstruct.h	29;"	d
IO_CTL_PCICFG_READ	WinMSRDriver/Win7/msrstruct.h	30;"	d
IO_CTL_PCICFG_WRITE	WinMSRDriver/Win7/msrstruct.h	31;"	d
IP	pcm-sensor-server.cpp	/^    IP = 17,$/;"	e	enum:HeaderType	file:
IPlatform	pcm-pcie.h	/^IPlatform::IPlatform(PCM *m, bool csv, bool bandwidth, bool verbose) :$/;"	f	class:IPlatform
IPlatform	pcm-pcie.h	/^class IPlatform$/;"	c
IRQ	cpucounters.h	/^        IRQ,$/;"	e	enum:pcm::PCM::ChaPipelineQueue
IVTHSX_CBO_MSR_PMON_BOX_FILTER1_OPC	types.h	914;"	d
IVT_C0_MSR_PMON_BOX_FILTER1	types.h	867;"	d
IVT_MSR_UNCORE_PMON_GLOBAL_CTL	types.h	/^constexpr auto IVT_MSR_UNCORE_PMON_GLOBAL_CTL = 0x0C00;$/;"	m	namespace:pcm
IVYTOWN	cpucounters.h	/^        IVYTOWN = 62,$/;"	e	enum:pcm::PCM::SupportedCPUModels
IVY_BRIDGE	cpucounters.h	/^        IVY_BRIDGE = 58,$/;"	e	enum:pcm::PCM::SupportedCPUModels
ImageXIcon	pcm-sensor-server.cpp	/^    ImageXIcon,$/;"	e	enum:MimeType	file:
Indent	pcm-sensor-server.cpp	/^        explicit Indent( std::string const & is = std::string("    ") ) : indstr_(is), indent_(""), len_(0), indstrlen_(is.length())$/;"	f	class:Indent
Indent	pcm-sensor-server.cpp	/^class Indent {$/;"	c	file:
InfluxDB	dashboard.h	/^enum PCMDashboardType { InfluxDB, Prometheus };$/;"	e	enum:pcm::PCMDashboardType
InfluxDBTarget	dashboard.cpp	/^    InfluxDBTarget(const std::string & alias_, const std::string & metric_) : alias(alias_), metric(metric_) {}$/;"	f	class:pcm::InfluxDBTarget
InfluxDBTarget	dashboard.cpp	/^class InfluxDBTarget : public Target$/;"	c	namespace:pcm	file:
InitOpenLibSys	winring0/OlsApiInit.h	/^BOOL InitOpenLibSys(HMODULE *hModule)$/;"	f
InitializeComponent	PCM-Service_Win/PCMInstaller.h	/^		void InitializeComponent(void)$/;"	f	class:PMUService::ProjectInstaller
InitializeComponent	PCM-Service_Win/PCMService.h	/^        void InitializeComponent(void)$/;"	f	class:PCMServiceNS::PCMService
InitializeOls	winring0/OlsApiInit.h	/^_InitializeOls InitializeOls = NULL;$/;"	v
InstRetiredAny	cpucounters.h	/^    checked_uint64 InstRetiredAny;$/;"	m	class:pcm::BasicCounterState
InstallOpenLibSys	winring0/OlsApiInit.h	/^_InstallOpenLibSys InstallOpenLibSys = NULL;$/;"	v
InstanceLock	cpucounters.cpp	/^    InstanceLock(const bool global)$/;"	f	class:pcm::InstanceLock
InstanceLock	cpucounters.cpp	/^    InstanceLock(const bool global_) : globalSemaphoreName(PCM_INSTANCE_LOCK_SEMAPHORE_NAME), globalSemaphore(NULL), global(global_)$/;"	f	class:pcm::InstanceLock
InstanceLock	cpucounters.cpp	/^class InstanceLock$/;"	c	namespace:pcm	file:
Integer	pcm-sensor-server.cpp	/^    Integer = 2,$/;"	e	enum:HeaderType	file:
Invalid	pcm-sensor-server.cpp	/^    Invalid = -1,$/;"	e	enum:HeaderType	file:
InvariantTSC	cpucounters.h	/^    uint64 InvariantTSC;    \/\/ invariant time stamp counter$/;"	m	class:pcm::ServerUncoreCounterState
InvariantTSC	cpucounters.h	/^    uint64 InvariantTSC; \/\/ invariant time stamp counter$/;"	m	class:pcm::BasicCounterState
IsCpuid	winring0/OlsApiInit.h	/^_IsCpuid IsCpuid = NULL;$/;"	v
IsMsr	winring0/OlsApiInit.h	/^_IsMsr IsMsr = NULL;$/;"	v
IsTsc	winring0/OlsApiInit.h	/^_IsTsc IsTsc = NULL;$/;"	v
ItoM	cpucounters.h	/^        ItoM = 0x1C8,      \/\/ Request Invalidate Line; share the same code for CPU, use tid to filter PCIe only traffic$/;"	e	enum:pcm::PCM::PCIeEventCode
ItoM	pcm-pcie.h	/^        ItoM,$/;"	e	enum:GrantleyPlatform::eventIdx
ItoM	pcm-pcie.h	/^        ItoM,$/;"	e	enum:PurleyPlatform::eventIdx
ItoM_hit	pcm-pcie.h	/^            ItoM_hit,$/;"	e	enum:PurleyPlatform::Events
ItoM_miss	pcm-pcie.h	/^            ItoM_miss,$/;"	e	enum:GrantleyPlatform::Events
ItoM_miss	pcm-pcie.h	/^            ItoM_miss,$/;"	e	enum:PurleyPlatform::Events
ItoM_total	pcm-pcie.h	/^            ItoM_total,$/;"	e	enum:GrantleyPlatform::Events
ItoMtid	cpucounters.h	/^        ItoMtid = 0x3E,$/;"	e	enum:pcm::PCM::CBoEventTid
JAKETOWN	cpucounters.h	/^        JAKETOWN = 45,$/;"	e	enum:pcm::PCM::SupportedCPUModels
JKTIVT_CBO_MSR_STEP	types.h	865;"	d
JKTIVT_MC0_CH0_REGISTER_DEV_ADDR	types.h	502;"	d
JKTIVT_MC0_CH0_REGISTER_FUNC_ADDR	types.h	506;"	d
JKTIVT_MC0_CH1_REGISTER_DEV_ADDR	types.h	503;"	d
JKTIVT_MC0_CH1_REGISTER_FUNC_ADDR	types.h	507;"	d
JKTIVT_MC0_CH2_REGISTER_DEV_ADDR	types.h	504;"	d
JKTIVT_MC0_CH2_REGISTER_FUNC_ADDR	types.h	508;"	d
JKTIVT_MC0_CH3_REGISTER_DEV_ADDR	types.h	505;"	d
JKTIVT_MC0_CH3_REGISTER_FUNC_ADDR	types.h	509;"	d
JKTIVT_MC1_CH0_REGISTER_DEV_ADDR	types.h	511;"	d
JKTIVT_MC1_CH0_REGISTER_FUNC_ADDR	types.h	515;"	d
JKTIVT_MC1_CH1_REGISTER_DEV_ADDR	types.h	512;"	d
JKTIVT_MC1_CH1_REGISTER_FUNC_ADDR	types.h	516;"	d
JKTIVT_MC1_CH2_REGISTER_DEV_ADDR	types.h	513;"	d
JKTIVT_MC1_CH2_REGISTER_FUNC_ADDR	types.h	517;"	d
JKTIVT_MC1_CH3_REGISTER_DEV_ADDR	types.h	514;"	d
JKTIVT_MC1_CH3_REGISTER_FUNC_ADDR	types.h	518;"	d
JKTIVT_PCU_MSR_PMON_BOX_CTL_ADDR	types.h	792;"	d
JKTIVT_PCU_MSR_PMON_BOX_FILTER_ADDR	types.h	785;"	d
JKTIVT_PCU_MSR_PMON_CTL0_ADDR	types.h	790;"	d
JKTIVT_PCU_MSR_PMON_CTL1_ADDR	types.h	789;"	d
JKTIVT_PCU_MSR_PMON_CTL2_ADDR	types.h	788;"	d
JKTIVT_PCU_MSR_PMON_CTL3_ADDR	types.h	787;"	d
JKTIVT_PCU_MSR_PMON_CTR0_ADDR	types.h	783;"	d
JKTIVT_PCU_MSR_PMON_CTR1_ADDR	types.h	782;"	d
JKTIVT_PCU_MSR_PMON_CTR2_ADDR	types.h	781;"	d
JKTIVT_PCU_MSR_PMON_CTR3_ADDR	types.h	780;"	d
JKTIVT_QPI_PORT0_REGISTER_DEV_ADDR	types.h	654;"	d
JKTIVT_QPI_PORT0_REGISTER_FUNC_ADDR	types.h	655;"	d
JKTIVT_QPI_PORT1_REGISTER_DEV_ADDR	types.h	656;"	d
JKTIVT_QPI_PORT1_REGISTER_FUNC_ADDR	types.h	657;"	d
JKTIVT_QPI_PORT2_REGISTER_DEV_ADDR	types.h	658;"	d
JKTIVT_QPI_PORT2_REGISTER_FUNC_ADDR	types.h	659;"	d
JKTIVT_UBOX_MSR_PMON_CTL0_ADDR	types.h	/^constexpr auto JKTIVT_UBOX_MSR_PMON_CTL0_ADDR = (0x0C10);$/;"	m	namespace:pcm
JKTIVT_UBOX_MSR_PMON_CTL1_ADDR	types.h	/^constexpr auto JKTIVT_UBOX_MSR_PMON_CTL1_ADDR = (0x0C11);$/;"	m	namespace:pcm
JKTIVT_UBOX_MSR_PMON_CTR0_ADDR	types.h	/^constexpr auto JKTIVT_UBOX_MSR_PMON_CTR0_ADDR = (0x0C16);$/;"	m	namespace:pcm
JKTIVT_UBOX_MSR_PMON_CTR1_ADDR	types.h	/^constexpr auto JKTIVT_UBOX_MSR_PMON_CTR1_ADDR = (0x0C17);$/;"	m	namespace:pcm
JKTIVT_UCLK_FIXED_CTL_ADDR	types.h	/^constexpr auto JKTIVT_UCLK_FIXED_CTL_ADDR = (0x0C08);$/;"	m	namespace:pcm
JKTIVT_UCLK_FIXED_CTR_ADDR	types.h	/^constexpr auto JKTIVT_UCLK_FIXED_CTR_ADDR = (0x0C09);$/;"	m	namespace:pcm
JKT_C0_MSR_PMON_BOX_CTL	types.h	863;"	d
JKT_C0_MSR_PMON_BOX_FILTER	types.h	858;"	d
JKT_C0_MSR_PMON_CTL0	types.h	862;"	d
JKT_C0_MSR_PMON_CTL1	types.h	861;"	d
JKT_C0_MSR_PMON_CTL2	types.h	860;"	d
JKT_C0_MSR_PMON_CTL3	types.h	859;"	d
JKT_C0_MSR_PMON_CTR0	types.h	857;"	d
JKT_C0_MSR_PMON_CTR1	types.h	856;"	d
JKT_C0_MSR_PMON_CTR2	types.h	855;"	d
JKT_C0_MSR_PMON_CTR3	types.h	854;"	d
JKT_CBO_MSR_PMON_BOX_FILTER_OPC	types.h	913;"	d
JSON	pcm-sensor-server.cpp	/^    JSON,$/;"	e	enum:OutputFormat	file:
JSONPrinter	pcm-sensor-server.cpp	/^    JSONPrinter( std::pair<std::shared_ptr<Aggregator>,std::shared_ptr<Aggregator>> aggregatorPair ) : indentation("  "), aggPair_( aggregatorPair ) {$/;"	f	class:JSONPrinter
JSONPrinter	pcm-sensor-server.cpp	/^class JSONPrinter : Visitor$/;"	c	file:
KBL	cpucounters.h	/^        KBL = 158,$/;"	e	enum:pcm::PCM::SupportedCPUModels
KBL_1	cpucounters.h	/^        KBL_1 = 142,$/;"	e	enum:pcm::PCM::SupportedCPUModels
KEY_FILE_NAME	pcm-sensor-server.cpp	66;"	d	file:
KNL	cpucounters.h	/^        KNL = 87,$/;"	e	enum:pcm::PCM::SupportedCPUModels
KNL_CHA0_MSR_PMON_BOX_CTL	types.h	895;"	d
KNL_CHA0_MSR_PMON_BOX_CTL1	types.h	896;"	d
KNL_CHA0_MSR_PMON_BOX_CTRL	types.h	888;"	d
KNL_CHA0_MSR_PMON_BOX_STATUS	types.h	897;"	d
KNL_CHA0_MSR_PMON_CTR0	types.h	899;"	d
KNL_CHA0_MSR_PMON_CTR1	types.h	900;"	d
KNL_CHA0_MSR_PMON_CTR2	types.h	901;"	d
KNL_CHA0_MSR_PMON_CTR3	types.h	902;"	d
KNL_CHA0_MSR_PMON_EVT_SEL0	types.h	890;"	d
KNL_CHA0_MSR_PMON_EVT_SEL1	types.h	891;"	d
KNL_CHA0_MSR_PMON_EVT_SEL2	types.h	892;"	d
KNL_CHA0_MSR_PMON_EVT_SEL3	types.h	893;"	d
KNL_CHA_MSR_STEP	types.h	887;"	d
KNL_EDC0_ECLK_REGISTER_DEV_ADDR	types.h	571;"	d
KNL_EDC0_ECLK_REGISTER_FUNC_ADDR	types.h	572;"	d
KNL_EDC1_ECLK_REGISTER_DEV_ADDR	types.h	573;"	d
KNL_EDC1_ECLK_REGISTER_FUNC_ADDR	types.h	574;"	d
KNL_EDC2_ECLK_REGISTER_DEV_ADDR	types.h	575;"	d
KNL_EDC2_ECLK_REGISTER_FUNC_ADDR	types.h	576;"	d
KNL_EDC3_ECLK_REGISTER_DEV_ADDR	types.h	577;"	d
KNL_EDC3_ECLK_REGISTER_FUNC_ADDR	types.h	578;"	d
KNL_EDC4_ECLK_REGISTER_DEV_ADDR	types.h	579;"	d
KNL_EDC4_ECLK_REGISTER_FUNC_ADDR	types.h	580;"	d
KNL_EDC5_ECLK_REGISTER_DEV_ADDR	types.h	581;"	d
KNL_EDC5_ECLK_REGISTER_FUNC_ADDR	types.h	582;"	d
KNL_EDC6_ECLK_REGISTER_DEV_ADDR	types.h	583;"	d
KNL_EDC6_ECLK_REGISTER_FUNC_ADDR	types.h	584;"	d
KNL_EDC7_ECLK_REGISTER_DEV_ADDR	types.h	585;"	d
KNL_EDC7_ECLK_REGISTER_FUNC_ADDR	types.h	586;"	d
KNL_MC0_CH0_REGISTER_DEV_ADDR	types.h	538;"	d
KNL_MC0_CH0_REGISTER_FUNC_ADDR	types.h	541;"	d
KNL_MC0_CH1_REGISTER_DEV_ADDR	types.h	539;"	d
KNL_MC0_CH1_REGISTER_FUNC_ADDR	types.h	542;"	d
KNL_MC0_CH2_REGISTER_DEV_ADDR	types.h	540;"	d
KNL_MC0_CH2_REGISTER_FUNC_ADDR	types.h	543;"	d
KNL_MC1_CH0_REGISTER_DEV_ADDR	types.h	564;"	d
KNL_MC1_CH0_REGISTER_FUNC_ADDR	types.h	567;"	d
KNL_MC1_CH1_REGISTER_DEV_ADDR	types.h	565;"	d
KNL_MC1_CH1_REGISTER_FUNC_ADDR	types.h	568;"	d
KNL_MC1_CH2_REGISTER_DEV_ADDR	types.h	566;"	d
KNL_MC1_CH2_REGISTER_FUNC_ADDR	types.h	569;"	d
KNX_EDC_CH_PCI_PMON_BOX_CTL_ADDR	types.h	609;"	d
KNX_EDC_CH_PCI_PMON_CTL0_ADDR	types.h	630;"	d
KNX_EDC_CH_PCI_PMON_CTL1_ADDR	types.h	629;"	d
KNX_EDC_CH_PCI_PMON_CTL2_ADDR	types.h	628;"	d
KNX_EDC_CH_PCI_PMON_CTL3_ADDR	types.h	627;"	d
KNX_EDC_CH_PCI_PMON_CTR0_ADDR	types.h	652;"	d
KNX_EDC_CH_PCI_PMON_CTR1_ADDR	types.h	651;"	d
KNX_EDC_CH_PCI_PMON_CTR2_ADDR	types.h	650;"	d
KNX_EDC_CH_PCI_PMON_CTR3_ADDR	types.h	649;"	d
KNX_EDC_CH_PCI_PMON_FIXED_CTL_ADDR	types.h	626;"	d
KNX_EDC_CH_PCI_PMON_FIXED_CTR_ADDR	types.h	648;"	d
KNX_EDC_ECLK_PMON_UNIT_CTL_REG	types.h	631;"	d
KNX_MC_CH_PCI_PMON_BOX_CTL_ADDR	types.h	608;"	d
KNX_MC_CH_PCI_PMON_CTL0_ADDR	types.h	623;"	d
KNX_MC_CH_PCI_PMON_CTL1_ADDR	types.h	622;"	d
KNX_MC_CH_PCI_PMON_CTL2_ADDR	types.h	621;"	d
KNX_MC_CH_PCI_PMON_CTL3_ADDR	types.h	620;"	d
KNX_MC_CH_PCI_PMON_CTR0_ADDR	types.h	645;"	d
KNX_MC_CH_PCI_PMON_CTR1_ADDR	types.h	644;"	d
KNX_MC_CH_PCI_PMON_CTR2_ADDR	types.h	643;"	d
KNX_MC_CH_PCI_PMON_CTR3_ADDR	types.h	642;"	d
KNX_MC_CH_PCI_PMON_FIXED_CTL_ADDR	types.h	619;"	d
KNX_MC_CH_PCI_PMON_FIXED_CTR_ADDR	types.h	641;"	d
L1	pcm-latency.cpp	42;"	d	file:
L2	pcm-latency.cpp	43;"	d	file:
L2CacheHitRatioAvailable	cpucounters.h	/^    bool L2CacheHitRatioAvailable;$/;"	m	class:pcm::PCM
L2CacheHitsAvailable	cpucounters.h	/^    bool L2CacheHitsAvailable;$/;"	m	class:pcm::PCM
L2CacheMissesAvailable	cpucounters.h	/^    bool L2CacheMissesAvailable;$/;"	m	class:pcm::PCM
L2HitMPos	cpucounters.h	/^               L2HitMPos = 2,$/;"	e	enum:pcm::BasicCounterState::__anon6
L2HitPos	cpucounters.h	/^                L2HitPos = 3$/;"	e	enum:pcm::BasicCounterState::__anon6
L3CacheHitRatioAvailable	cpucounters.h	/^    bool L3CacheHitRatioAvailable;$/;"	m	class:pcm::PCM
L3CacheHitsAvailable	cpucounters.h	/^    bool L3CacheHitsAvailable;$/;"	m	class:pcm::PCM
L3CacheHitsNoSnoopAvailable	cpucounters.h	/^    bool L3CacheHitsNoSnoopAvailable;$/;"	m	class:pcm::PCM
L3CacheHitsSnoopAvailable	cpucounters.h	/^    bool L3CacheHitsSnoopAvailable;$/;"	m	class:pcm::PCM
L3CacheMissesAvailable	cpucounters.h	/^    bool L3CacheMissesAvailable;$/;"	m	class:pcm::PCM
L3CacheOccupancyMetricAvailable	cpucounters.cpp	/^bool PCM::L3CacheOccupancyMetricAvailable() const$/;"	f	class:pcm::PCM
L3MissPos	cpucounters.h	/^               L3MissPos = 0,$/;"	e	enum:pcm::BasicCounterState::__anon6
L3OCC	resctrl.h	/^        FileMapType L3OCC, MBL, MBT;$/;"	m	class:pcm::Resctrl
L3Occupancy	cpucounters.h	/^    uint64 L3Occupancy;$/;"	m	class:pcm::BasicCounterState
L3QOSMetricAvailable	cpucounters.cpp	/^bool PCM::L3QOSMetricAvailable() const$/;"	f	class:pcm::PCM
L3ScalingFactor	cpucounters.h	/^    uint32 L3ScalingFactor;$/;"	m	class:pcm::PCM
L3UnsharedHitPos	cpucounters.h	/^        L3UnsharedHitPos = 1,$/;"	e	enum:pcm::BasicCounterState::__anon6
LDFLAGS	daemon/daemon/test/Makefile	/^LDFLAGS=$/;"	m
LIB	Makefile	/^LIB= -lpthread -lc++$/;"	m
LIB	Makefile	/^LIB= -lpthread MacMSRDriver\/build\/Release\/libPcmMsr.dylib$/;"	m
LIB	Makefile	/^LIB= -pthread -lrt$/;"	m
LIBS	daemon/client/Debug/objects.mk	/^LIBS :=$/;"	m
LIBS	daemon/daemon/Debug/objects.mk	/^LIBS := -lpthread -lrt$/;"	m
LLCReadMissLatencyMetricsAvailable	cpucounters.h	/^    bool LLCReadMissLatencyMetricsAvailable() const$/;"	f	class:pcm::PCM
LambdaJob	threadpool.h	/^    LambdaJob( F&& f, Args&& ... args )$/;"	f	class:pcm::LambdaJob
LambdaJob	threadpool.h	/^class LambdaJob : public Work {$/;"	c	namespace:pcm
LatencyMetricsAvailable	cpucounters.h	/^    bool LatencyMetricsAvailable() const$/;"	f	class:pcm::PCM
LegacyPlatform	pcm-pcie.h	/^    LegacyPlatform(initializer_list<string> events, initializer_list <eventGroup_t> eventCodes,$/;"	f	class:LegacyPlatform
LegacyPlatform	pcm-pcie.h	/^class LegacyPlatform: public IPlatform$/;"	c
LineEndAction	pcm-sensor-server.cpp	/^    enum LineEndAction {$/;"	g	class:JSONPrinter	file:
LineEndAction_Spare	pcm-sensor-server.cpp	/^        LineEndAction_Spare = 255$/;"	e	enum:JSONPrinter::LineEndAction	file:
Log	winpmem/winpmem.cpp	/^void WinPmem::Log(const TCHAR *message, ...) {$/;"	f	class:pcm::WinPmem
LogError	winpmem/winpmem.cpp	/^void WinPmem::LogError(TCHAR *message) {$/;"	f	class:pcm::WinPmem
M2MCounter	cpucounters.h	/^    std::array<std::array<uint64, maxCounters>, maxControllers> M2MCounter; \/\/ M2M\/iMC boxes x counter$/;"	m	class:pcm::ServerUncoreCounterState
M2MRegisterLocation	cpucounters.h	/^    std::vector<std::pair<uint32, uint32> > M2MRegisterLocation; \/\/ M2MRegisterLocation: (device, function)$/;"	m	class:pcm::ServerPCICFGUncore
M2M_CLOCKTICKS	cpucounters.h	/^        M2M_CLOCKTICKS=1$/;"	e	enum:pcm::ServerPCICFGUncore::EventPosition
M2M_DEV_IDS	cpucounters.cpp	/^static const uint32 M2M_DEV_IDS[] = {$/;"	m	namespace:pcm	file:
M2M_NM_read_hit_rate	pcm-memory.cpp	/^    float M2M_NM_read_hit_rate[max_sockets][max_imc_controllers];$/;"	m	struct:memdata	file:
M2M_PCI_PMON_BOX_CTL_ADDR	types.h	711;"	d
M2M_PCI_PMON_CTL0_ADDR	types.h	713;"	d
M2M_PCI_PMON_CTL1_ADDR	types.h	714;"	d
M2M_PCI_PMON_CTL2_ADDR	types.h	715;"	d
M2M_PCI_PMON_CTL3_ADDR	types.h	716;"	d
M2M_PCI_PMON_CTL_EDGE_DET	types.h	956;"	d
M2M_PCI_PMON_CTL_EN	types.h	958;"	d
M2M_PCI_PMON_CTL_EVENT	types.h	953;"	d
M2M_PCI_PMON_CTL_INVERT	types.h	959;"	d
M2M_PCI_PMON_CTL_OV_EN	types.h	957;"	d
M2M_PCI_PMON_CTL_RST	types.h	955;"	d
M2M_PCI_PMON_CTL_THRESH	types.h	960;"	d
M2M_PCI_PMON_CTL_UMASK	types.h	954;"	d
M2M_PCI_PMON_CTR0_ADDR	types.h	718;"	d
M2M_PCI_PMON_CTR1_ADDR	types.h	719;"	d
M2M_PCI_PMON_CTR2_ADDR	types.h	720;"	d
M2M_PCI_PMON_CTR3_ADDR	types.h	721;"	d
M2Mbus	cpucounters.h	/^    int32 iMCbus,UPIbus,M2Mbus;$/;"	m	class:pcm::ServerPCICFGUncore
M3UPICounter	cpucounters.h	/^    std::array<std::array<uint64, maxCounters>, maxXPILinks> M3UPICounter;$/;"	m	class:pcm::ServerUncoreCounterState
M3UPIRegisterLocation	cpucounters.h	/^    std::vector<std::pair<uint32, uint32> > M3UPIRegisterLocation; \/\/ (device, function)$/;"	m	class:pcm::ServerPCICFGUncore
M3UPI_PCI_PMON_BOX_CTL_ADDR	types.h	/^constexpr auto M3UPI_PCI_PMON_BOX_CTL_ADDR = (0xF4);$/;"	m	namespace:pcm
M3UPI_PCI_PMON_CTL0_ADDR	types.h	/^constexpr auto M3UPI_PCI_PMON_CTL0_ADDR = (0xD8);$/;"	m	namespace:pcm
M3UPI_PCI_PMON_CTL1_ADDR	types.h	/^constexpr auto M3UPI_PCI_PMON_CTL1_ADDR = (0xDC);$/;"	m	namespace:pcm
M3UPI_PCI_PMON_CTL2_ADDR	types.h	/^constexpr auto M3UPI_PCI_PMON_CTL2_ADDR = (0xE0);$/;"	m	namespace:pcm
M3UPI_PCI_PMON_CTR0_ADDR	types.h	/^constexpr auto M3UPI_PCI_PMON_CTR0_ADDR = (0xA0);$/;"	m	namespace:pcm
M3UPI_PCI_PMON_CTR1_ADDR	types.h	/^constexpr auto M3UPI_PCI_PMON_CTR1_ADDR = (0xA8);$/;"	m	namespace:pcm
M3UPI_PCI_PMON_CTR2_ADDR	types.h	/^constexpr auto M3UPI_PCI_PMON_CTR2_ADDR = (0xB0);$/;"	m	namespace:pcm
MAX_CORES	pcm-core.cpp	46;"	d	file:
MAX_CORES	pcm-latency.cpp	54;"	d	file:
MAX_CORES	pcm-raw.cpp	44;"	d	file:
MAX_CORES	pcm.cpp	45;"	d	file:
MAX_CPU_CORES	daemon/daemon/common.h	24;"	d
MAX_C_STATE	cpucounters.h	/^    enum { MAX_C_STATE = 10 }; \/\/ max C-state on Intel architecture$/;"	e	enum:pcm::PCM::__anon2
MAX_SOCKETS	daemon/daemon/common.h	25;"	d
MAX_THREADS_PER_CORE	topology.h	/^    constexpr static int32 MAX_THREADS_PER_CORE = 4;$/;"	m	class:pcm::Core
MB0_MSR_PERF_GLOBAL_CTL	types.h	213;"	d
MB0_MSR_PMU_CNT_0	types.h	214;"	d
MB0_MSR_PMU_CNT_1	types.h	216;"	d
MB0_MSR_PMU_CNT_CTL_0	types.h	215;"	d
MB0_MSR_PMU_CNT_CTL_1	types.h	217;"	d
MB0_MSR_PMU_ZDP_CTL_FVC	types.h	218;"	d
MB1_MSR_PERF_GLOBAL_CTL	types.h	221;"	d
MB1_MSR_PMU_CNT_0	types.h	222;"	d
MB1_MSR_PMU_CNT_1	types.h	224;"	d
MB1_MSR_PMU_CNT_CTL_0	types.h	223;"	d
MB1_MSR_PMU_CNT_CTL_1	types.h	225;"	d
MB1_MSR_PMU_ZDP_CTL_FVC	types.h	226;"	d
MBL	resctrl.h	/^        FileMapType L3OCC, MBL, MBT;$/;"	m	class:pcm::Resctrl
MBLCounter	width_extender.h	/^        MBLCounter(std::shared_ptr<SafeMsrHandle> msr_) : msr(msr_) { }$/;"	f	struct:pcm::CounterWidthExtender::MBLCounter
MBLCounter	width_extender.h	/^    struct MBLCounter : public AbstractRawCounter$/;"	s	class:pcm::CounterWidthExtender
MBT	resctrl.h	/^        FileMapType L3OCC, MBL, MBT;$/;"	m	class:pcm::Resctrl
MBTCounter	width_extender.h	/^        MBTCounter(std::shared_ptr<SafeMsrHandle> msr_) : msr(msr_) { }$/;"	f	struct:pcm::CounterWidthExtender::MBTCounter
MBTCounter	width_extender.h	/^    struct MBTCounter : public AbstractRawCounter$/;"	s	class:pcm::CounterWidthExtender
MCCounter	cpucounters.h	/^    std::array<std::array<uint64, maxCounters>, maxChannels> MCCounter; \/\/ channel X counter$/;"	m	class:pcm::ServerUncoreCounterState
MCDRAMClocks	cpucounters.h	/^    std::array<uint64, maxChannels> MCDRAMClocks;$/;"	m	class:pcm::ServerUncoreCounterState
MCDRAMmemoryTrafficMetricsAvailable	cpucounters.h	/^    bool MCDRAMmemoryTrafficMetricsAvailable() const$/;"	f	class:pcm::PCM
MCFGHeader	types.h	/^struct MCFGHeader$/;"	s	namespace:pcm
MCFGRecord	types.h	/^    MCFGRecord()$/;"	f	struct:pcm::MCFGRecord
MCFGRecord	types.h	/^struct MCFGRecord$/;"	s	namespace:pcm
MCRegisterLocation	cpucounters.h	/^    std::vector<std::vector< std::pair<uint32, uint32> > > MCRegisterLocation; \/\/ MCRegisterLocation[controller]: (device, function)$/;"	m	class:pcm::ServerPCICFGUncore
MC_CH_PCI_PMON_CTL_EDGE_DET	types.h	823;"	d
MC_CH_PCI_PMON_CTL_EN	types.h	824;"	d
MC_CH_PCI_PMON_CTL_EVENT	types.h	820;"	d
MC_CH_PCI_PMON_CTL_INVERT	types.h	825;"	d
MC_CH_PCI_PMON_CTL_RST	types.h	822;"	d
MC_CH_PCI_PMON_CTL_THRESH	types.h	826;"	d
MC_CH_PCI_PMON_CTL_UMASK	types.h	821;"	d
MC_CH_PCI_PMON_FIXED_CTL_EN	types.h	817;"	d
MC_CH_PCI_PMON_FIXED_CTL_RST	types.h	816;"	d
MEMORY_MAX_IMC_CHANNELS	daemon/daemon/common.h	26;"	d
MEMORY_PARTIAL	daemon/daemon/common.h	33;"	d
MEMORY_READ	daemon/daemon/common.h	27;"	d
MEMORY_READ_RANK_A	daemon/daemon/common.h	29;"	d
MEMORY_READ_RANK_B	daemon/daemon/common.h	31;"	d
MEMORY_WRITE	daemon/daemon/common.h	28;"	d
MEMORY_WRITE_RANK_A	daemon/daemon/common.h	30;"	d
MEMORY_WRITE_RANK_B	daemon/daemon/common.h	32;"	d
MEM_LOAD_RETIRED_L2_HITM_EVTNR	types.h	91;"	d
MEM_LOAD_RETIRED_L2_HITM_UMASK	types.h	92;"	d
MEM_LOAD_RETIRED_L2_HIT_EVTNR	types.h	94;"	d
MEM_LOAD_RETIRED_L2_HIT_UMASK	types.h	95;"	d
MEM_LOAD_RETIRED_L3_MISS_EVTNR	types.h	85;"	d
MEM_LOAD_RETIRED_L3_MISS_UMASK	types.h	86;"	d
MEM_LOAD_RETIRED_L3_UNSHAREDHIT_EVTNR	types.h	88;"	d
MEM_LOAD_RETIRED_L3_UNSHAREDHIT_UMASK	types.h	89;"	d
MEM_LOAD_UOPS_LLC_HIT_RETIRED_XSNP_EVTNR	types.h	108;"	d
MEM_LOAD_UOPS_LLC_HIT_RETIRED_XSNP_HITM_EVTNR	types.h	105;"	d
MEM_LOAD_UOPS_LLC_HIT_RETIRED_XSNP_HITM_UMASK	types.h	106;"	d
MEM_LOAD_UOPS_LLC_HIT_RETIRED_XSNP_NONE_EVTNR	types.h	102;"	d
MEM_LOAD_UOPS_LLC_HIT_RETIRED_XSNP_NONE_UMASK	types.h	103;"	d
MEM_LOAD_UOPS_LLC_HIT_RETIRED_XSNP_UMASK	types.h	109;"	d
MEM_LOAD_UOPS_MISC_RETIRED_LLC_MISS_EVTNR	types.h	99;"	d
MEM_LOAD_UOPS_MISC_RETIRED_LLC_MISS_UMASK	types.h	100;"	d
MEM_LOAD_UOPS_RETIRED_L2_HIT_EVTNR	types.h	111;"	d
MEM_LOAD_UOPS_RETIRED_L2_HIT_UMASK	types.h	112;"	d
MISS	pcm-pcie.h	/^    enum eventFilter {TOTAL, MISS, HIT, fltLast};$/;"	e	enum:IPlatform::eventFilter
MMIORange	mmio.cpp	/^MMIORange::MMIORange(uint64 baseAddr_, uint64 \/* size_ *\/, bool readonly_) : startAddr(baseAddr_), readonly(readonly_)$/;"	f	class:pcm::MMIORange
MMIORange	mmio.cpp	/^MMIORange::MMIORange(uint64 physical_address, uint64 size_, bool readonly_) :$/;"	f	class:pcm::MMIORange
MMIORange	mmio.h	/^class MMIORange$/;"	c	namespace:pcm
MMIORegister32	cpucounters.h	/^    MMIORegister32(const std::shared_ptr<MMIORange> & handle_, size_t offset_) :$/;"	f	class:pcm::MMIORegister32
MMIORegister32	cpucounters.h	/^class MMIORegister32 : public HWRegister$/;"	c	namespace:pcm
MMIORegister64	cpucounters.h	/^    MMIORegister64(const std::shared_ptr<MMIORange> & handle_, size_t offset_) :$/;"	f	class:pcm::MMIORegister64
MMIORegister64	cpucounters.h	/^class MMIORegister64 : public HWRegister$/;"	c	namespace:pcm
MSR	cpucounters.h	/^    std::vector<std::shared_ptr<SafeMsrHandle> > MSR;$/;"	m	class:pcm::PCM
MSRACCESSOR_HEADER	MacMSRDriver/MSRAccessorPublic.h	16;"	d
MSRAccessDenied	cpucounters.h	/^        MSRAccessDenied = 1,$/;"	e	enum:pcm::PCM::ErrorCode
MSRAccessor	MacMSRDriver/MSRAccessor.cpp	/^MSRAccessor::MSRAccessor(){$/;"	f	class:MSRAccessor
MSRAccessor	MacMSRDriver/MSRAccessor.h	/^class MSRAccessor{$/;"	c
MSRAccessor	MacMSRDriver/MSRAccessorPublic.h	/^class MSRAccessor{$/;"	c
MSRRegister	cpucounters.h	/^    MSRRegister(const std::shared_ptr<SafeMsrHandle> & handle_, size_t offset_) :$/;"	f	class:pcm::MSRRegister
MSRRegister	cpucounters.h	/^class MSRRegister : public HWRegister$/;"	c	namespace:pcm
MSRUnload	WinMSRDriver/Win7/msrmain.c	/^DRIVER_UNLOAD MSRUnload;$/;"	v
MSRUnload	WinMSRDriver/Win7/msrmain.c	/^VOID MSRUnload(PDRIVER_OBJECT DriverObject)$/;"	f
MSR_CORE_C3_RESIDENCY	types.h	1018;"	d
MSR_CORE_C6_RESIDENCY	types.h	1019;"	d
MSR_CORE_C7_RESIDENCY	types.h	1020;"	d
MSR_DEV_TYPE	WinMSRDriver/Win7/msrstruct.h	26;"	d
MSR_DRAM_ENERGY_STATUS	types.h	1012;"	d
MSR_IA32_ARCH_CAPABILITIES	types.h	1025;"	d
MSR_IA32_BIOS_SIGN_ID	types.h	1010;"	d
MSR_IA32_SPEC_CTRL	types.h	1024;"	d
MSR_IA32_THERM_STATUS	types.h	1007;"	d
MSR_INCLUDED	WinMSRDriver/Win7/msr.h	2;"	d
MSR_KERNEL_SHARED	MacMSRDriver/MSRKernel.h	18;"	d
MSR_OFFCORE_RSP0	types.h	74;"	d
MSR_OFFCORE_RSP1	types.h	75;"	d
MSR_PACKAGE_THERM_STATUS	types.h	1006;"	d
MSR_PERF_GLOBAL_INUSE	types.h	1022;"	d
MSR_PKG_C2_RESIDENCY	types.h	1014;"	d
MSR_PKG_C3_RESIDENCY	types.h	1015;"	d
MSR_PKG_C6_RESIDENCY	types.h	1016;"	d
MSR_PKG_C7_RESIDENCY	types.h	1017;"	d
MSR_PKG_ENERGY_STATUS	types.h	493;"	d
MSR_PKG_POWER_INFO	types.h	495;"	d
MSR_RAPL_POWER_UNIT	types.h	494;"	d
MSR_Request	WinMSRDriver/Win7/msrstruct.h	/^struct MSR_Request$/;"	s
MSR_SMI_COUNT	types.h	488;"	d
MSR_STRUCT_HEADER	WinMSRDriver/Win7/msrstruct.h	19;"	d
MSR_TSX_FORCE_ABORT	types.h	1027;"	d
MSR_UNCORE_PERFEVTSEL0_ADDR	types.h	169;"	d
MSR_UNCORE_PERFEVTSEL1_ADDR	types.h	170;"	d
MSR_UNCORE_PERFEVTSEL2_ADDR	types.h	171;"	d
MSR_UNCORE_PERFEVTSEL3_ADDR	types.h	172;"	d
MSR_UNCORE_PERFEVTSEL4_ADDR	types.h	173;"	d
MSR_UNCORE_PERFEVTSEL5_ADDR	types.h	174;"	d
MSR_UNCORE_PERFEVTSEL6_ADDR	types.h	175;"	d
MSR_UNCORE_PERFEVTSEL7_ADDR	types.h	176;"	d
MSR_UNCORE_PERF_GLOBAL_CTRL_ADDR	types.h	167;"	d
MSR_UNCORE_PMC0	types.h	179;"	d
MSR_UNCORE_PMC1	types.h	180;"	d
MSR_UNCORE_PMC2	types.h	181;"	d
MSR_UNCORE_PMC3	types.h	182;"	d
MSR_UNCORE_PMC4	types.h	183;"	d
MSR_UNCORE_PMC5	types.h	184;"	d
MSR_UNCORE_PMC6	types.h	185;"	d
MSR_UNCORE_PMC7	types.h	186;"	d
MSR_UNCORE_PMON_GLOBAL_CTL	types.h	/^constexpr auto MSR_UNCORE_PMON_GLOBAL_CTL = 0x700;$/;"	m	namespace:pcm
MULTIPLIER	cpucounters.h	/^        MULTIPLIER,$/;"	e	enum:pcm::PCM::PerfmonField
MUTEX_HEADER_	mutex.h	2;"	d
MainLoop	utils.h	/^    MainLoop() {}$/;"	f	class:pcm::MainLoop
MainLoop	utils.h	/^class MainLoop$/;"	c	namespace:pcm
MeasureThread	PCM-Service_Win/PCMService.h	/^    ref class MeasureThread$/;"	c	namespace:PCMServiceNS
MemTestParam	cpucounters.h	/^    typedef std::pair<size_t, std::vector<uint64 *> > MemTestParam;$/;"	t	class:pcm::ServerPCICFGUncore
MemoryBWLocal	cpucounters.h	/^    uint64 MemoryBWLocal;$/;"	m	class:pcm::BasicCounterState
MemoryBWTotal	cpucounters.h	/^    uint64 MemoryBWTotal;$/;"	m	class:pcm::BasicCounterState
Memory_intensive_task	readmem.cpp	/^void Memory_intensive_task(DS & ds)$/;"	f
Memory_intensive_task	realtime.cpp	/^void Memory_intensive_task(DS & ds)$/;"	f
MetricCoreBaseIpc	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricCoreBaseIpc = gcnew String(L"Base ticks IPC");$/;"	m	class:PCMServiceNS::MeasureThread
MetricCoreClocktick	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricCoreClocktick = gcnew String(L"Clockticks");$/;"	m	class:PCMServiceNS::MeasureThread
MetricCoreFreqNom	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricCoreFreqNom = gcnew String(L"Nominal Frequency");$/;"	m	class:PCMServiceNS::MeasureThread
MetricCoreFreqRel	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricCoreFreqRel = gcnew String(L"Relative Frequency (%)");$/;"	m	class:PCMServiceNS::MeasureThread
MetricCoreHeadroom	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricCoreHeadroom = gcnew String(L"Thermal Headroom below TjMax");$/;"	m	class:PCMServiceNS::MeasureThread
MetricCoreIpc	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricCoreIpc = gcnew String(L"Instructions Per Clocktick (IPC)");$/;"	m	class:PCMServiceNS::MeasureThread
MetricCoreMissL2	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricCoreMissL2 = gcnew String(L"L2 Cache Misses");$/;"	m	class:PCMServiceNS::MeasureThread
MetricCoreMissL3	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricCoreMissL3 = gcnew String(L"L3 Cache Misses");$/;"	m	class:PCMServiceNS::MeasureThread
MetricCoreResC0	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricCoreResC0 = gcnew String(L"core C0-state residency (%)");$/;"	m	class:PCMServiceNS::MeasureThread
MetricCoreResC3	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricCoreResC3 = gcnew String(L"core C3-state residency (%)");$/;"	m	class:PCMServiceNS::MeasureThread
MetricCoreResC6	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricCoreResC6 = gcnew String(L"core C6-state residency (%)");$/;"	m	class:PCMServiceNS::MeasureThread
MetricCoreResC7	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricCoreResC7 = gcnew String(L"core C7-state residency (%)");$/;"	m	class:PCMServiceNS::MeasureThread
MetricCoreRetired	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricCoreRetired = gcnew String(L"Instructions Retired");$/;"	m	class:PCMServiceNS::MeasureThread
MetricQpiBand	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricQpiBand = gcnew String(L"QPI Link Bandwidth");$/;"	m	class:PCMServiceNS::MeasureThread
MetricSocketBandRead	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricSocketBandRead = gcnew String(L"Memory Read Bandwidth");$/;"	m	class:PCMServiceNS::MeasureThread
MetricSocketBandWrite	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricSocketBandWrite = gcnew String(L"Memory Write Bandwidth");$/;"	m	class:PCMServiceNS::MeasureThread
MetricSocketEnergyDram	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricSocketEnergyDram = gcnew String(L"DRAM\/Memory Consumed Energy");$/;"	m	class:PCMServiceNS::MeasureThread
MetricSocketEnergyPack	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricSocketEnergyPack = gcnew String(L"Package\/Socket Consumed Energy");$/;"	m	class:PCMServiceNS::MeasureThread
MetricSocketResC2	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricSocketResC2 = gcnew String(L"package C2-state residency (%)");$/;"	m	class:PCMServiceNS::MeasureThread
MetricSocketResC3	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricSocketResC3 = gcnew String(L"package C3-state residency (%)");$/;"	m	class:PCMServiceNS::MeasureThread
MetricSocketResC6	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricSocketResC6 = gcnew String(L"package C6-state residency (%)");$/;"	m	class:PCMServiceNS::MeasureThread
MetricSocketResC7	PCM-Service_Win/PCMService.h	/^        initonly String^ MetricSocketResC7 = gcnew String(L"package C7-state residency (%)");$/;"	m	class:PCMServiceNS::MeasureThread
MimeType	pcm-sensor-server.cpp	/^enum MimeType {$/;"	g	file:
MimeType_spare	pcm-sensor-server.cpp	/^    MimeType_spare = 255$/;"	e	enum:MimeType	file:
Mode	daemon/daemon/daemon.h	/^	enum Mode { DIFFERENCE, ABSOLUTE };$/;"	g	namespace:PCMDaemon
MsrHandle	msr.cpp	/^MsrHandle::MsrHandle(uint32 cpu) : cpu_id(cpu)$/;"	f	class:pcm::MsrHandle
MsrHandle	msr.h	/^class MsrHandle$/;"	c	namespace:pcm
MsrHandleCounter	width_extender.h	/^        MsrHandleCounter(std::shared_ptr<SafeMsrHandle> msr_, uint64 msr_addr_) : msr(msr_), msr_addr(msr_addr_) { }$/;"	f	struct:pcm::CounterWidthExtender::MsrHandleCounter
MsrHandleCounter	width_extender.h	/^    struct MsrHandleCounter : public AbstractRawCounter$/;"	s	class:pcm::CounterWidthExtender
Mutex	cpucounters.cpp	/^    HANDLE Mutex;$/;"	m	class:pcm::InstanceLock	file:
Mutex	mutex.h	/^        Mutex()$/;"	f	class:pcm::Mutex
Mutex	mutex.h	/^    class Mutex {$/;"	c	namespace:pcm
MySleep	utils.h	/^inline void MySleep(int delay)$/;"	f	namespace:pcm
MySleepMs	utils.h	/^inline void MySleepMs(int delay_ms)$/;"	f	namespace:pcm
MySystem	utils.cpp	/^void MySystem(char * sysCmd, char ** sysArgv)$/;"	f	namespace:pcm
NEHALEM	cpucounters.h	/^        NEHALEM = 30,$/;"	e	enum:pcm::PCM::SupportedCPUModels
NEHALEM_EP	cpucounters.h	/^        NEHALEM_EP = 26,$/;"	e	enum:pcm::PCM::SupportedCPUModels
NEHALEM_EX	cpucounters.h	/^        NEHALEM_EX = 46,$/;"	e	enum:pcm::PCM::SupportedCPUModels
NM_HIT	cpucounters.h	/^        NM_HIT=0,  \/\/ NM :  Near Memory (DRAM cache) in Memory Mode$/;"	e	enum:pcm::ServerPCICFGUncore::EventPosition
NOMINMAX	cpucounters.h	55;"	d
NT_DEVICE_NAME	WinMSRDriver/Win7/msrmain.c	28;"	d	file:
NUM_CORES	msrtest.cpp	21;"	d	file:
NUM_SAMPLES	pcm-pcie.h	33;"	d
N_HLE_POS	pcm-tsx.cpp	186;"	d	file:
N_RTM_POS	pcm-tsx.cpp	187;"	d	file:
NewLineOnly	pcm-sensor-server.cpp	/^        NewLineOnly = 0,$/;"	e	enum:JSONPrinter::LineEndAction	file:
No	pcm-sensor-server.cpp	/^    No = 0,$/;"	e	enum:HTTPRequestHasBody	file:
NoCache	pcm-sensor-server.cpp	/^    NoCache = 16,$/;"	e	enum:HeaderType	file:
None	cpucounters.h	/^        None,$/;"	e	enum:pcm::PCM::ChaPipelineQueue
OBJECTS	daemon/daemon/test/Makefile	/^OBJECTS=$(SOURCES:.cpp=.o)$/;"	m
OBJS	Makefile	/^OBJS = $(COMMON_OBJS) $(EXE_OBJS)$/;"	m
OBJS	daemon/client/Debug/sources.mk	/^OBJS := $/;"	m
OBJS	daemon/daemon/Debug/sources.mk	/^OBJS := $/;"	m
OBJ_SRCS	daemon/client/Debug/sources.mk	/^OBJ_SRCS := $/;"	m
OBJ_SRCS	daemon/daemon/Debug/sources.mk	/^OBJ_SRCS := $/;"	m
OEMID	types.h	/^    char OEMID[6];$/;"	m	struct:pcm::MCFGHeader
OEMRevision	types.h	/^    unsigned OEMRevision;$/;"	m	struct:pcm::MCFGHeader
OEMTableID	types.h	/^    char OEMTableID[8];$/;"	m	struct:pcm::MCFGHeader
OFFCORE_RESPONSE_0_EVTNR	types.h	157;"	d
OFFCORE_RESPONSE_0_UMASK	types.h	159;"	d
OFFCORE_RESPONSE_1_EVTNR	types.h	158;"	d
OFFCORE_RESPONSE_1_UMASK	types.h	160;"	d
OLS_DLL_DRIVER_NOT_FOUND	winring0/OlsDef.h	21;"	d
OLS_DLL_DRIVER_NOT_LOADED	winring0/OlsDef.h	20;"	d
OLS_DLL_DRIVER_NOT_LOADED_ON_NETWORK	winring0/OlsDef.h	23;"	d
OLS_DLL_DRIVER_UNLOADED	winring0/OlsDef.h	22;"	d
OLS_DLL_NO_ERROR	winring0/OlsDef.h	18;"	d
OLS_DLL_UNKNOWN_ERROR	winring0/OlsDef.h	24;"	d
OLS_DLL_UNSUPPORTED_PLATFORM	winring0/OlsDef.h	19;"	d
OLS_DRIVER_TYPE_UNKNOWN	winring0/OlsDef.h	32;"	d
OLS_DRIVER_TYPE_WIN_9X	winring0/OlsDef.h	33;"	d
OLS_DRIVER_TYPE_WIN_NT	winring0/OlsDef.h	34;"	d
OLS_DRIVER_TYPE_WIN_NT4	winring0/OlsDef.h	35;"	d
OLS_DRIVER_TYPE_WIN_NT_IA64	winring0/OlsDef.h	37;"	d
OLS_DRIVER_TYPE_WIN_NT_X64	winring0/OlsDef.h	36;"	d
OLS_ERROR_PCI_BUS_NOT_EXIST	winring0/OlsDef.h	45;"	d
OLS_ERROR_PCI_NO_DEVICE	winring0/OlsDef.h	46;"	d
OLS_ERROR_PCI_READ_CONFIG	winring0/OlsDef.h	48;"	d
OLS_ERROR_PCI_WRITE_CONFIG	winring0/OlsDef.h	47;"	d
OPCODE	cpucounters.h	/^        OPCODE,$/;"	e	enum:pcm::PCM::PerfmonField
OPENSSL_LIB	Makefile	/^OPENSSL_LIB=$/;"	m
OPTIONS	pcm-sensor-server.cpp	/^    OPTIONS,$/;"	e	enum:HTTPRequestMethod	file:
OUTPUT_CORE_METRIC	pcm-sensor.cpp	576;"	d	file:
OUTPUT_SOCKET_METRIC	pcm-sensor.cpp	603;"	d	file:
OUTPUT_SYSTEM_METRIC	pcm-sensor.cpp	647;"	d	file:
OVERFLOW_ENABLE	cpucounters.h	/^        OVERFLOW_ENABLE,$/;"	e	enum:pcm::PCM::PerfmonField
O_SRCS	daemon/client/Debug/sources.mk	/^O_SRCS := $/;"	m
O_SRCS	daemon/daemon/Debug/sources.mk	/^O_SRCS := $/;"	m
OffcoreResponseMsrValue	cpucounters.h	/^        uint64 OffcoreResponseMsrValue[2];$/;"	m	struct:pcm::PCM::ExtendedCustomCoreEventDescription
Offline	topology.h	/^    Offline = 0,$/;"	e	enum:pcm::Status
OnOff	pcm-sensor-server.cpp	/^    OnOff = 19,$/;"	e	enum:HeaderType	file:
Online	topology.h	/^    Online = 1$/;"	e	enum:pcm::Status
Opcodes	lspci.h	/^    IIOPMUCNTCTLRegister Opcodes;$/;"	m	struct:pcm::counter
Optional	pcm-sensor-server.cpp	/^    Optional = 1,$/;"	e	enum:HTTPRequestHasBody	file:
OutputFormat	pcm-sensor-server.cpp	/^enum OutputFormat {$/;"	g	file:
OutputFormat_Spare	pcm-sensor-server.cpp	/^    OutputFormat_Spare = 255$/;"	e	enum:OutputFormat	file:
PAGE_SIZE	winpmem/winpmem.h	12;"	d
PARTIAL	cpucounters.h	/^        PARTIAL=2,$/;"	e	enum:pcm::ServerPCICFGUncore::EventPosition
PATCH	pcm-sensor-server.cpp	/^    PATCH,$/;"	e	enum:HTTPRequestMethod	file:
PCICFGRegister32	cpucounters.h	/^    PCICFGRegister32(const std::shared_ptr<PciHandleType> & handle_, size_t offset_) :$/;"	f	class:pcm::PCICFGRegister32
PCICFGRegister32	cpucounters.h	/^class PCICFGRegister32 : public HWRegister$/;"	c	namespace:pcm
PCICFGRegister64	cpucounters.h	/^    PCICFGRegister64(const std::shared_ptr<PciHandleType> & handle_, size_t offset_) :$/;"	f	class:pcm::PCICFGRegister64
PCICFGRegister64	cpucounters.h	/^class PCICFGRegister64 : public HWRegister$/;"	c	namespace:pcm
PCICFG_Request	WinMSRDriver/Win7/msrstruct.h	/^struct PCICFG_Request$/;"	s
PCIDB	lspci.h	/^typedef std::pair< std::map<int, std::string> ,std::map< int, std::map<int, std::string> > > PCIDB;$/;"	t	namespace:pcm
PCIDriver_connect	MacMSRDriver/PCIDriverInterface.cpp	/^io_connect_t PCIDriver_connect = 0;$/;"	v
PCIDriver_mapMemory	MacMSRDriver/PCIDriverInterface.cpp	/^uint32_t PCIDriver_mapMemory(uint32_t address, uint8_t** virtual_address)$/;"	f
PCIDriver_mmap	MacMSRDriver/PCIDriverInterface.cpp	/^std::map<uint8_t*,void*> PCIDriver_mmap;$/;"	v
PCIDriver_read32	MacMSRDriver/PCIDriverInterface.cpp	/^uint32_t PCIDriver_read32(uint32_t addr, uint32_t* val)$/;"	f
PCIDriver_read64	MacMSRDriver/PCIDriverInterface.cpp	/^uint32_t PCIDriver_read64(uint32_t addr, uint64_t* val)$/;"	f
PCIDriver_readMemory32	MacMSRDriver/PCIDriverInterface.cpp	/^uint32_t PCIDriver_readMemory32(uint8_t* address, uint32_t* val)$/;"	f
PCIDriver_readMemory64	MacMSRDriver/PCIDriverInterface.cpp	/^uint32_t PCIDriver_readMemory64(uint8_t* address, uint64_t* val)$/;"	f
PCIDriver_setupDriver	MacMSRDriver/PCIDriverInterface.cpp	/^int PCIDriver_setupDriver()$/;"	f
PCIDriver_unmapMemory	MacMSRDriver/PCIDriverInterface.cpp	/^uint32_t PCIDriver_unmapMemory(uint8_t* virtual_address)$/;"	f
PCIDriver_write32	MacMSRDriver/PCIDriverInterface.cpp	/^uint32_t PCIDriver_write32(uint32_t addr, uint32_t val)$/;"	f
PCIDriver_write64	MacMSRDriver/PCIDriverInterface.cpp	/^uint32_t PCIDriver_write64(uint32_t addr, uint64_t val)$/;"	f
PCIRdCur	pcm-pcie.h	/^        PCIRdCur,$/;"	e	enum:GrantleyPlatform::eventIdx
PCIRdCur	pcm-pcie.h	/^        PCIRdCur,$/;"	e	enum:PurleyPlatform::eventIdx
PCIRdCur_hit	pcm-pcie.h	/^            PCIRdCur_hit,$/;"	e	enum:PurleyPlatform::Events
PCIRdCur_miss	pcm-pcie.h	/^            PCIRdCur_miss,$/;"	e	enum:GrantleyPlatform::Events
PCIRdCur_miss	pcm-pcie.h	/^            PCIRdCur_miss,$/;"	e	enum:PurleyPlatform::Events
PCIRdCur_total	pcm-pcie.h	/^            PCIRdCur_total,$/;"	e	enum:GrantleyPlatform::Events
PCISegmentGroupNumber	types.h	/^    unsigned short PCISegmentGroupNumber;$/;"	m	struct:pcm::MCFGRecord
PCI_ENABLE	MacMSRDriver/PCIDriverInterface.h	23;"	d
PCI_IDS_NOT_FOUND	lspci.h	10;"	d
PCI_IDS_NOT_FOUND	lspci.h	14;"	d
PCI_IDS_NOT_FOUND	lspci.h	20;"	d
PCI_IDS_PATH	lspci.h	13;"	d
PCI_IDS_PATH	lspci.h	19;"	d
PCI_IDS_PATH	lspci.h	9;"	d
PCIeCounterState	cpucounters.h	/^typedef SimpleCounterState PCIeCounterState;$/;"	t	namespace:pcm
PCIeEventCode	cpucounters.h	/^    enum PCIeEventCode$/;"	g	class:pcm::PCM
PCIeItoM	cpucounters.h	/^        PCIeItoM = 0x19C,  \/\/ PCIe Write (allocating) (full cache line)$/;"	e	enum:pcm::PCM::PCIeEventCode
PCIeItoM	pcm-pcie.h	/^        PCIeItoM,$/;"	e	enum:BromolowPlatform::eventIdx
PCIeItoM_miss	pcm-pcie.h	/^            PCIeItoM_miss,$/;"	e	enum:BromolowPlatform::Events
PCIeItoM_total	pcm-pcie.h	/^            PCIeItoM_total,$/;"	e	enum:BromolowPlatform::Events
PCIeNSRd	cpucounters.h	/^        PCIeNSRd = 0x1E4,  \/\/ PCIe non-snoop read (full cache line)$/;"	e	enum:pcm::PCM::PCIeEventCode
PCIeNSRd	pcm-pcie.h	/^        PCIeNSRd,$/;"	e	enum:BromolowPlatform::eventIdx
PCIeNSRd_miss	pcm-pcie.h	/^            PCIeNSRd_miss,$/;"	e	enum:BromolowPlatform::Events
PCIeNSRd_total	pcm-pcie.h	/^            PCIeNSRd_total,$/;"	e	enum:BromolowPlatform::Events
PCIeNSWr	cpucounters.h	/^        PCIeNSWr = 0x1E5,  \/\/ PCIe Non-snoop write (partial cache line)$/;"	e	enum:pcm::PCM::PCIeEventCode
PCIeNSWr	pcm-pcie.h	/^        PCIeNSWr,$/;"	e	enum:BromolowPlatform::eventIdx
PCIeNSWrF	cpucounters.h	/^        PCIeNSWrF = 0x1E6, \/\/ PCIe Non-snoop write (full cache line)$/;"	e	enum:pcm::PCM::PCIeEventCode
PCIeNSWrF	pcm-pcie.h	/^        PCIeNSWrF,$/;"	e	enum:BromolowPlatform::eventIdx
PCIeNSWrF_miss	pcm-pcie.h	/^            PCIeNSWrF_miss,$/;"	e	enum:BromolowPlatform::Events
PCIeNSWrF_total	pcm-pcie.h	/^            PCIeNSWrF_total,$/;"	e	enum:BromolowPlatform::Events
PCIeNSWr_miss	pcm-pcie.h	/^            PCIeNSWr_miss,$/;"	e	enum:BromolowPlatform::Events
PCIeNSWr_total	pcm-pcie.h	/^            PCIeNSWr_total,$/;"	e	enum:BromolowPlatform::Events
PCIeRdCur	cpucounters.h	/^        PCIeRdCur = 0x19E, \/\/ PCIe read current (full cache line)$/;"	e	enum:pcm::PCM::PCIeEventCode
PCIeRdCur	pcm-pcie.h	/^        PCIeRdCur,$/;"	e	enum:BromolowPlatform::eventIdx
PCIeRdCur_miss	pcm-pcie.h	/^            PCIeRdCur_miss,$/;"	e	enum:BromolowPlatform::Events
PCIeRdCur_total	pcm-pcie.h	/^            PCIeRdCur_total,$/;"	e	enum:BromolowPlatform::Events
PCIeWiLF	cpucounters.h	/^        PCIeWiLF = 0x194,  \/\/ PCIe Write (non-allocating) (full cache line)$/;"	e	enum:pcm::PCM::PCIeEventCode
PCIeWiLF	pcm-pcie.h	/^        PCIeWiLF,$/;"	e	enum:BromolowPlatform::eventIdx
PCIeWiLF_miss	pcm-pcie.h	/^            PCIeWiLF_miss,$/;"	e	enum:BromolowPlatform::Events
PCIeWiLF_total	pcm-pcie.h	/^            PCIeWiLF_total,$/;"	e	enum:BromolowPlatform::Events
PCIeWidthMode	cpucounters.h	/^    enum PCIeWidthMode {$/;"	g	class:pcm::PCM
PCM	c_example.c	/^} PCM;$/;"	v	typeref:struct:__anon8
PCM	cpucounters.cpp	/^PCM::PCM() :$/;"	f	class:pcm::PCM
PCM	cpucounters.h	/^class PCM_API PCM$/;"	c	namespace:pcm
PCMCore	daemon/daemon/common.h	/^		PCMCore() :$/;"	f	struct:PCMDaemon::PCMCore
PCMCore	daemon/daemon/common.h	/^	struct PCMCore {$/;"	s	namespace:PCMDaemon
PCMCore	daemon/daemon/common.h	/^	typedef struct PCMCore PCMCore;$/;"	t	namespace:PCMDaemon	typeref:struct:PCMDaemon::PCMCore
PCMCoreCounter	daemon/daemon/common.h	/^		PCMCoreCounter() :$/;"	f	struct:PCMDaemon::PCMCoreCounter
PCMCoreCounter	daemon/daemon/common.h	/^	struct PCMCoreCounter {$/;"	s	namespace:PCMDaemon
PCMCoreCounter	daemon/daemon/common.h	/^	typedef struct PCMCoreCounter PCMCoreCounter;$/;"	t	namespace:PCMDaemon	typeref:struct:PCMDaemon::PCMCoreCounter
PCMDaemon	daemon/client/client.cpp	/^namespace PCMDaemon {$/;"	n	file:
PCMDaemon	daemon/client/client.h	/^namespace PCMDaemon {$/;"	n
PCMDaemon	daemon/daemon/common.h	/^namespace PCMDaemon {$/;"	n
PCMDaemon	daemon/daemon/daemon.cpp	/^namespace PCMDaemon {$/;"	n	file:
PCMDaemon	daemon/daemon/daemon.h	/^namespace PCMDaemon {$/;"	n
PCMDashboardType	dashboard.h	/^enum PCMDashboardType { InfluxDB, Prometheus };$/;"	g	namespace:pcm
PCMMemory	daemon/daemon/common.h	/^		PCMMemory() :$/;"	f	struct:PCMDaemon::PCMMemory
PCMMemory	daemon/daemon/common.h	/^	struct PCMMemory {$/;"	s	namespace:PCMDaemon
PCMMemory	daemon/daemon/common.h	/^	typedef struct PCMMemory PCMMemory;$/;"	t	namespace:PCMDaemon	typeref:struct:PCMDaemon::PCMMemory
PCMMemoryChannelCounter	daemon/daemon/common.h	/^		PCMMemoryChannelCounter() :$/;"	f	struct:PCMDaemon::PCMMemoryChannelCounter
PCMMemoryChannelCounter	daemon/daemon/common.h	/^	struct PCMMemoryChannelCounter {$/;"	s	namespace:PCMDaemon
PCMMemoryChannelCounter	daemon/daemon/common.h	/^	typedef struct PCMMemoryChannelCounter PCMMemoryChannelCounter;$/;"	t	namespace:PCMDaemon	typeref:struct:PCMDaemon::PCMMemoryChannelCounter
PCMMemorySocketCounter	daemon/daemon/common.h	/^		PCMMemorySocketCounter() :$/;"	f	struct:PCMDaemon::PCMMemorySocketCounter
PCMMemorySocketCounter	daemon/daemon/common.h	/^	struct PCMMemorySocketCounter {$/;"	s	namespace:PCMDaemon
PCMMemorySocketCounter	daemon/daemon/common.h	/^	typedef struct PCMMemorySocketCounter PCMMemorySocketCounter;$/;"	t	namespace:PCMDaemon	typeref:struct:PCMDaemon::PCMMemorySocketCounter
PCMMemorySystemCounter	daemon/daemon/common.h	/^		PCMMemorySystemCounter() :$/;"	f	struct:PCMDaemon::PCMMemorySystemCounter
PCMMemorySystemCounter	daemon/daemon/common.h	/^	struct PCMMemorySystemCounter {$/;"	s	namespace:PCMDaemon
PCMMemorySystemCounter	daemon/daemon/common.h	/^	typedef struct PCMMemorySystemCounter PCMMemorySystemCounter;$/;"	t	namespace:PCMDaemon	typeref:struct:PCMDaemon::PCMMemorySystemCounter
PCMPath	resctrl.h	/^        static constexpr auto PCMPath = "\/sys\/fs\/resctrl\/mon_groups\/pcm";$/;"	m	class:pcm::Resctrl
PCMPmem	mmio.cpp	/^class PCMPmem : public WinPmem {$/;"	c	namespace:pcm	file:
PCMQPI	daemon/daemon/common.h	/^		PCMQPI() :$/;"	f	struct:PCMDaemon::PCMQPI
PCMQPI	daemon/daemon/common.h	/^	struct PCMQPI {$/;"	s	namespace:PCMDaemon
PCMQPI	daemon/daemon/common.h	/^	typedef struct PCMQPI PCMQPI;$/;"	t	namespace:PCMDaemon	typeref:struct:PCMDaemon::PCMQPI
PCMQPILinkCounter	daemon/daemon/common.h	/^		PCMQPILinkCounter() :$/;"	f	struct:PCMDaemon::PCMQPILinkCounter
PCMQPILinkCounter	daemon/daemon/common.h	/^	struct PCMQPILinkCounter {$/;"	s	namespace:PCMDaemon
PCMQPILinkCounter	daemon/daemon/common.h	/^	typedef struct PCMQPILinkCounter PCMQPILinkCounter;$/;"	t	namespace:PCMDaemon	typeref:struct:PCMDaemon::PCMQPILinkCounter
PCMQPISocketCounter	daemon/daemon/common.h	/^		PCMQPISocketCounter() :$/;"	f	struct:PCMDaemon::PCMQPISocketCounter
PCMQPISocketCounter	daemon/daemon/common.h	/^	struct PCMQPISocketCounter {$/;"	s	namespace:PCMDaemon
PCMQPISocketCounter	daemon/daemon/common.h	/^	typedef struct PCMQPISocketCounter PCMQPISocketCounter;$/;"	t	namespace:PCMDaemon	typeref:struct:PCMDaemon::PCMQPISocketCounter
PCMService	PCM-Service_Win/PCMService.h	/^        PCMService()$/;"	f	class:PCMServiceNS::PCMService
PCMService	PCM-Service_Win/PCMService.h	/^    public ref class PCMService : public System::ServiceProcess::ServiceBase$/;"	c	namespace:PCMServiceNS
PCMServiceNS	PCM-Service_Win/PCMService.h	/^namespace PCMServiceNS {$/;"	n
PCMSystem	daemon/daemon/common.h	/^		PCMSystem() :$/;"	f	struct:PCMDaemon::PCMSystem
PCMSystem	daemon/daemon/common.h	/^	struct PCMSystem {$/;"	s	namespace:PCMDaemon
PCMSystem	daemon/daemon/common.h	/^	typedef struct PCMSystem PCMSystem;$/;"	t	namespace:PCMDaemon	typeref:struct:PCMDaemon::PCMSystem
PCMWebServerVersion	pcm-sensor-server.cpp	60;"	d	file:
PCM_API	PCM-Lib_Win/pcm-lib.h	25;"	d
PCM_API	PCM-Lib_Win/pcm-lib.h	27;"	d
PCM_API	cpucounters.h	28;"	d
PCM_API	winpmem/winpmem.cpp	41;"	d	file:
PCM_API	winpmem/winpmem.cpp	43;"	d	file:
PCM_CALIBRATION_INTERVAL	utils.cpp	544;"	d	file:
PCM_CLIENT_IMC_BAR_OFFSET	client_bw.cpp	23;"	d	file:
PCM_CLIENT_IMC_DRAM_DATA_READS	client_bw.cpp	25;"	d	file:
PCM_CLIENT_IMC_DRAM_DATA_WRITES	client_bw.cpp	26;"	d	file:
PCM_CLIENT_IMC_DRAM_IO_REQESTS	client_bw.cpp	24;"	d	file:
PCM_CLIENT_IMC_EVENT_BASE	client_bw.cpp	28;"	d	file:
PCM_CLIENT_IMC_MMAP_SIZE	client_bw.cpp	27;"	d	file:
PCM_COMPILE_ASSERT	utils.h	133;"	d
PCM_CPUID_INFO	cpucounters.cpp	/^union PCM_CPUID_INFO$/;"	u	namespace:pcm	file:
PCM_CSTATE_ARRAY	cpucounters.cpp	807;"	d	file:
PCM_DEBUG	types.h	24;"	d
PCM_DEBUG_TOPOLOGY	cpucounters.cpp	95;"	d	file:
PCM_DELAY_DEFAULT	pcm-core.cpp	44;"	d	file:
PCM_DELAY_DEFAULT	pcm-iio.cpp	39;"	d	file:
PCM_DELAY_DEFAULT	pcm-latency.cpp	53;"	d	file:
PCM_DELAY_DEFAULT	pcm-memory.cpp	40;"	d	file:
PCM_DELAY_DEFAULT	pcm-numa.cpp	42;"	d	file:
PCM_DELAY_DEFAULT	pcm-pcie.cpp	37;"	d	file:
PCM_DELAY_DEFAULT	pcm-power.cpp	34;"	d	file:
PCM_DELAY_DEFAULT	pcm-raw.cpp	42;"	d	file:
PCM_DELAY_DEFAULT	pcm-tsx.cpp	42;"	d	file:
PCM_DELAY_DEFAULT	pcm.cpp	43;"	d	file:
PCM_DELAY_MIN	pcm-core.cpp	45;"	d	file:
PCM_DELAY_MIN	pcm-memory.cpp	41;"	d	file:
PCM_DELAY_MIN	pcm-numa.cpp	43;"	d	file:
PCM_DELAY_MIN	pcm-pcie.cpp	38;"	d	file:
PCM_DELAY_MIN	pcm-power.cpp	35;"	d	file:
PCM_DELAY_MIN	pcm-raw.cpp	43;"	d	file:
PCM_DELAY_MIN	pcm-tsx.cpp	43;"	d	file:
PCM_DELAY_MIN	pcm.cpp	44;"	d	file:
PCM_GENERATE_METRIC_AVAILABLE_FUNCTION	cpucounters.h	1976;"	d
PCM_GEN_METRIC_AVAILABLE_FUNCTION	cpucounters.h	1987;"	d
PCM_HA_REQUESTS_READS_ONLY	cpucounters.h	31;"	d
PCM_H_	daemon/daemon/pcm.h	16;"	d
PCM_INSTANCE_LOCK_SEMAPHORE_NAME	cpucounters.cpp	102;"	d	file:
PCM_INSTANCE_LOCK_SEMAPHORE_NAME	cpucounters.cpp	99;"	d	file:
PCM_INTEL_PCI_VENDOR_ID	types.h	497;"	d
PCM_INVALID_DEV_ADDR	types.h	737;"	d
PCM_INVALID_FUNC_ADDR	types.h	738;"	d
PCM_INVALID_QOS_MONITORING_DATA	types.h	302;"	d
PCM_INVALID_THERMAL_HEADROOM	types.h	1008;"	d
PCM_MEM_CAPACITY	cpucounters.cpp	6354;"	d	file:
PCM_NMI_WATCHDOG_PATH	cpucounters.cpp	1829;"	d	file:
PCM_NUM_INSTANCES_SEMAPHORE_NAME	cpucounters.cpp	100;"	d	file:
PCM_NUM_INSTANCES_SEMAPHORE_NAME	cpucounters.cpp	103;"	d	file:
PCM_PARAM_PROTECT	cpucounters.cpp	806;"	d	file:
PCM_PCICFG_EDC_INIT	cpucounters.cpp	5052;"	d	file:
PCM_PCICFG_EDC_INIT	cpucounters.cpp	5170;"	d	file:
PCM_PCICFG_HA_INIT	cpucounters.cpp	5060;"	d	file:
PCM_PCICFG_HA_INIT	cpucounters.cpp	5172;"	d	file:
PCM_PCICFG_M2M_INIT	cpucounters.cpp	5056;"	d	file:
PCM_PCICFG_M2M_INIT	cpucounters.cpp	5171;"	d	file:
PCM_PCICFG_M3UPI_INIT	cpucounters.cpp	5048;"	d	file:
PCM_PCICFG_M3UPI_INIT	cpucounters.cpp	5169;"	d	file:
PCM_PCICFG_MC_INIT	cpucounters.cpp	5038;"	d	file:
PCM_PCICFG_MC_INIT	cpucounters.cpp	5167;"	d	file:
PCM_PCICFG_QPI_INIT	cpucounters.cpp	5044;"	d	file:
PCM_PCICFG_QPI_INIT	cpucounters.cpp	5168;"	d	file:
PCM_PCI_VENDOR_ID_OFFSET	types.h	498;"	d
PCM_PERF_COUNT_HW_REF_CPU_CYCLES	cpucounters.h	51;"	d
PCM_SKL_PATH_CASES	cpucounters.h	1269;"	d
PCM_UNCORE_PMON_BOX_CHECK_STATUS	cpucounters.h	247;"	d
PCM_UNUSED	utils.h	131;"	d
PCM_VERSION	cpucounters.h	25;"	d
PCM_init_perf_event_attr	cpucounters.cpp	/^perf_event_attr PCM_init_perf_event_attr(bool group = true)$/;"	f	namespace:pcm
PCUCounter	cpucounters.h	/^    std::array<uint64, maxCounters> PCUCounter;$/;"	m	class:pcm::ServerUncoreCounterState
PCU_MSR_PMON_BOX_FILTER_BAND_0	types.h	837;"	d
PCU_MSR_PMON_BOX_FILTER_BAND_1	types.h	838;"	d
PCU_MSR_PMON_BOX_FILTER_BAND_2	types.h	839;"	d
PCU_MSR_PMON_BOX_FILTER_BAND_3	types.h	840;"	d
PCU_MSR_PMON_CTL_EDGE_DET	types.h	845;"	d
PCU_MSR_PMON_CTL_EN	types.h	847;"	d
PCU_MSR_PMON_CTL_EVENT	types.h	842;"	d
PCU_MSR_PMON_CTL_EXTRA_SEL	types.h	846;"	d
PCU_MSR_PMON_CTL_INVERT	types.h	848;"	d
PCU_MSR_PMON_CTL_OCC_EDGE_DET	types.h	851;"	d
PCU_MSR_PMON_CTL_OCC_INVERT	types.h	850;"	d
PCU_MSR_PMON_CTL_OCC_SEL	types.h	843;"	d
PCU_MSR_PMON_CTL_RST	types.h	844;"	d
PCU_MSR_PMON_CTL_THRESH	types.h	849;"	d
PERF_CPU_CLK_UNHALTED_REF_POS	cpucounters.h	/^        PERF_CPU_CLK_UNHALTED_REF_POS = 2,$/;"	e	enum:pcm::PCM::__anon4
PERF_CPU_CLK_UNHALTED_THREAD_POS	cpucounters.h	/^        PERF_CPU_CLK_UNHALTED_THREAD_POS = 1,$/;"	e	enum:pcm::PCM::__anon4
PERF_GEN_EVENT_0_POS	cpucounters.h	/^        PERF_GEN_EVENT_0_POS = 3,$/;"	e	enum:pcm::PCM::__anon4
PERF_GEN_EVENT_1_POS	cpucounters.h	/^        PERF_GEN_EVENT_1_POS = 4,$/;"	e	enum:pcm::PCM::__anon4
PERF_GEN_EVENT_2_POS	cpucounters.h	/^        PERF_GEN_EVENT_2_POS = 5,$/;"	e	enum:pcm::PCM::__anon4
PERF_GEN_EVENT_3_POS	cpucounters.h	/^        PERF_GEN_EVENT_3_POS = 6$/;"	e	enum:pcm::PCM::__anon4
PERF_GROUP_LEADER_COUNTER	cpucounters.h	/^        PERF_GROUP_LEADER_COUNTER = PERF_INST_RETIRED_ANY_POS$/;"	e	enum:pcm::PCM::__anon5
PERF_INST_RETIRED_ANY_POS	cpucounters.h	/^        PERF_INST_RETIRED_ANY_POS = 0,$/;"	e	enum:pcm::PCM::__anon4
PERF_MAX_COUNTERS	types.h	65;"	d
PERF_MAX_CUSTOM_COUNTERS	types.h	64;"	d
PERF_MAX_FIXED_COUNTERS	types.h	63;"	d
PLATFORM_INFO_ADDR	types.h	78;"	d
PMEM_CTRL_IOCTRL	winpmem/winpmem.h	93;"	d
PMEM_DEVICE_NAME	winpmem/winpmem.h	9;"	d
PMEM_INFO_IOCTRL	winpmem/winpmem.h	95;"	d
PMEM_MODE_IOSPACE	winpmem/winpmem.h	98;"	d
PMEM_MODE_PHYSICAL	winpmem/winpmem.h	99;"	d
PMEM_SERVICE_NAME	winpmem/winpmem.h	10;"	d
PMEM_WRITE_ENABLE	winpmem/winpmem.h	94;"	d
PMM	pcm-latency.cpp	40;"	d	file:
PMM	pcm-memory.cpp	/^    bool PMM, PMMMixedMode;$/;"	m	struct:memdata	file:
PMMMixedMode	pcm-memory.cpp	/^    bool PMM, PMMMixedMode;$/;"	m	struct:memdata	file:
PMMTrafficMetricsAvailable	cpucounters.h	/^    bool PMMTrafficMetricsAvailable() const$/;"	f	class:pcm::PCM
PMM_MM_MISS_CLEAN	cpucounters.h	/^        PMM_MM_MISS_CLEAN=2,$/;"	e	enum:pcm::ServerPCICFGUncore::EventPosition
PMM_MM_MISS_DIRTY	cpucounters.h	/^        PMM_MM_MISS_DIRTY=3,$/;"	e	enum:pcm::ServerPCICFGUncore::EventPosition
PMM_MM_Ratio	pcm-memory.cpp	/^float PMM_MM_Ratio(const memdata_t *md, const uint32 skt)$/;"	f
PMM_READ	cpucounters.h	/^        PMM_READ=2,$/;"	e	enum:pcm::ServerPCICFGUncore::EventPosition
PMM_WRITE	cpucounters.h	/^        PMM_WRITE=3,$/;"	e	enum:pcm::ServerPCICFGUncore::EventPosition
PMUBusy	cpucounters.h	/^        PMUBusy = 2,$/;"	e	enum:pcm::PCM::ErrorCode
PMUService	PCM-Service_Win/PCMInstaller.h	/^namespace PMUService {$/;"	n
PMUinUse	cpucounters.cpp	/^bool PCM::PMUinUse()$/;"	f	class:pcm::PCM
POST	pcm-sensor-server.cpp	/^    POST,$/;"	e	enum:HTTPRequestMethod	file:
PRINT_DEBUG	MacMSRDriver/PcmMsr/PcmMsr.h	58;"	d
PRQ	cpucounters.h	/^        PRQ,$/;"	e	enum:pcm::PCM::ChaPipelineQueue
PRd	cpucounters.h	/^        PRd = 0x187,       \/\/ Partial Reads (UC) (MMIO Read)$/;"	e	enum:pcm::PCM::PCIeEventCode
PRd	pcm-pcie.h	/^        PRd,$/;"	e	enum:GrantleyPlatform::eventIdx
PRd	pcm-pcie.h	/^        PRd,$/;"	e	enum:PurleyPlatform::eventIdx
PRd_hit	pcm-pcie.h	/^            PRd_hit,$/;"	e	enum:PurleyPlatform::Events
PRd_miss	pcm-pcie.h	/^            PRd_miss,$/;"	e	enum:GrantleyPlatform::Events
PRd_miss	pcm-pcie.h	/^            PRd_miss,$/;"	e	enum:PurleyPlatform::Events
PRd_total	pcm-pcie.h	/^            PRd_total,$/;"	e	enum:GrantleyPlatform::Events
PUT	pcm-sensor-server.cpp	/^    PUT,$/;"	e	enum:HTTPRequestMethod	file:
PackageC2StateResidencyHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable PackageC2StateResidencyHash_;$/;"	m	class:PCMServiceNS::MeasureThread
PackageC3StateResidencyHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable PackageC3StateResidencyHash_;$/;"	m	class:PCMServiceNS::MeasureThread
PackageC6StateResidencyHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable PackageC6StateResidencyHash_;$/;"	m	class:PCMServiceNS::MeasureThread
PackageC7StateResidencyHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable PackageC7StateResidencyHash_;$/;"	m	class:PCMServiceNS::MeasureThread
PackageEnergyStatus	cpucounters.h	/^    uint64 PackageEnergyStatus;$/;"	m	class:pcm::UncoreCounterState
PackageThermalHeadroom	cpucounters.h	/^    int32 PackageThermalHeadroom;$/;"	m	class:pcm::ServerUncoreCounterState
Panel	dashboard.cpp	/^    Panel(int x_, int y_, int w_, int h_, const std::string & title_) : x(x_), y(y_), w(w_), h(h_), title(title_) {}$/;"	f	namespace:pcm
Parameters	pcm-sensor-server.cpp	/^    Parameters = 11,$/;"	e	enum:HeaderType	file:
PciBusDevFunc	winring0/OlsDef.h	57;"	d
PciGetBus	winring0/OlsDef.h	59;"	d
PciGetDev	winring0/OlsDef.h	61;"	d
PciGetFunc	winring0/OlsDef.h	63;"	d
PciHandle	pci.cpp	/^PciHandle::PciHandle(uint32 groupnr_, uint32 bus_, uint32 device_, uint32 function_) :$/;"	f	class:pcm::PciHandle
PciHandle	pci.h	/^class PciHandle$/;"	c	namespace:pcm
PciHandleM	pci.h	/^class PciHandleM$/;"	c	namespace:pcm
PciHandleMM	pci.h	/^class PciHandleMM$/;"	c	namespace:pcm
PciHandleType	pci.h	/^typedef PciHandle PciHandleType;$/;"	t	namespace:pcm
PciHandleType	pci.h	159;"	d
PciHandleType	pci.h	161;"	d
PcmMsrClientClassName	MacMSRDriver/PcmMsr/PcmMsrClient.h	/^class PcmMsrClientClassName : public IOUserClient$/;"	c
PcmMsrClientClassName	MacMSRDriver/PcmMsr/PcmMsrClient.h	19;"	d
PcmMsrDriverClassName	MacMSRDriver/MSRKernel.h	15;"	d
PcmMsrDriverClassName	MacMSRDriver/PcmMsr/PcmMsr.h	/^class PcmMsrDriverClassName : public IOService$/;"	c
PcmMsrDriverClassName	MacMSRDriver/PcmMsr/UserKernelShared.h	15;"	d
PerfVirtualControlRegister	cpucounters.cpp	/^    PerfVirtualControlRegister(int socket_, int pmuID_, bool fixed_ = false) :$/;"	f	class:pcm::PerfVirtualControlRegister
PerfVirtualControlRegister	cpucounters.cpp	/^class PerfVirtualControlRegister : public HWRegister$/;"	c	namespace:pcm	file:
PerfVirtualCounterRegister	cpucounters.cpp	/^    PerfVirtualCounterRegister(const std::shared_ptr<PerfVirtualControlRegister> & controlReg_) : controlReg(controlReg_)$/;"	f	class:pcm::PerfVirtualCounterRegister
PerfVirtualCounterRegister	cpucounters.cpp	/^class PerfVirtualCounterRegister : public HWRegister$/;"	c	namespace:pcm	file:
PerfVirtualDummyUnitControlRegister	cpucounters.cpp	/^    PerfVirtualDummyUnitControlRegister() : lastValue(0) {}$/;"	f	class:pcm::PerfVirtualDummyUnitControlRegister
PerfVirtualDummyUnitControlRegister	cpucounters.cpp	/^class PerfVirtualDummyUnitControlRegister : public HWRegister$/;"	c	namespace:pcm	file:
PerfVirtualFilterRegister	cpucounters.cpp	/^    PerfVirtualFilterRegister(std::array<std::shared_ptr<PerfVirtualControlRegister>, 4> & controlRegs_, int filterNr_) :$/;"	f	class:pcm::PerfVirtualFilterRegister
PerfVirtualFilterRegister	cpucounters.cpp	/^class PerfVirtualFilterRegister : public HWRegister$/;"	c	namespace:pcm	file:
PerfmonField	cpucounters.h	/^    enum PerfmonField {$/;"	g	class:pcm::PCM
PeriodicCounterFetcher	pcm-sensor-server.cpp	/^    PeriodicCounterFetcher( HTTPServer* hs ) : hs_(hs), run_(false), exit_(false) {}$/;"	f	class:PeriodicCounterFetcher
PeriodicCounterFetcher	pcm-sensor-server.cpp	/^class PeriodicCounterFetcher : public Work$/;"	c	file:
PlainText	pcm-sensor-server.cpp	/^    PlainText,$/;"	e	enum:OutputFormat	file:
PreviousGroupAffinity	utils.h	/^    GROUP_AFFINITY PreviousGroupAffinity;$/;"	m	class:pcm::ThreadGroupTempAffinity
ProgramMode	cpucounters.h	/^    enum ProgramMode {$/;"	g	class:pcm::PCM
ProjectInstaller	PCM-Service_Win/PCMInstaller.h	/^		ProjectInstaller(void)$/;"	f	class:PMUService::ProjectInstaller
ProjectInstaller	PCM-Service_Win/PCMInstaller.h	/^	public ref class ProjectInstaller : public System::Configuration::Install::Installer$/;"	c	namespace:PMUService
Prometheus	dashboard.h	/^enum PCMDashboardType { InfluxDB, Prometheus };$/;"	e	enum:pcm::PCMDashboardType
PrometheusPrinter	pcm-sensor-server.cpp	/^    PrometheusPrinter( std::pair<std::shared_ptr<Aggregator>,std::shared_ptr<Aggregator>> aggregatorPair ) : aggPair_( aggregatorPair ) {$/;"	f	class:PrometheusPrinter
PrometheusPrinter	pcm-sensor-server.cpp	/^class PrometheusPrinter : Visitor$/;"	c	file:
Prometheus_0_0_4	pcm-sensor-server.cpp	/^    Prometheus_0_0_4 = 1,$/;"	e	enum:OutputFormat	file:
ProtoHostPort	pcm-sensor-server.cpp	/^    ProtoHostPort = 14,$/;"	e	enum:HeaderType	file:
PurleyPlatform	pcm-pcie.h	/^    PurleyPlatform(PCM *m, bool csv, bool bandwidth, bool verbose, uint32 delay) :$/;"	f	class:PurleyPlatform
PurleyPlatform	pcm-pcie.h	/^class PurleyPlatform: public LegacyPlatform$/;"	c
QOSMetricAvailable	cpucounters.cpp	/^bool PCM::QOSMetricAvailable() const$/;"	f	class:pcm::PCM
QPI_MAX_LINKS	daemon/daemon/common.h	34;"	d
QPI_PORT0_MISC_REGISTER_FUNC_ADDR	types.h	682;"	d
QPI_PORT1_MISC_REGISTER_FUNC_ADDR	types.h	683;"	d
QPI_PORT2_MISC_REGISTER_FUNC_ADDR	types.h	684;"	d
QPI_RATE_STATUS_ADDR	types.h	752;"	d
Q_P_PCI_PMON_BOX_CTL_ADDR	types.h	740;"	d
Q_P_PCI_PMON_CTL0_ADDR	types.h	745;"	d
Q_P_PCI_PMON_CTL1_ADDR	types.h	744;"	d
Q_P_PCI_PMON_CTL2_ADDR	types.h	743;"	d
Q_P_PCI_PMON_CTL3_ADDR	types.h	742;"	d
Q_P_PCI_PMON_CTL_EDGE_DET	types.h	831;"	d
Q_P_PCI_PMON_CTL_EN	types.h	833;"	d
Q_P_PCI_PMON_CTL_EVENT	types.h	828;"	d
Q_P_PCI_PMON_CTL_EVENT_EXT	types.h	832;"	d
Q_P_PCI_PMON_CTL_INVERT	types.h	834;"	d
Q_P_PCI_PMON_CTL_RST	types.h	830;"	d
Q_P_PCI_PMON_CTL_THRESH	types.h	835;"	d
Q_P_PCI_PMON_CTL_UMASK	types.h	829;"	d
Q_P_PCI_PMON_CTR0_ADDR	types.h	750;"	d
Q_P_PCI_PMON_CTR1_ADDR	types.h	749;"	d
Q_P_PCI_PMON_CTR2_ADDR	types.h	748;"	d
Q_P_PCI_PMON_CTR3_ADDR	types.h	747;"	d
RC_100_Continue	pcm-sensor-server.cpp	/^    RC_100_Continue = 100,$/;"	e	enum:HTTPResponseCode	file:
RC_101_SwitchingProtocols	pcm-sensor-server.cpp	/^    RC_101_SwitchingProtocols,$/;"	e	enum:HTTPResponseCode	file:
RC_102_Processing	pcm-sensor-server.cpp	/^    RC_102_Processing,$/;"	e	enum:HTTPResponseCode	file:
RC_200_OK	pcm-sensor-server.cpp	/^    RC_200_OK = 200,$/;"	e	enum:HTTPResponseCode	file:
RC_201_Created	pcm-sensor-server.cpp	/^    RC_201_Created,$/;"	e	enum:HTTPResponseCode	file:
RC_202_Accepted	pcm-sensor-server.cpp	/^    RC_202_Accepted,$/;"	e	enum:HTTPResponseCode	file:
RC_203_NonAuthorativeInformation	pcm-sensor-server.cpp	/^    RC_203_NonAuthorativeInformation,$/;"	e	enum:HTTPResponseCode	file:
RC_204_NoContent	pcm-sensor-server.cpp	/^    RC_204_NoContent,$/;"	e	enum:HTTPResponseCode	file:
RC_205_ResetContent	pcm-sensor-server.cpp	/^    RC_205_ResetContent,$/;"	e	enum:HTTPResponseCode	file:
RC_206_PartialContent	pcm-sensor-server.cpp	/^    RC_206_PartialContent,$/;"	e	enum:HTTPResponseCode	file:
RC_207_MultiStatus	pcm-sensor-server.cpp	/^    RC_207_MultiStatus,$/;"	e	enum:HTTPResponseCode	file:
RC_208_AlreadyReported	pcm-sensor-server.cpp	/^    RC_208_AlreadyReported,$/;"	e	enum:HTTPResponseCode	file:
RC_226_IMUsed	pcm-sensor-server.cpp	/^    RC_226_IMUsed = 226,$/;"	e	enum:HTTPResponseCode	file:
RC_300_MultipleChoices	pcm-sensor-server.cpp	/^    RC_300_MultipleChoices = 300,$/;"	e	enum:HTTPResponseCode	file:
RC_301_MovedPermanently	pcm-sensor-server.cpp	/^    RC_301_MovedPermanently,$/;"	e	enum:HTTPResponseCode	file:
RC_302_Found	pcm-sensor-server.cpp	/^    RC_302_Found,$/;"	e	enum:HTTPResponseCode	file:
RC_303_SeeOther	pcm-sensor-server.cpp	/^    RC_303_SeeOther,$/;"	e	enum:HTTPResponseCode	file:
RC_304_NotModified	pcm-sensor-server.cpp	/^    RC_304_NotModified,$/;"	e	enum:HTTPResponseCode	file:
RC_305_UseProxy	pcm-sensor-server.cpp	/^    RC_305_UseProxy,$/;"	e	enum:HTTPResponseCode	file:
RC_307_TemporaryRedirect	pcm-sensor-server.cpp	/^    RC_307_TemporaryRedirect = 307,$/;"	e	enum:HTTPResponseCode	file:
RC_308_PermanentRedirect	pcm-sensor-server.cpp	/^    RC_308_PermanentRedirect,$/;"	e	enum:HTTPResponseCode	file:
RC_400_BadRequest	pcm-sensor-server.cpp	/^    RC_400_BadRequest = 400,$/;"	e	enum:HTTPResponseCode	file:
RC_401_Unauthorized	pcm-sensor-server.cpp	/^    RC_401_Unauthorized,$/;"	e	enum:HTTPResponseCode	file:
RC_402_PaymentRequired	pcm-sensor-server.cpp	/^    RC_402_PaymentRequired,$/;"	e	enum:HTTPResponseCode	file:
RC_403_Forbidden	pcm-sensor-server.cpp	/^    RC_403_Forbidden,$/;"	e	enum:HTTPResponseCode	file:
RC_404_NotFound	pcm-sensor-server.cpp	/^    RC_404_NotFound,$/;"	e	enum:HTTPResponseCode	file:
RC_405_MethodNotAllowed	pcm-sensor-server.cpp	/^    RC_405_MethodNotAllowed,$/;"	e	enum:HTTPResponseCode	file:
RC_406_NotAcceptable	pcm-sensor-server.cpp	/^    RC_406_NotAcceptable,$/;"	e	enum:HTTPResponseCode	file:
RC_407_ProxyAuthenticationRequired	pcm-sensor-server.cpp	/^    RC_407_ProxyAuthenticationRequired,$/;"	e	enum:HTTPResponseCode	file:
RC_408_RequestTimeout	pcm-sensor-server.cpp	/^    RC_408_RequestTimeout,$/;"	e	enum:HTTPResponseCode	file:
RC_409_Conflict	pcm-sensor-server.cpp	/^    RC_409_Conflict,$/;"	e	enum:HTTPResponseCode	file:
RC_410_Gone	pcm-sensor-server.cpp	/^    RC_410_Gone,$/;"	e	enum:HTTPResponseCode	file:
RC_411_LengthRequired	pcm-sensor-server.cpp	/^    RC_411_LengthRequired,$/;"	e	enum:HTTPResponseCode	file:
RC_412_PreconditionFailed	pcm-sensor-server.cpp	/^    RC_412_PreconditionFailed,$/;"	e	enum:HTTPResponseCode	file:
RC_413_PayloadTooLarge	pcm-sensor-server.cpp	/^    RC_413_PayloadTooLarge,$/;"	e	enum:HTTPResponseCode	file:
RC_414_RequestURITooLong	pcm-sensor-server.cpp	/^    RC_414_RequestURITooLong,$/;"	e	enum:HTTPResponseCode	file:
RC_415_UnsupportedMediaType	pcm-sensor-server.cpp	/^    RC_415_UnsupportedMediaType,$/;"	e	enum:HTTPResponseCode	file:
RC_416_RequestRangeNotSatisfiable	pcm-sensor-server.cpp	/^    RC_416_RequestRangeNotSatisfiable,$/;"	e	enum:HTTPResponseCode	file:
RC_417_ExpectationFailed	pcm-sensor-server.cpp	/^    RC_417_ExpectationFailed,$/;"	e	enum:HTTPResponseCode	file:
RC_418_ImATeapot	pcm-sensor-server.cpp	/^    RC_418_ImATeapot,$/;"	e	enum:HTTPResponseCode	file:
RC_421_MisdirectedRequest	pcm-sensor-server.cpp	/^    RC_421_MisdirectedRequest = 421,$/;"	e	enum:HTTPResponseCode	file:
RC_422_UnprocessableEntity	pcm-sensor-server.cpp	/^    RC_422_UnprocessableEntity,$/;"	e	enum:HTTPResponseCode	file:
RC_423_Locked	pcm-sensor-server.cpp	/^    RC_423_Locked,$/;"	e	enum:HTTPResponseCode	file:
RC_424_FailedDependency	pcm-sensor-server.cpp	/^    RC_424_FailedDependency,$/;"	e	enum:HTTPResponseCode	file:
RC_426_UpgradeRequired	pcm-sensor-server.cpp	/^    RC_426_UpgradeRequired = 426,$/;"	e	enum:HTTPResponseCode	file:
RC_428_PreconditionRequired	pcm-sensor-server.cpp	/^    RC_428_PreconditionRequired = 428,$/;"	e	enum:HTTPResponseCode	file:
RC_429_TooManyRequests	pcm-sensor-server.cpp	/^    RC_429_TooManyRequests,$/;"	e	enum:HTTPResponseCode	file:
RC_431_RequestHeaderFieldsTooLarge	pcm-sensor-server.cpp	/^    RC_431_RequestHeaderFieldsTooLarge = 431,$/;"	e	enum:HTTPResponseCode	file:
RC_444_ConnectionClosedWithoutResponse	pcm-sensor-server.cpp	/^    RC_444_ConnectionClosedWithoutResponse = 444,$/;"	e	enum:HTTPResponseCode	file:
RC_451_UnavailableForLegalReasons	pcm-sensor-server.cpp	/^    RC_451_UnavailableForLegalReasons = 451,$/;"	e	enum:HTTPResponseCode	file:
RC_499_ClientClosedRequest	pcm-sensor-server.cpp	/^    RC_499_ClientClosedRequest = 499,$/;"	e	enum:HTTPResponseCode	file:
RC_500_InternalServerError	pcm-sensor-server.cpp	/^    RC_500_InternalServerError,$/;"	e	enum:HTTPResponseCode	file:
RC_501_NotImplemented	pcm-sensor-server.cpp	/^    RC_501_NotImplemented,$/;"	e	enum:HTTPResponseCode	file:
RC_502_BadGateway	pcm-sensor-server.cpp	/^    RC_502_BadGateway,$/;"	e	enum:HTTPResponseCode	file:
RC_503_ServiceUnavailable	pcm-sensor-server.cpp	/^    RC_503_ServiceUnavailable,$/;"	e	enum:HTTPResponseCode	file:
RC_504_GatewayTimeout	pcm-sensor-server.cpp	/^    RC_504_GatewayTimeout,$/;"	e	enum:HTTPResponseCode	file:
RC_505_HTTPVersionNotSupported	pcm-sensor-server.cpp	/^    RC_505_HTTPVersionNotSupported,$/;"	e	enum:HTTPResponseCode	file:
RC_506_VariantAlsoNegotiates	pcm-sensor-server.cpp	/^    RC_506_VariantAlsoNegotiates,$/;"	e	enum:HTTPResponseCode	file:
RC_507_InsufficientStorage	pcm-sensor-server.cpp	/^    RC_507_InsufficientStorage,$/;"	e	enum:HTTPResponseCode	file:
RC_508_LoopDetected	pcm-sensor-server.cpp	/^    RC_508_LoopDetected,$/;"	e	enum:HTTPResponseCode	file:
RC_510_NotExtended	pcm-sensor-server.cpp	/^    RC_510_NotExtended = 510,$/;"	e	enum:HTTPResponseCode	file:
RC_511_NetworkAuthenticationRequired	pcm-sensor-server.cpp	/^    RC_511_NetworkAuthenticationRequired,$/;"	e	enum:HTTPResponseCode	file:
RC_599_NetworkConnectTimeoutError	pcm-sensor-server.cpp	/^    RC_599_NetworkConnectTimeoutError = 599,$/;"	e	enum:HTTPResponseCode	file:
RDMSR	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^inline uint64_t RDMSR(uint32_t msr)$/;"	f
RDTSC	cpucounters.h	/^inline uint64 RDTSC()$/;"	f	namespace:pcm
RDTSCP	cpucounters.h	/^inline uint64 RDTSCP()$/;"	f	namespace:pcm
READ	cpucounters.h	/^        READ=0,$/;"	e	enum:pcm::ServerPCICFGUncore::EventPosition
READ_RANK_A	cpucounters.h	/^        READ_RANK_A=0,$/;"	e	enum:pcm::ServerPCICFGUncore::EventPosition
READ_RANK_B	cpucounters.h	/^        READ_RANK_B=2,$/;"	e	enum:pcm::ServerPCICFGUncore::EventPosition
REQUESTS_ALL	cpucounters.h	/^        REQUESTS_ALL = 2,$/;"	e	enum:pcm::PCM::EventPosition
REQUESTS_LOCAL	cpucounters.h	/^        REQUESTS_LOCAL = 3$/;"	e	enum:pcm::PCM::EventPosition
RESET	cpucounters.h	/^        RESET,$/;"	e	enum:pcm::PCM::PerfmonField
RFO	cpucounters.h	/^        RFO = 0x180,       \/\/ Demand Data RFO; share the same code for CPU, use tid to filter PCIe only traffic$/;"	e	enum:pcm::PCM::PCIeEventCode
RFO	pcm-pcie.h	/^        RFO,$/;"	e	enum:GrantleyPlatform::eventIdx
RFO	pcm-pcie.h	/^        RFO,$/;"	e	enum:PurleyPlatform::eventIdx
RFO_hit	pcm-pcie.h	/^            RFO_hit,$/;"	e	enum:PurleyPlatform::Events
RFO_miss	pcm-pcie.h	/^            RFO_miss,$/;"	e	enum:GrantleyPlatform::Events
RFO_miss	pcm-pcie.h	/^            RFO_miss,$/;"	e	enum:PurleyPlatform::Events
RFO_total	pcm-pcie.h	/^            RFO_total,$/;"	e	enum:GrantleyPlatform::Events
RFOtid	cpucounters.h	/^        RFOtid = 0x3E,$/;"	e	enum:pcm::PCM::CBoEventTid
RM	daemon/client/Debug/makefile	/^RM := rm -rf$/;"	m
RM	daemon/daemon/Debug/makefile	/^RM := rm -rf$/;"	m
RM	daemon/daemon/test/Makefile	/^RM=rm$/;"	m
RPQ_INS	pcm-latency.cpp	46;"	d	file:
RPQ_OCC	pcm-latency.cpp	45;"	d	file:
R_MSR_PMON_CTL0	types.h	236;"	d
R_MSR_PMON_CTL1	types.h	238;"	d
R_MSR_PMON_CTL10	types.h	256;"	d
R_MSR_PMON_CTL11	types.h	258;"	d
R_MSR_PMON_CTL12	types.h	260;"	d
R_MSR_PMON_CTL13	types.h	262;"	d
R_MSR_PMON_CTL14	types.h	264;"	d
R_MSR_PMON_CTL15	types.h	266;"	d
R_MSR_PMON_CTL2	types.h	240;"	d
R_MSR_PMON_CTL3	types.h	242;"	d
R_MSR_PMON_CTL4	types.h	244;"	d
R_MSR_PMON_CTL5	types.h	246;"	d
R_MSR_PMON_CTL6	types.h	248;"	d
R_MSR_PMON_CTL7	types.h	250;"	d
R_MSR_PMON_CTL8	types.h	252;"	d
R_MSR_PMON_CTL9	types.h	254;"	d
R_MSR_PMON_CTR0	types.h	237;"	d
R_MSR_PMON_CTR1	types.h	239;"	d
R_MSR_PMON_CTR10	types.h	257;"	d
R_MSR_PMON_CTR11	types.h	259;"	d
R_MSR_PMON_CTR12	types.h	261;"	d
R_MSR_PMON_CTR13	types.h	263;"	d
R_MSR_PMON_CTR14	types.h	265;"	d
R_MSR_PMON_CTR15	types.h	267;"	d
R_MSR_PMON_CTR2	types.h	241;"	d
R_MSR_PMON_CTR3	types.h	243;"	d
R_MSR_PMON_CTR4	types.h	245;"	d
R_MSR_PMON_CTR5	types.h	247;"	d
R_MSR_PMON_CTR6	types.h	249;"	d
R_MSR_PMON_CTR7	types.h	251;"	d
R_MSR_PMON_CTR8	types.h	253;"	d
R_MSR_PMON_CTR9	types.h	255;"	d
R_MSR_PMON_GLOBAL_CTL_15_8	types.h	288;"	d
R_MSR_PMON_GLOBAL_CTL_7_0	types.h	287;"	d
R_MSR_PORT0_IPERF_CFG0	types.h	269;"	d
R_MSR_PORT0_IPERF_CFG1	types.h	278;"	d
R_MSR_PORT1_IPERF_CFG0	types.h	270;"	d
R_MSR_PORT1_IPERF_CFG1	types.h	279;"	d
R_MSR_PORT2_IPERF_CFG0	types.h	271;"	d
R_MSR_PORT2_IPERF_CFG1	types.h	280;"	d
R_MSR_PORT3_IPERF_CFG0	types.h	272;"	d
R_MSR_PORT3_IPERF_CFG1	types.h	281;"	d
R_MSR_PORT4_IPERF_CFG0	types.h	273;"	d
R_MSR_PORT4_IPERF_CFG1	types.h	282;"	d
R_MSR_PORT5_IPERF_CFG0	types.h	274;"	d
R_MSR_PORT5_IPERF_CFG1	types.h	283;"	d
R_MSR_PORT6_IPERF_CFG0	types.h	275;"	d
R_MSR_PORT6_IPERF_CFG1	types.h	284;"	d
R_MSR_PORT7_IPERF_CFG0	types.h	276;"	d
R_MSR_PORT7_IPERF_CFG1	types.h	285;"	d
Range	pcm-sensor-server.cpp	/^    Range = 5,$/;"	e	enum:HeaderType	file:
RawEventConfig	cpucounters.h	/^    typedef std::pair<std::array<uint64, 3>, std::string> RawEventConfig;$/;"	t	class:pcm::PCM
RawPMUConfig	cpucounters.h	/^    struct RawPMUConfig$/;"	s	class:pcm::PCM
RawPMUConfigs	cpucounters.h	/^    typedef std::map<std::string, RawPMUConfig> RawPMUConfigs;$/;"	t	class:pcm::PCM
Rdmsr	winring0/OlsApiInit.h	/^_Rdmsr Rdmsr = NULL;$/;"	v
RdmsrPx	winring0/OlsApiInit.h	/^_RdmsrPx RdmsrPx = NULL;$/;"	v
RdmsrTx	winring0/OlsApiInit.h	/^_RdmsrTx RdmsrTx = NULL;$/;"	v
Rdpmc	winring0/OlsApiInit.h	/^_Rdpmc Rdpmc = NULL;$/;"	v
RdpmcPx	winring0/OlsApiInit.h	/^_RdpmcPx RdpmcPx = NULL;$/;"	v
RdpmcTx	winring0/OlsApiInit.h	/^_RdpmcTx RdpmcTx = NULL;$/;"	v
Rdtsc	winring0/OlsApiInit.h	/^_Rdtsc Rdtsc = NULL;$/;"	v
RdtscPx	winring0/OlsApiInit.h	/^_RdtscPx RdtscPx = NULL;$/;"	v
RdtscTx	winring0/OlsApiInit.h	/^_RdtscTx RdtscTx = NULL;$/;"	v
ReadDmiMemory	winring0/OlsApiInit.h	/^_ReadDmiMemory ReadDmiMemory = NULL;$/;"	v
ReadIoPortByte	winring0/OlsApiInit.h	/^_ReadIoPortByte ReadIoPortByte = NULL;$/;"	v
ReadIoPortByteEx	winring0/OlsApiInit.h	/^_ReadIoPortByteEx ReadIoPortByteEx = NULL;$/;"	v
ReadIoPortDword	winring0/OlsApiInit.h	/^_ReadIoPortDword ReadIoPortDword = NULL;$/;"	v
ReadIoPortDwordEx	winring0/OlsApiInit.h	/^_ReadIoPortDwordEx ReadIoPortDwordEx = NULL;$/;"	v
ReadIoPortWord	winring0/OlsApiInit.h	/^_ReadIoPortWord ReadIoPortWord = NULL;$/;"	v
ReadIoPortWordEx	winring0/OlsApiInit.h	/^_ReadIoPortWordEx ReadIoPortWordEx = NULL;$/;"	v
ReadPciConfigByte	winring0/OlsApiInit.h	/^_ReadPciConfigByte ReadPciConfigByte = NULL;$/;"	v
ReadPciConfigByteEx	winring0/OlsApiInit.h	/^_ReadPciConfigByteEx ReadPciConfigByteEx = NULL;$/;"	v
ReadPciConfigDword	winring0/OlsApiInit.h	/^_ReadPciConfigDword ReadPciConfigDword = NULL;$/;"	v
ReadPciConfigDwordEx	winring0/OlsApiInit.h	/^_ReadPciConfigDwordEx ReadPciConfigDwordEx = NULL;$/;"	v
ReadPciConfigWord	winring0/OlsApiInit.h	/^_ReadPciConfigWord ReadPciConfigWord = NULL;$/;"	v
ReadPciConfigWordEx	winring0/OlsApiInit.h	/^_ReadPciConfigWordEx ReadPciConfigWordEx = NULL;$/;"	v
ReadPhysicalMemory	winring0/OlsApiInit.h	/^_ReadPhysicalMemory ReadPhysicalMemory = NULL;$/;"	v
Required	pcm-sensor-server.cpp	/^    Required = 2$/;"	e	enum:HTTPRequestHasBody	file:
Resctrl	resctrl.h	/^        Resctrl(PCM & m) : pcm(m) {}$/;"	f	class:pcm::Resctrl
Resctrl	resctrl.h	/^    class Resctrl$/;"	c	namespace:pcm
SANDY_BRIDGE	cpucounters.h	/^        SANDY_BRIDGE = 42,$/;"	e	enum:pcm::PCM::SupportedCPUModels
SIZE	pcm.cpp	42;"	d	file:
SKL	cpucounters.h	/^        SKL = 94,$/;"	e	enum:pcm::PCM::SupportedCPUModels
SKLL2MissPos	cpucounters.h	/^            SKLL2MissPos = 2,$/;"	e	enum:pcm::BasicCounterState::__anon6
SKLL3HitPos	cpucounters.h	/^             SKLL3HitPos = 1,$/;"	e	enum:pcm::BasicCounterState::__anon6
SKL_MEM_LOAD_RETIRED_L2_HIT_EVTNR	types.h	125;"	d
SKL_MEM_LOAD_RETIRED_L2_HIT_UMASK	types.h	126;"	d
SKL_MEM_LOAD_RETIRED_L2_MISS_EVTNR	types.h	122;"	d
SKL_MEM_LOAD_RETIRED_L2_MISS_UMASK	types.h	123;"	d
SKL_MEM_LOAD_RETIRED_L3_HIT_EVTNR	types.h	119;"	d
SKL_MEM_LOAD_RETIRED_L3_HIT_UMASK	types.h	120;"	d
SKL_MEM_LOAD_RETIRED_L3_MISS_EVTNR	types.h	116;"	d
SKL_MEM_LOAD_RETIRED_L3_MISS_UMASK	types.h	117;"	d
SKL_UY	cpucounters.h	/^        SKL_UY = 78,$/;"	e	enum:pcm::PCM::SupportedCPUModels
SKX	cpucounters.h	/^        SKX = 85,$/;"	e	enum:pcm::PCM::SupportedCPUModels
SKX_CHA_MSR_PMON_BOX_FILTER1_LOC	types.h	920;"	d
SKX_CHA_MSR_PMON_BOX_FILTER1_NC	types.h	925;"	d
SKX_CHA_MSR_PMON_BOX_FILTER1_NM	types.h	921;"	d
SKX_CHA_MSR_PMON_BOX_FILTER1_NOT_NM	types.h	922;"	d
SKX_CHA_MSR_PMON_BOX_FILTER1_OPC0	types.h	923;"	d
SKX_CHA_MSR_PMON_BOX_FILTER1_OPC1	types.h	924;"	d
SKX_CHA_MSR_PMON_BOX_FILTER1_REM	types.h	919;"	d
SKX_CHA_MSR_PMON_BOX_FILTER1_RSV	types.h	926;"	d
SKX_CHA_MSR_PMON_BOX_GET_NC	types.h	928;"	d
SKX_CHA_MSR_PMON_BOX_GET_OPC0	types.h	927;"	d
SKX_CHA_TOR_INSERTS_UMASK_HIT	types.h	932;"	d
SKX_CHA_TOR_INSERTS_UMASK_IRQ	types.h	930;"	d
SKX_CHA_TOR_INSERTS_UMASK_MISS	types.h	933;"	d
SKX_CHA_TOR_INSERTS_UMASK_PRQ	types.h	931;"	d
SKX_CRd	cpucounters.h	/^        SKX_CRd = 0x201,$/;"	e	enum:pcm::PCM::PCIeEventCode
SKX_DRd	cpucounters.h	/^        SKX_DRd = 0x202,$/;"	e	enum:pcm::PCM::PCIeEventCode
SKX_IIO_CBDMA_CLK	types.h	938;"	d
SKX_IIO_CBDMA_CTL0	types.h	939;"	d
SKX_IIO_CBDMA_CTR0	types.h	937;"	d
SKX_IIO_CBDMA_UNIT_CTL	types.h	936;"	d
SKX_IIO_CBDMA_UNIT_STATUS	types.h	935;"	d
SKX_IIO_PM_REG_STEP	types.h	940;"	d
SKX_ItoM	cpucounters.h	/^        SKX_ItoM = 0x248,$/;"	e	enum:pcm::PCM::PCIeEventCode
SKX_M2M_0_REGISTER_DEV_ADDR	types.h	706;"	d
SKX_M2M_0_REGISTER_FUNC_ADDR	types.h	707;"	d
SKX_M2M_1_REGISTER_DEV_ADDR	types.h	708;"	d
SKX_M2M_1_REGISTER_FUNC_ADDR	types.h	709;"	d
SKX_M3UPI_PORT0_REGISTER_DEV_ADDR	types.h	/^constexpr auto SKX_M3UPI_PORT0_REGISTER_DEV_ADDR = (0x12);$/;"	m	namespace:pcm
SKX_M3UPI_PORT0_REGISTER_FUNC_ADDR	types.h	/^constexpr auto SKX_M3UPI_PORT0_REGISTER_FUNC_ADDR = (1);$/;"	m	namespace:pcm
SKX_M3UPI_PORT1_REGISTER_DEV_ADDR	types.h	/^constexpr auto SKX_M3UPI_PORT1_REGISTER_DEV_ADDR = (0x12);$/;"	m	namespace:pcm
SKX_M3UPI_PORT1_REGISTER_FUNC_ADDR	types.h	/^constexpr auto SKX_M3UPI_PORT1_REGISTER_FUNC_ADDR = (2);$/;"	m	namespace:pcm
SKX_M3UPI_PORT2_REGISTER_DEV_ADDR	types.h	/^constexpr auto SKX_M3UPI_PORT2_REGISTER_DEV_ADDR = (0x12);$/;"	m	namespace:pcm
SKX_M3UPI_PORT2_REGISTER_FUNC_ADDR	types.h	/^constexpr auto SKX_M3UPI_PORT2_REGISTER_FUNC_ADDR = (5);$/;"	m	namespace:pcm
SKX_MC0_CH0_REGISTER_DEV_ADDR	types.h	545;"	d
SKX_MC0_CH0_REGISTER_FUNC_ADDR	types.h	549;"	d
SKX_MC0_CH1_REGISTER_DEV_ADDR	types.h	546;"	d
SKX_MC0_CH1_REGISTER_FUNC_ADDR	types.h	550;"	d
SKX_MC0_CH2_REGISTER_DEV_ADDR	types.h	547;"	d
SKX_MC0_CH2_REGISTER_FUNC_ADDR	types.h	551;"	d
SKX_MC0_CH3_REGISTER_DEV_ADDR	types.h	548;"	d
SKX_MC0_CH3_REGISTER_FUNC_ADDR	types.h	552;"	d
SKX_MC1_CH0_REGISTER_DEV_ADDR	types.h	554;"	d
SKX_MC1_CH0_REGISTER_FUNC_ADDR	types.h	558;"	d
SKX_MC1_CH1_REGISTER_DEV_ADDR	types.h	555;"	d
SKX_MC1_CH1_REGISTER_FUNC_ADDR	types.h	559;"	d
SKX_MC1_CH2_REGISTER_DEV_ADDR	types.h	556;"	d
SKX_MC1_CH2_REGISTER_FUNC_ADDR	types.h	560;"	d
SKX_MC1_CH3_REGISTER_DEV_ADDR	types.h	557;"	d
SKX_MC1_CH3_REGISTER_FUNC_ADDR	types.h	561;"	d
SKX_PRd	cpucounters.h	/^        SKX_PRd = 0x207,$/;"	e	enum:pcm::PCM::PCIeEventCode
SKX_QPI_PORT0_REGISTER_DEV_ADDR	types.h	668;"	d
SKX_QPI_PORT0_REGISTER_FUNC_ADDR	types.h	669;"	d
SKX_QPI_PORT1_REGISTER_DEV_ADDR	types.h	670;"	d
SKX_QPI_PORT1_REGISTER_FUNC_ADDR	types.h	671;"	d
SKX_QPI_PORT2_REGISTER_DEV_ADDR	types.h	672;"	d
SKX_QPI_PORT2_REGISTER_FUNC_ADDR	types.h	673;"	d
SKX_RFO	cpucounters.h	/^        SKX_RFO = 0x200,$/;"	e	enum:pcm::PCM::PCIeEventCode
SKX_RdCur	cpucounters.h	/^        SKX_RdCur = 0x21E,$/;"	e	enum:pcm::PCM::PCIeEventCode
SKX_WiL	cpucounters.h	/^        SKX_WiL = 0x20F,$/;"	e	enum:pcm::PCM::PCIeEventCode
SMICount	cpucounters.h	/^    uint64 SMICount;$/;"	m	class:pcm::BasicCounterState
SOURCES	daemon/daemon/test/Makefile	/^SOURCES=main.cpp$/;"	m
SUBDIRS	daemon/client/Debug/sources.mk	/^SUBDIRS := \\$/;"	m
SUBDIRS	daemon/daemon/Debug/sources.mk	/^SUBDIRS := \\$/;"	m
S_UPPER_SRCS	daemon/client/Debug/sources.mk	/^S_UPPER_SRCS := $/;"	m
S_UPPER_SRCS	daemon/daemon/Debug/sources.mk	/^S_UPPER_SRCS := $/;"	m
SafeMsrHandle	msr.h	/^    SafeMsrHandle() { }$/;"	f	class:pcm::SafeMsrHandle
SafeMsrHandle	msr.h	/^    SafeMsrHandle(uint32 core_id) : pHandle(new MsrHandle(core_id))$/;"	f	class:pcm::SafeMsrHandle
SafeMsrHandle	msr.h	/^class SafeMsrHandle$/;"	c	namespace:pcm
Scope	mutex.h	/^            Scope(Mutex & m_) : m(m_)$/;"	f	class:pcm::Mutex::Scope
Scope	mutex.h	/^        class Scope {$/;"	c	class:pcm::Mutex
Server	pcm-sensor-server.cpp	/^class Server {$/;"	c	file:
ServerPCICFGUncore	cpucounters.cpp	/^ServerPCICFGUncore::ServerPCICFGUncore(uint32 socket_, const PCM * pcm) :$/;"	f	class:pcm::ServerPCICFGUncore
ServerPCICFGUncore	cpucounters.h	/^class ServerPCICFGUncore$/;"	c	namespace:pcm
ServerSet	pcm-sensor-server.cpp	/^    ServerSet = -2,$/;"	e	enum:HeaderType	file:
ServerUncore	topology.h	/^    ServerUncore( PCM* m, int32 socketID ) : Uncore( m, socketID ) {}$/;"	f	class:pcm::ServerUncore
ServerUncore	topology.h	/^class ServerUncore : public Uncore$/;"	c	namespace:pcm
ServerUncoreCounterState	cpucounters.h	/^    ServerUncoreCounterState() :$/;"	f	class:pcm::ServerUncoreCounterState
ServerUncoreCounterState	cpucounters.h	/^class ServerUncoreCounterState : public UncoreCounterState$/;"	c	namespace:pcm
ServiceName	PCM-Service_Win/PCMService.h	/^        static initonly String^ ServiceName = gcnew String(L"PCMService");$/;"	m	struct:PCMServiceNS::Globals
SetOlsValue	winring0/OlsApiInit.h	/^_SetOlsValue SetOlsValue = NULL;$/;"	v
SetPciMaxBusIndex	winring0/OlsApiInit.h	/^_SetPciMaxBusIndex SetPciMaxBusIndex = NULL;$/;"	v
SetServiceFail	PCM-Service_Win/PCMService.h	/^        void SetServiceFail (int ErrorCode) $/;"	f	class:PCMServiceNS::PCMService
SharedPCMCounters	daemon/daemon/common.h	/^	struct SharedPCMCounters {$/;"	s	namespace:PCMDaemon
SharedPCMCounters	daemon/daemon/common.h	/^	typedef struct SharedPCMCounters SharedPCMCounters;$/;"	t	namespace:PCMDaemon	typeref:struct:PCMDaemon::SharedPCMCounters
SharedPCMState	daemon/daemon/common.h	/^		SharedPCMState() :$/;"	f	struct:PCMDaemon::SharedPCMState
SharedPCMState	daemon/daemon/common.h	/^	struct SharedPCMState {$/;"	s	namespace:PCMDaemon
SharedPCMState	daemon/daemon/common.h	/^	typedef struct SharedPCMState SharedPCMState;$/;"	t	namespace:PCMDaemon	typeref:struct:PCMDaemon::SharedPCMState
SignalHandler	pcm-sensor-server.cpp	/^class SignalHandler {$/;"	c	file:
SimpleCounterState	cpucounters.h	/^    SimpleCounterState() : data(0)$/;"	f	class:pcm::SimpleCounterState
SimpleCounterState	cpucounters.h	/^class SimpleCounterState$/;"	c	namespace:pcm
SimplePCIeDevInfo	cpucounters.h	/^        SimplePCIeDevInfo() : width(XFF) { }$/;"	f	struct:pcm::PCM::SimplePCIeDevInfo
SimplePCIeDevInfo	cpucounters.h	/^    struct SimplePCIeDevInfo$/;"	s	class:pcm::PCM
Socket	topology.cpp	/^Socket::Socket( PCM* m, int32 apicID, int32 logicalID )$/;"	f	class:pcm::Socket
Socket	topology.h	/^class Socket : public SystemObject {$/;"	c	namespace:pcm
SocketCounterState	cpucounters.h	/^class SocketCounterState : public BasicCounterState, public UncoreCounterState$/;"	c	namespace:pcm
StackedBarItem	utils.h	/^    StackedBarItem() {}$/;"	f	struct:pcm::StackedBarItem
StackedBarItem	utils.h	/^    StackedBarItem(double fraction_,$/;"	f	struct:pcm::StackedBarItem
StackedBarItem	utils.h	/^struct StackedBarItem {$/;"	s	namespace:pcm
StarOrFQURL	pcm-sensor-server.cpp	/^    StarOrFQURL = 21,$/;"	e	enum:HeaderType	file:
Status	topology.h	/^enum Status {$/;"	g	namespace:pcm
String	pcm-sensor-server.cpp	/^    String = 1,$/;"	e	enum:HeaderType	file:
Success	cpucounters.h	/^        Success = 0,$/;"	e	enum:pcm::PCM::ErrorCode
SupportedCPUModels	cpucounters.h	/^    enum SupportedCPUModels$/;"	g	class:pcm::PCM
SysAfterState	pcm-core.cpp	/^	SystemCounterState SysBeforeState, SysAfterState;$/;"	v
SysAfterState	pcm-latency.cpp	/^SystemCounterState SysBeforeState, SysAfterState;$/;"	v
SysBeforeState	pcm-core.cpp	/^	SystemCounterState SysBeforeState, SysAfterState;$/;"	v
SysBeforeState	pcm-latency.cpp	/^SystemCounterState SysBeforeState, SysAfterState;$/;"	v
SystemCounterState	cpucounters.h	/^    SystemCounterState() :$/;"	f	class:pcm::SystemCounterState
SystemCounterState	cpucounters.h	/^class SystemCounterState : public SocketCounterState$/;"	c	namespace:pcm
SystemObject	topology.h	/^class SystemObject$/;"	c	namespace:pcm
SystemRoot	topology.h	/^    SystemRoot(PCM * p) : pcm_(p) {}$/;"	f	class:pcm::SystemRoot
SystemRoot	topology.h	/^class SystemRoot : public SystemObject {$/;"	c	namespace:pcm
T	memoptest.cpp	/^    T() { }$/;"	f	struct:T
T	memoptest.cpp	/^    T(int a) { key[0] = a; }$/;"	f	struct:T
T	memoptest.cpp	/^struct T$/;"	s	file:
T	readmem.cpp	/^    T() { }$/;"	f	struct:T
T	readmem.cpp	/^    T(int a) { key[0] = a; }$/;"	f	struct:T
T	readmem.cpp	/^struct T$/;"	s	file:
T	realtime.cpp	/^    T() { }$/;"	f	struct:T
T	realtime.cpp	/^    T(int a) { key[0] = a; }$/;"	f	struct:T
T	realtime.cpp	/^struct T$/;"	s	file:
TEST_VAR	pcm-iio.cpp	520;"	d	file:
TGL	cpucounters.h	/^        TGL = 140,$/;"	e	enum:pcm::PCM::SupportedCPUModels
TGL_1	cpucounters.h	/^        TGL_1 = 141,$/;"	e	enum:pcm::PCM::SupportedCPUModels
THRESH	cpucounters.h	/^        THRESH,$/;"	e	enum:pcm::PCM::PerfmonField
TORInsertsIAMiss	cpucounters.h	/^    uint64 TORInsertsIAMiss;$/;"	m	class:pcm::UncoreCounterState
TOROccupancyIAMiss	cpucounters.h	/^    uint64 TOROccupancyIAMiss;$/;"	m	class:pcm::UncoreCounterState
TOR_INSERTS	cpucounters.h	/^        TOR_INSERTS = 1,$/;"	e	enum:pcm::PCM::EventPosition
TOR_OCCUPANCY	cpucounters.h	/^        TOR_OCCUPANCY = 0,$/;"	e	enum:pcm::PCM::EventPosition
TOTAL	pcm-pcie.h	/^    enum eventFilter {TOTAL, MISS, HIT, fltLast};$/;"	e	enum:IPlatform::eventFilter
TRACE	pcm-sensor-server.cpp	/^    TRACE,$/;"	e	enum:HTTPRequestMethod	file:
TSXEvent	pcm-tsx.cpp	/^struct TSXEvent$/;"	s	file:
TX_CYCLES_COMMITED_POS	pcm-tsx.cpp	185;"	d	file:
TX_CYCLES_POS	pcm-tsx.cpp	184;"	d	file:
Target	dashboard.cpp	/^class Target$/;"	c	namespace:pcm	file:
TemporalThreadAffinity	cpucounters.cpp	/^    TemporalThreadAffinity(uint32 core, bool checkStatus = true) : affinity(core, checkStatus) {}$/;"	f	class:pcm::TemporalThreadAffinity
TemporalThreadAffinity	cpucounters.cpp	/^    TemporalThreadAffinity(uint32 core_id, bool checkStatus = true)$/;"	f	class:pcm::TemporalThreadAffinity
TemporalThreadAffinity	cpucounters.cpp	/^    TemporalThreadAffinity(uint32) { }$/;"	f	class:pcm::TemporalThreadAffinity
TemporalThreadAffinity	cpucounters.cpp	/^    TemporalThreadAffinity(uint32, bool) {}$/;"	f	class:pcm::TemporalThreadAffinity
TemporalThreadAffinity	cpucounters.cpp	/^class TemporalThreadAffinity  \/\/ speedup trick for Linux, FreeBSD, DragonFlyBSD, Windows$/;"	c	namespace:pcm	file:
TextHTML	pcm-sensor-server.cpp	/^    TextHTML,$/;"	e	enum:MimeType	file:
TextPlain	pcm-sensor-server.cpp	/^    TextPlain,$/;"	e	enum:MimeType	file:
TextPlainProm_0_0_4	pcm-sensor-server.cpp	/^    TextPlainProm_0_0_4,$/;"	e	enum:MimeType	file:
TextXML	pcm-sensor-server.cpp	/^    TextXML,$/;"	e	enum:MimeType	file:
ThermalHeadroom	cpucounters.h	/^    int32 ThermalHeadroom;$/;"	m	class:pcm::BasicCounterState
ThreadGroupTempAffinity	utils.cpp	/^ThreadGroupTempAffinity::ThreadGroupTempAffinity(uint32 core_id, bool checkStatus)$/;"	f	class:pcm::ThreadGroupTempAffinity
ThreadGroupTempAffinity	utils.h	/^class ThreadGroupTempAffinity$/;"	c	namespace:pcm
ThreadPool	threadpool.h	/^    ThreadPool( const int n ) {$/;"	f	class:pcm::ThreadPool
ThreadPool	threadpool.h	/^class ThreadPool {$/;"	c	namespace:pcm
TopologyEntry	cpucounters.h	/^    TopologyEntry() : os_id(-1), thread_id (-1), core_id(-1), tile_id(-1), socket(-1) { }$/;"	f	struct:pcm::TopologyEntry
TopologyEntry	cpucounters.h	/^struct PCM_API TopologyEntry \/\/ decribes a core$/;"	s	namespace:pcm
True	pcm-sensor-server.cpp	/^    True = 7, \/\/ Only allowed value is "true", all lowercase$/;"	e	enum:HeaderType	file:
TxL0Cycles	cpucounters.h	/^    std::vector<std::vector<uint64> > TxL0Cycles;$/;"	m	class:pcm::SystemCounterState
UBOXCounter	cpucounters.h	/^    std::array<uint64, maxCounters> UBOXCounter;$/;"	m	class:pcm::ServerUncoreCounterState
UBOX_MSR_PMON_CTL0_ADDR	types.h	768;"	d
UBOX_MSR_PMON_CTL1_ADDR	types.h	769;"	d
UBOX_MSR_PMON_CTR0_ADDR	types.h	770;"	d
UBOX_MSR_PMON_CTR1_ADDR	types.h	771;"	d
UCLK_FIXED_CTL_ADDR	types.h	767;"	d
UCLK_FIXED_CTL_EN	types.h	972;"	d
UCLK_FIXED_CTL_OV_EN	types.h	971;"	d
UCLK_FIXED_CTR_ADDR	types.h	766;"	d
UINT64	types.h	/^    typedef uint64 UINT64;$/;"	t	union:pcm::cvt_ds
UMASK	cpucounters.h	/^        UMASK,$/;"	e	enum:pcm::PCM::PerfmonField
UNAME	Makefile	/^UNAME:=$(shell uname)$/;"	m
UNC_PMON_UNIT_CTL_FRZ	types.h	810;"	d
UNC_PMON_UNIT_CTL_FRZ_EN	types.h	811;"	d
UNC_PMON_UNIT_CTL_RST_CONTROL	types.h	808;"	d
UNC_PMON_UNIT_CTL_RST_COUNTERS	types.h	809;"	d
UNC_PMON_UNIT_CTL_RSV	types.h	812;"	d
UNC_PMON_UNIT_CTL_VALID_BITS_MASK	types.h	814;"	d
UNC_QHL_REQUESTS_EVTNR	types.h	196;"	d
UNC_QHL_REQUESTS_IOH_READS_UMASK	types.h	198;"	d
UNC_QHL_REQUESTS_IOH_WRITES_UMASK	types.h	199;"	d
UNC_QHL_REQUESTS_LOCAL_READS_UMASK	types.h	202;"	d
UNC_QHL_REQUESTS_LOCAL_WRITES_UMASK	types.h	203;"	d
UNC_QHL_REQUESTS_REMOTE_READS_UMASK	types.h	200;"	d
UNC_QHL_REQUESTS_REMOTE_WRITES_UMASK	types.h	201;"	d
UNC_QMC_NORMAL_READS_ANY_EVTNR	types.h	193;"	d
UNC_QMC_NORMAL_READS_ANY_UMASK	types.h	194;"	d
UNC_QMC_WRITES_FULL_ANY_EVTNR	types.h	190;"	d
UNC_QMC_WRITES_FULL_ANY_UMASK	types.h	191;"	d
UPI_DEV_IDS	cpucounters.cpp	/^static const uint32 UPI_DEV_IDS[] = {$/;"	m	namespace:pcm	file:
UPIbus	cpucounters.h	/^    int32 iMCbus,UPIbus,M2Mbus;$/;"	m	class:pcm::ServerPCICFGUncore
UP_AND_LEFT	utils.cpp	457;"	d	file:
UP_AND_LEFT	utils.cpp	464;"	d	file:
UP_AND_RIGHT	utils.cpp	456;"	d	file:
UP_AND_RIGHT	utils.cpp	463;"	d	file:
URL	pcm-sensor-server.cpp	/^    URL() : scheme_( "" ), user_( "" ), passwd_( "" ), host_( "" ), path_( "" ), fragment_( "" ), port_( 0 ),$/;"	f	struct:URL
URL	pcm-sensor-server.cpp	/^struct URL {$/;"	s	file:
USER_KERNEL_SHARED	MacMSRDriver/PcmMsr/UserKernelShared.h	18;"	d
USER_OBJS	daemon/client/Debug/objects.mk	/^USER_OBJS :=$/;"	m
USER_OBJS	daemon/daemon/Debug/objects.mk	/^USER_OBJS := .\/utils.o .\/pci.o .\/msr.o .\/mmio.o .\/client_bw.o .\/cpucounters.o .\/topology.o .\/debug.o .\/threadpool.o .\/resctrl.o$/;"	m
U_L_PCI_PMON_BOX_CTL_ADDR	types.h	754;"	d
U_L_PCI_PMON_CTL0_ADDR	types.h	759;"	d
U_L_PCI_PMON_CTL1_ADDR	types.h	758;"	d
U_L_PCI_PMON_CTL2_ADDR	types.h	757;"	d
U_L_PCI_PMON_CTL3_ADDR	types.h	756;"	d
U_L_PCI_PMON_CTR0_ADDR	types.h	764;"	d
U_L_PCI_PMON_CTR1_ADDR	types.h	763;"	d
U_L_PCI_PMON_CTR2_ADDR	types.h	762;"	d
U_L_PCI_PMON_CTR3_ADDR	types.h	761;"	d
U_MSR_PMON_GLOBAL_CTL	types.h	211;"	d
UncClocks	cpucounters.h	/^    uint64 UncClocks;$/;"	m	class:pcm::UncoreCounterState
UncEDCFullWrites	cpucounters.h	/^    uint64 UncEDCFullWrites;$/;"	m	class:pcm::UncoreCounterState
UncEDCNormalReads	cpucounters.h	/^    uint64 UncEDCNormalReads;$/;"	m	class:pcm::UncoreCounterState
UncHALocalRequests	cpucounters.h	/^    uint64 UncHALocalRequests;$/;"	m	class:pcm::UncoreCounterState
UncHARequests	cpucounters.h	/^    uint64 UncHARequests;$/;"	m	class:pcm::UncoreCounterState
UncMCFullWrites	cpucounters.h	/^    uint64 UncMCFullWrites;$/;"	m	class:pcm::UncoreCounterState
UncMCIORequests	cpucounters.h	/^    uint64 UncMCIORequests;$/;"	m	class:pcm::UncoreCounterState
UncMCNormalReads	cpucounters.h	/^    uint64 UncMCNormalReads;$/;"	m	class:pcm::UncoreCounterState
UncPMMReads	cpucounters.h	/^    uint64 UncPMMReads;$/;"	m	class:pcm::UncoreCounterState
UncPMMWrites	cpucounters.h	/^    uint64 UncPMMWrites;$/;"	m	class:pcm::UncoreCounterState
Uncore	topology.h	/^    Uncore( PCM* m, int32 socketID ) : pcm_( m ), refCore_( nullptr ), socketID_( socketID ) {}$/;"	f	class:pcm::Uncore
Uncore	topology.h	/^class Uncore : public SystemObject$/;"	c	namespace:pcm
UncoreCounterState	cpucounters.h	/^    UncoreCounterState() :$/;"	f	class:pcm::UncoreCounterState
UncoreCounterState	cpucounters.h	/^class UncoreCounterState$/;"	c	namespace:pcm
UncoreEventSelectRegister	types.h	/^struct UncoreEventSelectRegister$/;"	s	namespace:pcm
UncorePMU	cpucounters.h	/^    UncorePMU() {}$/;"	f	class:pcm::UncorePMU
UncorePMU	cpucounters.h	/^    UncorePMU(const HWRegisterPtr & unitControl_,$/;"	f	class:pcm::UncorePMU
UncorePMU	cpucounters.h	/^class UncorePMU$/;"	c	namespace:pcm
UncorePMUVector	cpucounters.h	/^    typedef std::vector<UncorePMU> UncorePMUVector;$/;"	t	class:pcm::ServerPCICFGUncore
UninstallOpenLibSys	winring0/OlsApiInit.h	/^_UninstallOpenLibSys UninstallOpenLibSys = NULL;$/;"	v
UnknownError	cpucounters.h	/^        UnknownError$/;"	e	enum:pcm::PCM::ErrorCode
Unspecified	pcm-sensor-server.cpp	/^    Unspecified = 0,$/;"	e	enum:HeaderType	file:
UnsupportedProcessorException	exceptions/unsupported_processor_exception.hpp	/^class UnsupportedProcessorException: public std::exception$/;"	c
UpdateCounters	cpuasynchcounter.h	/^void * UpdateCounters(void * state)$/;"	f
UpdateThread	cpuasynchcounter.h	/^    pthread_t UpdateThread;$/;"	m	class:AsynchronCounterState
UpdateThread	width_extender.h	/^    std::thread * UpdateThread;$/;"	m	class:pcm::CounterWidthExtender
Url	pcm-sensor-server.cpp	/^    Url = 12,$/;"	e	enum:HeaderType	file:
VERSION	daemon/daemon/common.h	/^static const char VERSION[] = "1.0.5";$/;"	v
VERSION_SIZE	daemon/daemon/common.h	36;"	d
VERTICAL	utils.cpp	453;"	d	file:
VERTICAL	utils.cpp	460;"	d	file:
V_EVENT_NAME	cpucounters.h	/^        V_EVENT_NAME,$/;"	e	enum:pcm::PCM::PerfmonField
Visitor	topology.h	/^class Visitor {$/;"	c	namespace:pcm
WESTMERE_EP	cpucounters.h	/^        WESTMERE_EP = 44,$/;"	e	enum:pcm::PCM::SupportedCPUModels
WESTMERE_EX	cpucounters.h	/^        WESTMERE_EX = 47,$/;"	e	enum:pcm::PCM::SupportedCPUModels
WIDTH_EXTENDER_HEADER_	width_extender.h	17;"	d
WINDRIVER_HEADER	PCM_Win/windriver.h	2;"	d
WINVER	PCM-Lib_Win/targetver.h	28;"	d
WPQ_INS	pcm-latency.cpp	48;"	d	file:
WPQ_OCC	pcm-latency.cpp	47;"	d	file:
WRITE	cpucounters.h	/^        WRITE=1,$/;"	e	enum:pcm::ServerPCICFGUncore::EventPosition
WRITE_RANK_A	cpucounters.h	/^        WRITE_RANK_A=1,$/;"	e	enum:pcm::ServerPCICFGUncore::EventPosition
WRITE_RANK_B	cpucounters.h	/^        WRITE_RANK_B=3,$/;"	e	enum:pcm::ServerPCICFGUncore::EventPosition
WRMSR	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^inline void WRMSR(uint32_t msr, uint64_t value)$/;"	f
W_MSR_PMON_FIXED_CTR	types.h	292;"	d
W_MSR_PMON_FIXED_CTR_CTL	types.h	291;"	d
W_MSR_PMON_GLOBAL_CTL	types.h	290;"	d
WiL	cpucounters.h	/^        WiL = 0x18F,       \/\/ Write Invalidate Line - partial (MMIO write), PL: Not documented in HSX\/IVT$/;"	e	enum:pcm::PCM::PCIeEventCode
WiL	pcm-pcie.h	/^        WiL,$/;"	e	enum:GrantleyPlatform::eventIdx
WiL	pcm-pcie.h	/^        WiL,$/;"	e	enum:PurleyPlatform::eventIdx
WiL_hit	pcm-pcie.h	/^            WiL_hit,$/;"	e	enum:PurleyPlatform::Events
WiL_miss	pcm-pcie.h	/^            WiL_miss,$/;"	e	enum:GrantleyPlatform::Events
WiL_miss	pcm-pcie.h	/^            WiL_miss,$/;"	e	enum:PurleyPlatform::Events
WiL_total	pcm-pcie.h	/^            WiL_total,$/;"	e	enum:GrantleyPlatform::Events
WinPmem	winpmem/winpmem.cpp	/^WinPmem::WinPmem():$/;"	f	class:pcm::WinPmem
WinPmem	winpmem/winpmem.h	/^class WinPmem {$/;"	c	namespace:pcm
Work	threadpool.h	/^    Work() {}$/;"	f	class:pcm::Work
Work	threadpool.h	/^class Work {$/;"	c	namespace:pcm
WorkQueue	threadpool.h	/^    WorkQueue() : tp_( ThreadPool::getInstance() ), workProcessed_(0) {}$/;"	f	class:pcm::WorkQueue
WorkQueue	threadpool.h	/^class WorkQueue {$/;"	c	namespace:pcm
WriteIoPortByte	winring0/OlsApiInit.h	/^_WriteIoPortByte WriteIoPortByte = NULL;$/;"	v
WriteIoPortByteEx	winring0/OlsApiInit.h	/^_WriteIoPortByteEx WriteIoPortByteEx = NULL;$/;"	v
WriteIoPortDword	winring0/OlsApiInit.h	/^_WriteIoPortDword WriteIoPortDword = NULL;$/;"	v
WriteIoPortDwordEx	winring0/OlsApiInit.h	/^_WriteIoPortDwordEx WriteIoPortDwordEx = NULL;$/;"	v
WriteIoPortWord	winring0/OlsApiInit.h	/^_WriteIoPortWord WriteIoPortWord = NULL;$/;"	v
WriteIoPortWordEx	winring0/OlsApiInit.h	/^_WriteIoPortWordEx WriteIoPortWordEx = NULL;$/;"	v
WritePciConfigByte	winring0/OlsApiInit.h	/^_WritePciConfigByte WritePciConfigByte = NULL;$/;"	v
WritePciConfigByteEx	winring0/OlsApiInit.h	/^_WritePciConfigByteEx WritePciConfigByteEx = NULL;$/;"	v
WritePciConfigDword	winring0/OlsApiInit.h	/^_WritePciConfigDword WritePciConfigDword = NULL;$/;"	v
WritePciConfigDwordEx	winring0/OlsApiInit.h	/^_WritePciConfigDwordEx WritePciConfigDwordEx = NULL;$/;"	v
WritePciConfigWord	winring0/OlsApiInit.h	/^_WritePciConfigWord WritePciConfigWord = NULL;$/;"	v
WritePciConfigWordEx	winring0/OlsApiInit.h	/^_WritePciConfigWordEx WritePciConfigWordEx = NULL;$/;"	v
WritePhysicalMemory	winring0/OlsApiInit.h	/^_WritePhysicalMemory WritePhysicalMemory = NULL;$/;"	v
Wrmsr	winring0/OlsApiInit.h	/^_Wrmsr Wrmsr = NULL;$/;"	v
WrmsrPx	winring0/OlsApiInit.h	/^_WrmsrPx WrmsrPx = NULL;$/;"	v
WrmsrTx	winring0/OlsApiInit.h	/^_WrmsrTx WrmsrTx = NULL;$/;"	v
X1	cpucounters.h	/^        X1,$/;"	e	enum:pcm::PCM::PCIeWidthMode
X16	cpucounters.h	/^        X16,$/;"	e	enum:pcm::PCM::PCIeWidthMode
X4	cpucounters.h	/^        X4,$/;"	e	enum:pcm::PCM::PCIeWidthMode
X8	cpucounters.h	/^        X8,$/;"	e	enum:pcm::PCM::PCIeWidthMode
XFF	cpucounters.h	/^        XFF$/;"	e	enum:pcm::PCM::PCIeWidthMode
XML	pcm-sensor-server.cpp	/^    XML,$/;"	e	enum:OutputFormat	file:
XPF_HA_PCI_PMON_BOX_CTL_ADDR	types.h	593;"	d
XPF_HA_PCI_PMON_CTL0_ADDR	types.h	594;"	d
XPF_HA_PCI_PMON_CTL1_ADDR	types.h	595;"	d
XPF_HA_PCI_PMON_CTL2_ADDR	types.h	596;"	d
XPF_HA_PCI_PMON_CTL3_ADDR	types.h	597;"	d
XPF_HA_PCI_PMON_CTR0_ADDR	types.h	598;"	d
XPF_HA_PCI_PMON_CTR1_ADDR	types.h	599;"	d
XPF_HA_PCI_PMON_CTR2_ADDR	types.h	600;"	d
XPF_HA_PCI_PMON_CTR3_ADDR	types.h	601;"	d
XPF_MC_CH_PCI_PMON_BOX_CTL_ADDR	types.h	607;"	d
XPF_MC_CH_PCI_PMON_CTL0_ADDR	types.h	616;"	d
XPF_MC_CH_PCI_PMON_CTL1_ADDR	types.h	615;"	d
XPF_MC_CH_PCI_PMON_CTL2_ADDR	types.h	614;"	d
XPF_MC_CH_PCI_PMON_CTL3_ADDR	types.h	613;"	d
XPF_MC_CH_PCI_PMON_CTR0_ADDR	types.h	638;"	d
XPF_MC_CH_PCI_PMON_CTR1_ADDR	types.h	637;"	d
XPF_MC_CH_PCI_PMON_CTR2_ADDR	types.h	636;"	d
XPF_MC_CH_PCI_PMON_CTR3_ADDR	types.h	635;"	d
XPF_MC_CH_PCI_PMON_FIXED_CTL_ADDR	types.h	612;"	d
XPF_MC_CH_PCI_PMON_FIXED_CTR_ADDR	types.h	634;"	d
XPIRegisterLocation	cpucounters.h	/^    std::vector<std::pair<uint32, uint32> > XPIRegisterLocation; \/\/ (device, function)$/;"	m	class:pcm::ServerPCICFGUncore
_CRT_SECURE_NO_WARNINGS	freegetopt/getopt.cpp	37;"	d	file:
_Cpuid	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_Cpuid) (DWORD index, PDWORD eax, PDWORD ebx, PDWORD ecx, PDWORD edx);$/;"	t
_CpuidPx	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_CpuidPx) (DWORD index, PDWORD eax, PDWORD ebx, PDWORD ecx, PDWORD edx, DWORD_PTR processAffinityMask);$/;"	t
_CpuidTx	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_CpuidTx) (DWORD index, PDWORD eax, PDWORD ebx, PDWORD ecx, PDWORD edx, DWORD_PTR threadAffinityMask);$/;"	t
_DEBUG	MacMSRDriver/PcmMsr/PcmMsr.h	54;"	d
_DEBUG	MacMSRDriver/PcmMsr/PcmMsr.h	56;"	d
_DeinitializeOls	winring0/OlsApiInitDef.h	/^typedef VOID (WINAPI *_DeinitializeOls) ();$/;"	t
_FindPciDeviceByClass	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_FindPciDeviceByClass) (BYTE baseClass, BYTE subClass, BYTE programIf, BYTE index);$/;"	t
_FindPciDeviceById	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_FindPciDeviceById) (WORD vendorId, WORD deviceId, BYTE index);$/;"	t
_GetDllStatus	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_GetDllStatus) ();$/;"	t
_GetDllVersion	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_GetDllVersion) (PBYTE major, PBYTE minor, PBYTE revision, PBYTE release);$/;"	t
_GetDriverType	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_GetDriverType) ();$/;"	t
_GetDriverVersion	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_GetDriverVersion) (PBYTE major, PBYTE minor, PBYTE revision, PBYTE release);$/;"	t
_Hlt	winring0/OlsApiInitDef.h	/^typedef BOOL  (WINAPI *_Hlt) ();$/;"	t
_HltPx	winring0/OlsApiInitDef.h	/^typedef BOOL  (WINAPI *_HltPx)   (DWORD_PTR processAffinityMask);$/;"	t
_HltTx	winring0/OlsApiInitDef.h	/^typedef BOOL  (WINAPI *_HltTx) (DWORD_PTR threadAffinityMask);$/;"	t
_InitializeOls	winring0/OlsApiInitDef.h	/^typedef BOOL (WINAPI *_InitializeOls) ();$/;"	t
_IsCpuid	winring0/OlsApiInitDef.h	/^typedef BOOL (WINAPI *_IsCpuid) ();$/;"	t
_IsMsr	winring0/OlsApiInitDef.h	/^typedef BOOL (WINAPI *_IsMsr) ();$/;"	t
_IsTsc	winring0/OlsApiInitDef.h	/^typedef BOOL (WINAPI *_IsTsc) ();$/;"	t
_Rdmsr	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_Rdmsr) (DWORD index, PDWORD eax, PDWORD edx);$/;"	t
_RdmsrPx	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_RdmsrPx) (DWORD index, PDWORD eax, PDWORD edx, DWORD_PTR processAffinityMask);$/;"	t
_RdmsrTx	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_RdmsrTx) (DWORD index, PDWORD eax, PDWORD edx, DWORD_PTR threadAffinityMask);$/;"	t
_Rdpmc	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_Rdpmc) (DWORD index, PDWORD eax, PDWORD edx);$/;"	t
_RdpmcPx	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_RdpmcPx) (DWORD index, PDWORD eax, PDWORD edx, DWORD_PTR processAffinityMask);$/;"	t
_RdpmcTx	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_RdpmcTx) (DWORD index, PDWORD eax, PDWORD edx, DWORD_PTR threadAffinityMask);$/;"	t
_Rdtsc	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_Rdtsc) (PDWORD eax, PDWORD edx);$/;"	t
_RdtscPx	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_RdtscPx) (PDWORD eax, PDWORD edx, DWORD_PTR processAffinityMask);$/;"	t
_RdtscTx	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_RdtscTx) (PDWORD eax, PDWORD edx, DWORD_PTR threadAffinityMask);$/;"	t
_ReadDmiMemory	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_ReadDmiMemory) (PBYTE buffer, DWORD count, DWORD unitSize);$/;"	t
_ReadIoPortByte	winring0/OlsApiInitDef.h	/^typedef BYTE  (WINAPI *_ReadIoPortByte) (WORD address);$/;"	t
_ReadIoPortByteEx	winring0/OlsApiInitDef.h	/^typedef BOOL (WINAPI *_ReadIoPortByteEx) (WORD address, PBYTE value);$/;"	t
_ReadIoPortDword	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_ReadIoPortDword) (WORD address);$/;"	t
_ReadIoPortDwordEx	winring0/OlsApiInitDef.h	/^typedef BOOL (WINAPI *_ReadIoPortDwordEx) (WORD address, PDWORD value);$/;"	t
_ReadIoPortWord	winring0/OlsApiInitDef.h	/^typedef WORD  (WINAPI *_ReadIoPortWord) (WORD address);$/;"	t
_ReadIoPortWordEx	winring0/OlsApiInitDef.h	/^typedef BOOL (WINAPI *_ReadIoPortWordEx) (WORD address, PWORD value);$/;"	t
_ReadPciConfigByte	winring0/OlsApiInitDef.h	/^typedef BYTE  (WINAPI *_ReadPciConfigByte) (DWORD pciAddress, BYTE regAddress);$/;"	t
_ReadPciConfigByteEx	winring0/OlsApiInitDef.h	/^typedef BOOL (WINAPI *_ReadPciConfigByteEx) (DWORD pciAddress, DWORD regAddress, PBYTE value);$/;"	t
_ReadPciConfigDword	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_ReadPciConfigDword) (DWORD pciAddress, BYTE regAddress);$/;"	t
_ReadPciConfigDwordEx	winring0/OlsApiInitDef.h	/^typedef BOOL (WINAPI *_ReadPciConfigDwordEx) (DWORD pciAddress, DWORD regAddress, PDWORD value);$/;"	t
_ReadPciConfigWord	winring0/OlsApiInitDef.h	/^typedef WORD  (WINAPI *_ReadPciConfigWord) (DWORD pciAddress, BYTE regAddress);$/;"	t
_ReadPciConfigWordEx	winring0/OlsApiInitDef.h	/^typedef BOOL (WINAPI *_ReadPciConfigWordEx) (DWORD pciAddress, DWORD regAddress, PWORD value);$/;"	t
_ReadPhysicalMemory	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_ReadPhysicalMemory) (DWORD_PTR address, PBYTE buffer, DWORD count, DWORD unitSize);$/;"	t
_SetPciMaxBusIndex	winring0/OlsApiInitDef.h	/^typedef VOID (WINAPI *_SetPciMaxBusIndex) (BYTE max);$/;"	t
_WIN32_IE	PCM-Lib_Win/targetver.h	40;"	d
_WIN32_WINDOWS	PCM-Lib_Win/targetver.h	36;"	d
_WIN32_WINNT	PCM-Core_Win/stdafx.h	9;"	d
_WIN32_WINNT	PCM-IIO_Win/stdafx.h	9;"	d
_WIN32_WINNT	PCM-LSPCI_Win/stdafx.h	9;"	d
_WIN32_WINNT	PCM-Latency_Win/stdafx.h	9;"	d
_WIN32_WINNT	PCM-Lib_Win/targetver.h	32;"	d
_WIN32_WINNT	PCM-MMIO_Win/stdafx.h	9;"	d
_WIN32_WINNT	PCM-MSR_Win/stdafx.h	9;"	d
_WIN32_WINNT	PCM-Memory_Win/stdafx.h	9;"	d
_WIN32_WINNT	PCM-NUMA_Win/stdafx.h	9;"	d
_WIN32_WINNT	PCM-PCICFG_Win/stdafx.h	9;"	d
_WIN32_WINNT	PCM-PCIE_Win/stdafx.h	9;"	d
_WIN32_WINNT	PCM-Power_Win/stdafx.h	9;"	d
_WIN32_WINNT	PCM-Raw_Win/stdafx.h	9;"	d
_WIN32_WINNT	PCM-TSX_Win/stdafx.h	9;"	d
_WIN32_WINNT	PCM_Win/stdafx.h	22;"	d
_WriteIoPortByte	winring0/OlsApiInitDef.h	/^typedef VOID (WINAPI *_WriteIoPortByte) (WORD address, BYTE value);$/;"	t
_WriteIoPortByteEx	winring0/OlsApiInitDef.h	/^typedef BOOL (WINAPI *_WriteIoPortByteEx) (WORD address, BYTE value);$/;"	t
_WriteIoPortDword	winring0/OlsApiInitDef.h	/^typedef VOID (WINAPI *_WriteIoPortDword) (WORD address, DWORD value);$/;"	t
_WriteIoPortDwordEx	winring0/OlsApiInitDef.h	/^typedef BOOL (WINAPI *_WriteIoPortDwordEx) (WORD address, DWORD value);$/;"	t
_WriteIoPortWord	winring0/OlsApiInitDef.h	/^typedef VOID (WINAPI *_WriteIoPortWord) (WORD address, WORD value);$/;"	t
_WriteIoPortWordEx	winring0/OlsApiInitDef.h	/^typedef BOOL (WINAPI *_WriteIoPortWordEx) (WORD address, WORD value);$/;"	t
_WritePciConfigByte	winring0/OlsApiInitDef.h	/^typedef VOID (WINAPI *_WritePciConfigByte) (DWORD pciAddress, BYTE regAddress, BYTE value);$/;"	t
_WritePciConfigByteEx	winring0/OlsApiInitDef.h	/^typedef BOOL (WINAPI *_WritePciConfigByteEx) (DWORD pciAddress, DWORD regAddress, BYTE value);$/;"	t
_WritePciConfigDword	winring0/OlsApiInitDef.h	/^typedef VOID (WINAPI *_WritePciConfigDword) (DWORD pciAddress, BYTE regAddress, DWORD value);$/;"	t
_WritePciConfigDwordEx	winring0/OlsApiInitDef.h	/^typedef BOOL (WINAPI *_WritePciConfigDwordEx) (DWORD pciAddress, DWORD regAddress, DWORD value);$/;"	t
_WritePciConfigWord	winring0/OlsApiInitDef.h	/^typedef VOID (WINAPI *_WritePciConfigWord) (DWORD pciAddress, BYTE regAddress, WORD value);$/;"	t
_WritePciConfigWordEx	winring0/OlsApiInitDef.h	/^typedef BOOL (WINAPI *_WritePciConfigWordEx) (DWORD pciAddress, DWORD regAddress, WORD value);$/;"	t
_WritePhysicalMemory	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_WritePhysicalMemory) (DWORD_PTR address, PBYTE buffer, DWORD count, DWORD unitSize);$/;"	t
_Wrmsr	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_Wrmsr) (DWORD index, DWORD eax, DWORD edx);$/;"	t
_WrmsrPx	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_WrmsrPx) (DWORD index, DWORD eax, DWORD edx, DWORD_PTR processAffinityMask);$/;"	t
_WrmsrTx	winring0/OlsApiInitDef.h	/^typedef DWORD (WINAPI *_WrmsrTx) (DWORD index, DWORD eax, DWORD edx, DWORD_PTR threadAffinityMask);$/;"	t
__PRETTY_FUNCTION__	debug.h	42;"	d
_tmain	PCM-Service_Win/PCMService.cpp	/^int _tmain(int argc, _TCHAR* argv[])$/;"	f
a_data	pcm-iio.cpp	/^string a_data (string init, struct data d) {$/;"	f
a_header_footer	pcm-iio.cpp	/^string a_header_footer (string init, string name)$/;"	f
a_title	pcm-iio.cpp	/^string a_title (const string &init, const string &name) {$/;"	f
activeRelativeFrequency	daemon/daemon/common.h	/^		double activeRelativeFrequency = 0.;$/;"	m	struct:PCMDaemon::PCMCoreCounter
addAggregator	pcm-sensor-server.cpp	/^    void addAggregator( std::shared_ptr<Aggregator> agp ) {$/;"	f	class:HTTPServer
addBody	pcm-sensor-server.cpp	/^    void addBody( std::string const& body ) {$/;"	f	class:HTTPMessage
addCore	topology.h	/^    void addCore( Core* c ) {$/;"	f	class:pcm::Socket
addEvent	pcm-raw.cpp	/^bool addEvent(string eventStr)$/;"	f
addHeader	pcm-sensor-server.cpp	/^    void addHeader( HTTPHeader hh ) {$/;"	f	class:HTTPMessage
addHeader	pcm-sensor-server.cpp	/^    void addHeader( std::string const & name, std::string const & value ) {$/;"	f	class:HTTPMessage
addHyperThreadInfo	topology.h	/^    void addHyperThreadInfo( int32 threadID, int32 osID ) {$/;"	f	class:pcm::Core
addMSRHandle	topology.h	/^    void addMSRHandle( std::shared_ptr<SafeMsrHandle> handle ) {$/;"	f	class:pcm::HyperThread
addMSRHandleToOSThread	topology.h	/^    void addMSRHandleToOSThread( std::shared_ptr<SafeMsrHandle> handle, uint32 osID )$/;"	f	class:pcm::SystemRoot
addSocket	topology.h	/^    void addSocket( int32 apic_id, int32 logical_id ) {$/;"	f	class:pcm::SystemRoot
addThread	threadpool.h	/^    void addThread() {$/;"	f	class:pcm::ThreadPool
addThread	topology.h	/^    void addThread( int32 osID, TopologyEntry& te ) {$/;"	f	class:pcm::SystemRoot
addToHierarchy	pcm-sensor-server.cpp	/^    void addToHierarchy( std::string const& s ) {$/;"	f	class:PrometheusPrinter	file:
addWork	threadpool.h	/^    void addWork( Work* w ) {$/;"	f	class:pcm::ThreadPool
addWork	threadpool.h	/^    void addWork( Work* w ) {$/;"	f	class:pcm::WorkQueue
affinity	cpucounters.cpp	/^    ThreadGroupTempAffinity affinity;$/;"	m	class:pcm::TemporalThreadAffinity	file:
after	pcm-pcie.h	/^        after,$/;"	e	enum:LegacyPlatform::__anon9
after_sstate	realtime.cpp	/^SystemCounterState before_sstate, after_sstate;$/;"	v
after_time	realtime.cpp	/^double before_time, after_time;$/;"	v
agVectorMutex_	pcm-sensor-server.cpp	/^    std::mutex agVectorMutex_;$/;"	m	class:HTTPServer	file:
agVector_	pcm-sensor-server.cpp	/^    std::vector<std::shared_ptr<Aggregator>> agVector_;$/;"	m	class:HTTPServer	file:
aggPair_	pcm-sensor-server.cpp	/^    std::pair<std::shared_ptr<Aggregator>,std::shared_ptr<Aggregator>> aggPair_;$/;"	m	class:JSONPrinter	file:
aggPair_	pcm-sensor-server.cpp	/^    std::pair<std::shared_ptr<Aggregator>,std::shared_ptr<Aggregator>> aggPair_;$/;"	m	class:PrometheusPrinter	file:
alias	dashboard.cpp	/^    std::string alias;$/;"	m	class:pcm::InfluxDBTarget	file:
allPMUConfigs	pcm-raw.cpp	/^PCM::RawPMUConfigs allPMUConfigs;$/;"	v
all_fib	realtime.cpp	/^long long int all_fib = 0;$/;"	v
all_flag	pmu-query.py	/^            all_flag=True$/;"	v
all_flag	pmu-query.py	/^all_flag = False$/;"	v
allowMultipleInstances	cpucounters.h	/^    void allowMultipleInstances()$/;"	f	class:pcm::PCM
allow_multiple_instances	cpucounters.h	/^    bool allow_multiple_instances;$/;"	m	class:pcm::PCM
allowedSubscribers_	daemon/daemon/daemon.h	/^		std::vector<std::string> allowedSubscribers_;$/;"	m	class:PCMDaemon::Daemon
any_thread	types.h	/^            uint64 any_thread : 1;$/;"	m	struct:pcm::EventSelectRegister::__anon10::__anon11
any_thread0	types.h	/^            uint64 any_thread0 : 1;$/;"	m	struct:pcm::FixedEventControlRegister::__anon12::__anon13
any_thread1	types.h	/^            uint64 any_thread1 : 1;$/;"	m	struct:pcm::FixedEventControlRegister::__anon12::__anon13
any_thread2	types.h	/^            uint64 any_thread2 : 1;$/;"	m	struct:pcm::FixedEventControlRegister::__anon12::__anon13
apicID_	topology.h	/^    int32   apicID_;$/;"	m	class:pcm::Socket
apicId	topology.h	/^    int32 apicId() const {$/;"	f	class:pcm::Socket
apic_int	types.h	/^            uint64 apic_int : 1;$/;"	m	struct:pcm::EventSelectRegister::__anon10::__anon11
arguments_	pcm-sensor-server.cpp	/^    std::vector<std::pair<std::string,std::string>> arguments_;$/;"	m	struct:URL	file:
argv_index	freegetopt/getopt.cpp	/^static int argv_index = 0;             \/* Option we're checking *\/$/;"	v	file:
argv_index2	freegetopt/getopt.cpp	/^static int argv_index2 = 0;            \/* Option argument we're checking *\/$/;"	v	file:
array	cpucounters.cpp	/^    int array[4];$/;"	m	union:pcm::PCM_CPUID_INFO	file:
backup_ofile	cpucounters.h	/^    std::streambuf * backup_ofile; \/\/ backup of original output = cout$/;"	m	class:pcm::PCM
baseAddress	types.h	/^    unsigned long long baseAddress;$/;"	m	struct:pcm::MCFGRecord
baseTicksForIpcHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable baseTicksForIpcHash_;$/;"	m	class:PCMServiceNS::MeasureThread
baseTicksForRelFreqHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable baseTicksForRelFreqHash_;$/;"	m	class:PCMServiceNS::MeasureThread
base_addr	pci.h	/^    uint64 base_addr;$/;"	m	class:pcm::PciHandleM
base_addr	pci.h	/^    uint64 base_addr;$/;"	m	class:pcm::PciHandleMM
basic_socketbuf	pcm-sensor-server.cpp	/^    basic_socketbuf(): socketFD_(0) {$/;"	f	class:basic_socketbuf
basic_socketbuf	pcm-sensor-server.cpp	/^class basic_socketbuf : public std::basic_streambuf<CharT> {$/;"	c	file:
basic_socketstream	pcm-sensor-server.cpp	/^    basic_socketstream( int socketFD, SSL* ssl ) : stream_type( &socketBuffer_ ) {$/;"	f	class:basic_socketstream
basic_socketstream	pcm-sensor-server.cpp	/^    basic_socketstream() : stream_type( &socketBuffer_ ) {}$/;"	f	class:basic_socketstream
basic_socketstream	pcm-sensor-server.cpp	/^class basic_socketstream : public std::basic_iostream<CharT, Traits> {$/;"	c	file:
bcmd	types.h	/^            uint64 bcmd : 3;$/;"	m	struct:pcm::BecktonUncorePMUZDPCTLFVCRegister::__anon16::__anon17
bcmd	types.h	/^            uint64 bcmd : 3;$/;"	m	struct:pcm::BecktonUncorePMUZDPCTLFVCRegister::__anon16::__anon18
bdf	lspci.h	/^    struct bdf bdf;$/;"	m	struct:pcm::pci	typeref:struct:pcm::pci::bdf
bdf	lspci.h	/^struct bdf {$/;"	s	namespace:pcm
before	pcm-pcie.h	/^        before,$/;"	e	enum:LegacyPlatform::__anon9
before_sstate	realtime.cpp	/^SystemCounterState before_sstate, after_sstate;$/;"	v
before_time	realtime.cpp	/^double before_time, after_time;$/;"	v
blocked	cpucounters.h	/^    bool blocked;              \/\/ track if time-driven counter update is running or not: PCM is blocked$/;"	m	class:pcm::PCM
body	pcm-sensor-server.cpp	/^    std::string const & body() const {$/;"	f	class:HTTPMessage::std
body_	pcm-sensor-server.cpp	/^    std::string body_;$/;"	m	class:HTTPMessage	file:
buildTopology	MacMSRDriver/MSRAccessor.cpp	/^int32_t MSRAccessor::buildTopology(uint32_t num_cores ,void* pTopos){$/;"	f	class:MSRAccessor
buildTopology	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^IOReturn PcmMsrDriverClassName::buildTopology(topologyEntry* odata, uint32_t input_num_cores){$/;"	f	class:PcmMsrDriverClassName
buildTopology	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::buildTopology(topologyEntry* data, size_t output_size)$/;"	f	class:PcmMsrClientClassName
buildTopology	msr.h	/^    int32 buildTopology(uint32 num_cores, void * p)$/;"	f	class:pcm::SafeMsrHandle
build_bit	cpucounters.cpp	/^uint64 build_bit(uint32 beg, uint32 end)$/;"	f	namespace:pcm
build_bit_ui	cpucounters.cpp	/^uint32 build_bit_ui(uint32 beg, uint32 end)$/;"	f	namespace:pcm
build_core_register	pcm-latency.cpp	/^EventSelectRegister build_core_register(uint64 reg_used, uint64 value, uint64 usr, uint64 os, uint64 enable, uint64 umask, uint64 event_select, uint64 edge)$/;"	f
build_display	pcm-iio.cpp	/^vector<string> build_display(vector<struct iio_skx> iio_skx_v, vector<struct counter> &ctrs, vector<int> skt_list, vector<int> stack_list, const PCIDB & pciDB)$/;"	f
build_event	pcm-core.cpp	/^void build_event(const char * argv, EventSelectRegister *reg, int idx)$/;"	f
build_line	pcm-iio.cpp	/^string build_line(string init, string name, bool last_char = true, char this_char = '_')$/;"	f
build_pci_header	pcm-iio.cpp	/^string build_pci_header(const PCIDB & pciDB, uint32_t column_width, struct pci p, int part = -1, uint32_t level = 0)$/;"	f
build_registers	pcm-latency.cpp	/^void build_registers(PCM *m, PCM::ExtendedCustomCoreEventDescription conf, bool enable_pmm, bool \/*enable_verbose*\/)$/;"	f
bus	WinMSRDriver/Win7/msrstruct.h	/^    ULONG bus, dev, func, reg, bytes;$/;"	m	struct:PCICFG_Request
bus	pci.h	/^    uint32 bus;$/;"	m	class:pcm::PciHandle
bus	pci.h	/^    uint32 bus;$/;"	m	class:pcm::PciHandleM
bus	pci.h	/^    uint32 bus;$/;"	m	class:pcm::PciHandleMM
busNumber	cpucounters.h	/^        std::string busNumber;$/;"	m	struct:pcm::PCM::SimplePCIeDevInfo
busno	lspci.h	/^        uint8_t busno; \/* holding busno for each IIO stack *\/$/;"	m	struct:pcm::iio_skx::__anon38
busno	lspci.h	/^    uint8_t busno;$/;"	m	struct:pcm::bdf
bwNames	pcm-pcie.h	/^    vector<string> filterNames, bwNames;$/;"	m	class:IPlatform
bytes	WinMSRDriver/Win7/msrstruct.h	/^    ULONG bus, dev, func, reg, bytes;$/;"	m	struct:PCICFG_Request
bytes	daemon/daemon/common.h	/^		uint64 bytes;$/;"	m	struct:PCMDaemon::PCMQPILinkCounter
calculate_bandwidth	pcm-memory.cpp	/^void calculate_bandwidth(PCM *m, const ServerUncoreCounterState uncState1[], const ServerUncoreCounterState uncState2[], const uint64 elapsedTime, const bool csv, bool & csvheader, uint32 no_columns, const bool PMM, const bool show_channel_output, const bool PMMMixedMode)$/;"	f
calculate_bandwidth_rank	pcm-memory.cpp	/^void calculate_bandwidth_rank(PCM *m, const ServerUncoreCounterState uncState1[], const ServerUncoreCounterState uncState2[], const uint64 elapsedTime, const bool \/*csv*\/, bool & \/*csvheader*\/, const uint32 no_columns, const int rankA, const int rankB)$/;"	f
calibratedSleep	utils.cpp	/^int calibratedSleep(const double delay, const char* sysCmd, const MainLoop& mainLoop, PCM* m)$/;"	f	namespace:pcm
callbackList_	pcm-sensor-server.cpp	/^    std::vector<http_callback>               callbackList_;$/;"	m	class:HTTPServer	file:
callbackList_	pcm-sensor-server.cpp	/^    std::vector<http_callback> const & callbackList_;$/;"	m	class:HTTPConnection::std	file:
canBeAList_	pcm-sensor-server.cpp	/^        bool canBeAList_;$/;"	m	struct:HTTPHeaderProperties::HTTPHeaderProperty	file:
canBeWeighted_	pcm-sensor-server.cpp	/^        bool canBeWeighted_;$/;"	m	struct:HTTPHeaderProperties::HTTPHeaderProperty	file:
canUsePerf	cpucounters.h	/^    bool canUsePerf;$/;"	m	class:pcm::PCM
cboPMUs	cpucounters.h	/^    std::vector<std::vector<UncorePMU> > cboPMUs;$/;"	m	class:pcm::PCM
ccsFutures_	topology.h	/^    std::vector<std::future<CoreCounterState>> ccsFutures_;$/;"	m	class:pcm::Aggregator
ccsVector_	topology.h	/^    std::vector<CoreCounterState> ccsVector_;$/;"	m	class:pcm::Aggregator
certificateFile_	pcm-sensor-server.cpp	/^    std::string certificateFile_;$/;"	m	class:HTTPSServer	file:
ch_mask	types.h	/^            uint64 ch_mask : 8;$/;"	m	struct:pcm::IIOPMUCNTCTLRegister::__anon21::__anon22
channels	daemon/daemon/common.h	/^		PCMMemoryChannelCounter channels[MEMORY_MAX_IMC_CHANNELS];$/;"	m	struct:PCMDaemon::PCMMemorySocketCounter
checkAccessAndProgramPCM	daemon/daemon/daemon.cpp	/^	void Daemon::checkAccessAndProgramPCM()$/;"	f	class:PCMDaemon::Daemon
checkActiveAndOpened	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::checkActiveAndOpened (const char* memberFunction)$/;"	f	class:PcmMsrClientClassName
checkAlignment	daemon/daemon/test/main.cpp	/^void checkAlignment(char const * debugMessage, void* ptr)$/;"	f
checkCustomCoreProgramming	cpucounters.cpp	/^uint32 PCM::checkCustomCoreProgramming(std::shared_ptr<SafeMsrHandle> msr)$/;"	f	class:pcm::PCM
checkModel	cpucounters.cpp	/^bool PCM::checkModel()$/;"	f	class:pcm::PCM
check_status	pcm-latency.cpp	/^void check_status(PCM *m, PCM::ErrorCode status)$/;"	f
checked_uint64	utils.h	/^    checked_uint64() : data(0), overflows(0) {}$/;"	f	class:pcm::checked_uint64
checked_uint64	utils.h	/^    checked_uint64(const uint64 d, const uint64 o) : data(d), overflows(o) {}$/;"	f	class:pcm::checked_uint64
checked_uint64	utils.h	/^class checked_uint64 \/\/ uint64 with checking for overflows when computing differences$/;"	c	namespace:pcm
checksum	types.h	/^    unsigned char checksum;$/;"	m	struct:pcm::MCFGHeader
child_pci_devs	lspci.h	/^            std::vector<struct pci> child_pci_devs; \/* Contain child switch and end-point devices *\/$/;"	m	struct:pcm::iio_skx::__anon38::__anon39
choose	utils.h	/^inline void choose(const CsvOutputType outputType, H1 h1Func, H2 h2Func, D dataFunc)$/;"	f	namespace:pcm
cleanup	cpucounters.cpp	/^void PCM::cleanup()$/;"	f	class:pcm::PCM
cleanup	cpucounters.cpp	/^void UncorePMU::cleanup()$/;"	f	class:pcm::UncorePMU
cleanup	daemon/daemon/daemon.cpp	/^	void Daemon::cleanup()$/;"	f	class:PCMDaemon::Daemon
cleanup	pcm-pcie.h	/^void LegacyPlatform::cleanup()$/;"	f	class:LegacyPlatform
cleanup	resctrl.cpp	/^    void Resctrl::cleanup()$/;"	f	class:pcm::Resctrl
cleanupMemTest	cpucounters.cpp	/^void ServerPCICFGUncore::cleanupMemTest(const ServerPCICFGUncore::MemTestParam & param)$/;"	f	class:pcm::ServerPCICFGUncore
cleanupPMU	cpucounters.cpp	/^void PCM::cleanupPMU()$/;"	f	class:pcm::PCM
cleanupPMUs	cpucounters.cpp	/^void ServerPCICFGUncore::cleanupPMUs()$/;"	f	class:pcm::ServerPCICFGUncore
cleanupQPIHandles	cpucounters.cpp	/^void ServerPCICFGUncore::cleanupQPIHandles()$/;"	f	class:pcm::ServerPCICFGUncore
cleanupRDT	cpucounters.cpp	/^void PCM::cleanupRDT()$/;"	f	class:pcm::PCM
cleanupUncorePMUs	cpucounters.cpp	/^void PCM::cleanupUncorePMUs()$/;"	f	class:pcm::PCM
clientAddress_	pcm-sensor-server.cpp	/^    struct sockaddr_in clientAddress_;$/;"	m	class:HTTPConnection	typeref:struct:HTTPConnection::sockaddr_in	file:
clientBW	cpucounters.h	/^    std::shared_ptr<ClientBW> clientBW;$/;"	m	class:pcm::PCM
clientBW	width_extender.h	/^        std::shared_ptr<ClientBW> clientBW;$/;"	m	struct:pcm::CounterWidthExtender::ClientImcReadsCounter
clientBW	width_extender.h	/^        std::shared_ptr<ClientBW> clientBW;$/;"	m	struct:pcm::CounterWidthExtender::ClientImcWritesCounter
clientBW	width_extender.h	/^        std::shared_ptr<ClientBW> clientBW;$/;"	m	struct:pcm::CounterWidthExtender::ClientIoRequestsCounter
clientClose	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::clientClose(void)$/;"	f	class:PcmMsrClientClassName
clientImcReads	cpucounters.h	/^    std::shared_ptr<CounterWidthExtender> clientImcReads;$/;"	m	class:pcm::PCM
clientImcWrites	cpucounters.h	/^    std::shared_ptr<CounterWidthExtender> clientImcWrites;$/;"	m	class:pcm::PCM
clientIoRequests	cpucounters.h	/^    std::shared_ptr<CounterWidthExtender> clientIoRequests;$/;"	m	class:pcm::PCM
close	cpucounters.cpp	/^    void close()$/;"	f	class:pcm::PerfVirtualControlRegister	file:
close	pcm-sensor-server.cpp	/^    void close() {$/;"	f	class:HTTPConnection
close	pcm-sensor-server.cpp	/^    void close() {$/;"	f	class:basic_socketstream
closeConnection	MacMSRDriver/MSRAccessor.cpp	/^void MSRAccessor::closeConnection(){$/;"	f	class:MSRAccessor
closeMSRClient	MacMSRDriver/DriverInterface.c	/^kern_return_t closeMSRClient(io_connect_t connect)$/;"	f
closeUserClient	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::closeUserClient(void)$/;"	f	class:PcmMsrClientClassName
cmask	types.h	/^            uint64 cmask : 8;$/;"	m	struct:pcm::EventSelectRegister::__anon10::__anon11
cmask	types.h	/^            uint64 cmask : 8;$/;"	m	struct:pcm::UncoreEventSelectRegister::__anon14::__anon15
collect_afterstate_core	pcm-latency.cpp	/^void collect_afterstate_core(PCM *m)$/;"	f
collect_afterstate_uncore	pcm-latency.cpp	/^void collect_afterstate_uncore(PCM *m)$/;"	f
collect_beforestate_core	pcm-latency.cpp	/^void collect_beforestate_core(PCM *m)$/;"	f
collect_beforestate_uncore	pcm-latency.cpp	/^void collect_beforestate_uncore(PCM *m)$/;"	f
collect_data	pcm-iio.cpp	/^void collect_data(PCM *m, vector<struct iio_skx> iio_skx_v, vector<struct counter> &ctrs)$/;"	f
collect_data	pcm-latency.cpp	/^void collect_data(PCM *m, bool enable_pmm, bool enable_verbose, int delay_ms, MainLoop & mainLoop)$/;"	f
collectionInformation_	PCM-Service_Win/PCMService.h	/^        MeasureThread(System::Diagnostics::EventLog^ log, int sampleRate, CollectionInformation^ collectionInformation) : log_(log), sampleRate_(sampleRate), collectionInformation_(collectionInformation)$/;"	f	class:PCMServiceNS::MeasureThread
collectionInformation_	PCM-Service_Win/PCMService.h	/^        const CollectionInformation^ collectionInformation_;$/;"	m	class:PCMServiceNS::MeasureThread
collectionTimeAfter_	daemon/daemon/daemon.h	/^		uint64 collectionTimeBefore_, collectionTimeAfter_;$/;"	m	class:PCMDaemon::Daemon
collectionTimeBefore_	daemon/daemon/daemon.h	/^		uint64 collectionTimeBefore_, collectionTimeAfter_;$/;"	m	class:PCMDaemon::Daemon
combine_stack_name_and_counter_names	pcm-iio.cpp	/^vector<string> combine_stack_name_and_counter_names(string stack_name)$/;"	f
components	PCM-Service_Win/PCMInstaller.h	/^		System::ComponentModel::Container ^components;$/;"	m	class:PMUService::ProjectInstaller
components	PCM-Service_Win/PCMService.h	/^        System::ComponentModel::Container ^components;$/;"	m	class:PCMServiceNS::PCMService
compressLWSAndRemoveCR	pcm-sensor-server.cpp	/^std::string& compressLWSAndRemoveCR( std::string& line ) {$/;"	f
computeNominalFrequency	cpucounters.cpp	/^void PCM::computeNominalFrequency()$/;"	f	class:pcm::PCM
computeQPISpeed	cpucounters.cpp	/^uint64 ServerPCICFGUncore::computeQPISpeed(const uint32 core_nr, const int cpumodel)$/;"	f	class:pcm::ServerPCICFGUncore
computeQPISpeedBeckton	cpucounters.cpp	/^void PCM::computeQPISpeedBeckton(int core_nr)$/;"	f	class:pcm::PCM
condVar	cpucounters.cpp	/^    std::condition_variable condVar;$/;"	m	class:pcm::CoreTaskQueue	file:
conf	pcm-core.cpp	/^	PCM::ExtendedCustomCoreEventDescription conf;$/;"	v
connect	MacMSRDriver/MSRAccessor.h	/^    io_connect_t connect;$/;"	m	class:MSRAccessor
connect	daemon/client/client.cpp	/^	void Client::connect()$/;"	f	class:PCMDaemon::Client
controlReg	cpucounters.cpp	/^    std::shared_ptr<PerfVirtualControlRegister> controlReg;$/;"	m	class:pcm::PerfVirtualCounterRegister	file:
controlRegs	cpucounters.cpp	/^    std::array<std::shared_ptr<PerfVirtualControlRegister>, 4> controlRegs;$/;"	m	class:pcm::PerfVirtualFilterRegister	file:
convertUnknownToInt	cpucounters.cpp	/^int convertUnknownToInt(size_t size, char* value)$/;"	f	namespace:pcm
core	PCM-Service_Win/PCMService.h	/^        bool core;$/;"	m	struct:PCMServiceNS::CollectionInformation
core	daemon/daemon/common.h	/^		PCMCore core;$/;"	m	struct:PCMDaemon::SharedPCMCounters
core	pcm-latency.cpp	/^    vector<struct core_info> core;$/;"	m	struct:res_core	file:
coreCStateMsr	cpucounters.h	/^    uint64 * coreCStateMsr;    \/\/ MSR addresses of core C-state free-running counters$/;"	m	class:pcm::PCM
coreCounterState	topology.h	/^    CoreCounterState coreCounterState() const {$/;"	f	class:pcm::Core
coreCounterState	topology.h	/^    CoreCounterState coreCounterState() const {$/;"	f	class:pcm::HyperThread
coreCounterStates	topology.h	/^    std::vector<CoreCounterState>const & coreCounterStates( void ) const {$/;"	f	class:pcm::Aggregator::std
coreEventDesc	cpucounters.h	/^    CustomCoreEventDescription coreEventDesc[PERF_MAX_CUSTOM_COUNTERS];$/;"	m	class:pcm::PCM
coreID	topology.h	/^    int32 coreID() const {$/;"	f	class:pcm::Core
coreID_	topology.h	/^    int32                     coreID_;$/;"	m	class:pcm::Core
coreId	daemon/daemon/common.h	/^		uint64 coreId = 0;$/;"	m	struct:PCMDaemon::PCMCoreCounter
coreStatesAfter_	daemon/daemon/daemon.h	/^		std::vector<CoreCounterState> coreStatesBefore_, coreStatesAfter_;$/;"	m	class:PCMDaemon::Daemon
coreStatesBefore_	daemon/daemon/daemon.h	/^		std::vector<CoreCounterState> coreStatesBefore_, coreStatesAfter_;$/;"	m	class:PCMDaemon::Daemon
coreTaskQueues	cpucounters.h	/^    std::vector<std::shared_ptr<CoreTaskQueue> > coreTaskQueues;$/;"	m	class:pcm::PCM
core_events	pmu-query.py	/^        core_events=json.load(json_core_data)$/;"	v
core_events	pmu-query.py	/^core_events=[]$/;"	v
core_fixed_counter_num_max	cpucounters.h	/^    uint32 core_fixed_counter_num_max;$/;"	m	class:pcm::PCM
core_fixed_counter_num_used	cpucounters.h	/^    uint32 core_fixed_counter_num_used;$/;"	m	class:pcm::PCM
core_fixed_counter_width	cpucounters.h	/^    uint32 core_fixed_counter_width;$/;"	m	class:pcm::PCM
core_gen_counter_num_max	cpucounters.h	/^    uint32 core_gen_counter_num_max;$/;"	m	class:pcm::PCM
core_gen_counter_num_used	cpucounters.h	/^    uint32 core_gen_counter_num_used;$/;"	m	class:pcm::PCM
core_gen_counter_width	cpucounters.h	/^    uint32 core_gen_counter_width;$/;"	m	class:pcm::PCM
core_id	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    uint32_t core_id;$/;"	m	struct:__anon26
core_id	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    uint32_t core_id;$/;"	m	struct:__anon27
core_id	WinMSRDriver/Win7/msrstruct.h	/^    int core_id;$/;"	m	struct:MSR_Request
core_id	cpucounters.h	/^    int32 core_id;$/;"	m	struct:pcm::TopologyEntry
core_id	pcm-latency.cpp	/^    int core_id;$/;"	m	struct:core_info	file:
core_info	pcm-latency.cpp	/^    core_info() : core_id(0), socket(0), thread(0), latency(0.), occ_rd(0.), insert_rd(0.) {}$/;"	f	struct:core_info
core_info	pcm-latency.cpp	/^struct core_info$/;"	s	file:
core_latency	pcm-latency.cpp	/^} core_latency[10];$/;"	v	typeref:struct:res_core
core_path	pmu-query.py	/^                core_path = model['Filename']$/;"	v
core_path	pmu-query.py	/^    core_path = ''$/;"	v
cores	daemon/daemon/common.h	/^		PCMCoreCounter cores[MAX_CPU_CORES];$/;"	m	struct:PCMDaemon::PCMCore
cores	topology.h	/^    std::vector<Core*> const & cores( void ) const {$/;"	f	class:pcm::Socket::std
cores_	topology.h	/^    std::vector<Core*> cores_;$/;"	m	class:pcm::Socket
count_mode	types.h	/^            uint64 count_mode : 2;$/;"	m	struct:pcm::BecktonUncorePMUCNTCTLRegister::__anon19::__anon20
counter	lspci.h	/^struct counter {$/;"	s	namespace:pcm
counterControl	cpucounters.h	/^    HWRegisterPtr counterControl[4];$/;"	m	class:pcm::UncorePMU
counterValue	cpucounters.h	/^    HWRegisterPtr counterValue[4];$/;"	m	class:pcm::UncorePMU
counter_width	width_extender.h	/^    uint64 counter_width;$/;"	m	class:pcm::CounterWidthExtender
counters	realtime.cpp	/^AsynchronCounterState counters;$/;"	v
countersHaveUpdated	daemon/client/client.cpp	/^	bool Client::countersHaveUpdated()$/;"	f	class:PCMDaemon::Client
cpuGetTopoData	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^void cpuGetTopoData(void* pTopos){$/;"	f
cpuReadMSR	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^void cpuReadMSR(void* pIData){$/;"	f
cpuWriteMSR	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^void cpuWriteMSR(void* pIDatas){$/;"	f
cpu_family	cpucounters.h	/^    int32 cpu_family;$/;"	m	class:pcm::PCM
cpu_id	msr.h	/^    uint32 cpu_id;$/;"	m	class:pcm::MsrHandle
cpu_microcode_level	cpucounters.h	/^    int64 cpu_microcode_level;$/;"	m	class:pcm::PCM
cpu_model	cpucounters.h	/^    int32 cpu_model;$/;"	m	class:pcm::PCM
cpu_model	cpucounters.h	/^    int32 cpu_model;$/;"	m	class:pcm::ServerPCICFGUncore
cpu_num	MacMSRDriver/MSRKernel.h	/^    uint32_t cpu_num;$/;"	m	struct:__anon29
cpu_num	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    uint32_t cpu_num;$/;"	m	struct:__anon24
cpu_set_t	cpucounters.cpp	213;"	d	file:
cpu_stepping	cpucounters.h	/^    int32 cpu_stepping;$/;"	m	class:pcm::PCM
cpuid	MacMSRDriver/PcmMsr/PcmMsr.cpp	25;"	d	file:
createIntelPerfMonDevice	cpucounters.cpp	/^PciHandleType * ServerPCICFGUncore::createIntelPerfMonDevice(uint32 groupnr_, int32 bus_, uint32 dev_, uint32 func_, bool checkVendor)$/;"	f	class:pcm::ServerPCICFGUncore
createPeriodicCounterFetcher	pcm-sensor-server.cpp	/^    void createPeriodicCounterFetcher() {$/;"	f	class:HTTPServer	file:
createResponse	pcm-sensor-server.cpp	/^    void createResponse( enum MimeType mimeType, std::string body, enum HTTPResponseCode rc ) {$/;"	f	class:HTTPResponse
creatorID	types.h	/^    unsigned creatorID;$/;"	m	struct:pcm::MCFGHeader
creatorRevision	types.h	/^    unsigned creatorRevision;$/;"	m	struct:pcm::MCFGHeader
cstates1	cpuasynchcounter.h	/^    CoreCounterState * cstates1, * cstates2;$/;"	m	class:AsynchronCounterState
cstates2	cpuasynchcounter.h	/^    CoreCounterState * cstates1, * cstates2;$/;"	m	class:AsynchronCounterState
ctr_data	lspci.h	/^typedef std::map<std::pair<h_id,v_id>,uint64_t> ctr_data;$/;"	t	namespace:pcm
currentDebugLevel	debug.cpp	/^    int currentDebugLevel = 0;$/;"	m	namespace:pcm::debug	file:
currentMemoryBandwidth	realtime.cpp	/^double currentMemoryBandwidth()$/;"	f
cvt_ds	types.h	/^union cvt_ds$/;"	u	namespace:pcm
cycles	daemon/daemon/common.h	/^		uint64 cycles = 0;$/;"	m	struct:PCMDaemon::PCMCoreCounter
cyclesToGetPCMState	daemon/daemon/common.h	/^		uint64 cyclesToGetPCMState;$/;"	m	struct:PCMDaemon::SharedPCMState
dashdash	freegetopt/getopt.cpp	/^static int dashdash = 0;               \/* True if "--" option reached *\/$/;"	v	file:
data	cpucounters.h	/^    uint64 data;$/;"	m	class:pcm::SimpleCounterState
data	lspci.h	/^    std::vector<result_content> data;$/;"	m	struct:pcm::counter
data	memoptest.cpp	/^    int data[3] = { 0, 0, 0 };$/;"	m	struct:T	file:
data	pcm-iio.cpp	/^struct data{$/;"	s	file:
data	readmem.cpp	/^    int data[15] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };$/;"	m	struct:T	file:
data	realtime.cpp	/^    int data[15] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };;$/;"	m	struct:T	file:
data	utils.h	/^    uint64 data;$/;"	m	class:pcm::checked_uint64
date	pcm-sensor-server.cpp	/^        date() {$/;"	f	class:date
date	pcm-sensor-server.cpp	/^class date {$/;"	c	file:
date_	pcm-sensor-server.cpp	/^    datetime date_;$/;"	m	class:HTTPHeader	file:
datetime	pcm-sensor-server.cpp	/^        datetime( std::tm t ) : now( t ) {}$/;"	f	class:datetime
datetime	pcm-sensor-server.cpp	/^        datetime() {$/;"	f	class:datetime
datetime	pcm-sensor-server.cpp	/^class datetime {$/;"	c	file:
debug	debug.cpp	/^namespace debug {$/;"	n	namespace:pcm	file:
debug	debug.h	/^namespace debug {$/;"	n	namespace:pcm
debugMode_	daemon/daemon/daemon.h	/^		bool debugMode_;$/;"	m	class:PCMDaemon::Daemon
debugPrint	pcm-sensor-server.cpp	/^    void debugPrint() const {$/;"	f	class:HTTPHeader
debugPrint	pcm-sensor-server.cpp	/^    void debugPrint() {$/;"	f	class:HTTPRequest
debugPrint	pcm-sensor-server.cpp	/^    void debugPrint() {$/;"	f	class:HTTPResponse
decrementInstanceSemaphore	cpucounters.cpp	/^bool PCM::decrementInstanceSemaphore()$/;"	f	class:pcm::PCM
decrementNumClients	MacMSRDriver/DriverInterface.c	/^kern_return_t decrementNumClients(io_connect_t connect, uint32_t* num_insts)$/;"	f
decrementNumInstances	MacMSRDriver/MSRAccessor.cpp	/^uint32_t MSRAccessor::decrementNumInstances(){$/;"	f	class:MSRAccessor
decrementNumInstances	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^IOReturn PcmMsrDriverClassName::decrementNumInstances(uint32_t* num_insts){$/;"	f	class:PcmMsrDriverClassName
decrementNumInstances	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::decrementNumInstances(uint32_t* num_insts){$/;"	f	class:PcmMsrClientClassName
decrementNumInstances	cpucounters.cpp	/^uint32 PCM::decrementNumInstances()$/;"	f	class:pcm::PCM
decrementNumInstances	msr.h	/^    uint32 decrementNumInstances()$/;"	f	class:pcm::SafeMsrHandle
default_freq_band	pcm-power.cpp	/^int default_freq_band[3] = { 12, 20, 40 };$/;"	v
description	pcm-core.cpp	/^	char * description;$/;"	m	struct:CoreEvent	file:
description	pcm-tsx.cpp	/^    const char * description;$/;"	m	struct:TSXEvent	file:
destroyMSR	cpucounters.cpp	/^void PCM::destroyMSR()$/;"	f	class:pcm::PCM
detectModel	cpucounters.cpp	/^bool PCM::detectModel()$/;"	f	class:pcm::PCM
detectNominalFrequency	cpucounters.cpp	/^bool PCM::detectNominalFrequency()$/;"	f	class:pcm::PCM
dev	WinMSRDriver/Win7/msrstruct.h	/^    ULONG bus, dev, func, reg, bytes;$/;"	m	struct:PCICFG_Request
device	pci.h	/^    uint32 device;$/;"	m	class:pcm::PciHandle
device	pci.h	/^    uint32 device;$/;"	m	class:pcm::PciHandleM
device	pci.h	/^    uint32 device;$/;"	m	class:pcm::PciHandleMM
deviceControl	WinMSRDriver/Win7/msrmain.c	/^DRIVER_DISPATCH deviceControl;$/;"	v
deviceControl	WinMSRDriver/Win7/msrmain.c	/^NTSTATUS deviceControl(PDEVICE_OBJECT DeviceObject, PIRP Irp)$/;"	f
device_id	lspci.h	/^            uint16_t device_id;$/;"	m	struct:pcm::pci::__anon30::__anon31
devno	lspci.h	/^    uint8_t devno;$/;"	m	struct:pcm::bdf
didTerminate	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^bool PcmMsrClientClassName::didTerminate(IOService* provider, IOOptionBits options, bool* defer)$/;"	f	class:PcmMsrClientClassName
disableForceRTMAbortMode	cpucounters.cpp	/^void PCM::disableForceRTMAbortMode()$/;"	f	class:pcm::PCM
disableJKTWorkaround	cpucounters.h	/^    inline void disableJKTWorkaround() { disable_JKT_workaround = true; }$/;"	f	class:pcm::PCM
disableNMIWatchdog	cpucounters.cpp	/^void disableNMIWatchdog()$/;"	f	namespace:pcm
disable_JKT_workaround	cpucounters.h	/^    bool disable_JKT_workaround;$/;"	m	class:pcm::PCM
discoverSystemTopology	cpucounters.cpp	/^bool PCM::discoverSystemTopology()$/;"	f	class:pcm::PCM
discover_pci_tree	pcm-iio.cpp	/^void discover_pci_tree(const vector<uint32_t> & busno, uint8_t socket_id, vector<struct iio_skx> &v_iio_skx)$/;"	f
dispatch	topology.cpp	/^void Aggregator::dispatch( SystemRoot const& syp ) {$/;"	f	class:pcm::Aggregator
dispatchedAt	topology.h	/^    std::chrono::steady_clock::time_point dispatchedAt( void ) const {$/;"	f	class:pcm::Aggregator
dispatchedAt_	topology.h	/^    std::chrono::steady_clock::time_point dispatchedAt_;$/;"	m	class:pcm::Aggregator
display	pcm-iio.cpp	/^void display(const vector<string> &buff)$/;"	f
display_bandwidth	pcm-memory.cpp	/^void display_bandwidth(PCM *m, memdata_t *md, const uint32 no_columns, const bool show_channel_output)$/;"	f
display_bandwidth_csv	pcm-memory.cpp	/^void display_bandwidth_csv(PCM *m, memdata_t *md, uint64 \/*elapsedTime*\/, const bool show_channel_output, const CsvOutputType outputType)$/;"	f
divider	cpucounters.h	/^        int divider[4]; \/\/We usually like to have some kind of divider (i.e. \/10e6 )$/;"	m	struct:pcm::PCM::CustomIIOEventDescription
divider	lspci.h	/^    int divider;$/;"	m	struct:pcm::counter
doMeasurements	PCM-Service_Win/PCMService.h	/^        void doMeasurements( void )$/;"	f	class:PCMServiceNS::MeasureThread
doMemTest	cpucounters.cpp	/^void ServerPCICFGUncore::doMemTest(const ServerPCICFGUncore::MemTestParam & param)$/;"	f	class:pcm::ServerPCICFGUncore
doOp	pcm-mmio.cpp	/^void doOp(const uint64 address, const uint64 offset, const bool write, T value, RD readOp, WR writeOp, const bool dec)$/;"	f
dos2unix	pcm-iio.cpp	/^std::string dos2unix(std::string in)$/;"	f
download_flag	pmu-query.py	/^            download_flag=True$/;"	v
download_flag	pmu-query.py	/^download_flag = False$/;"	v
dramEnergy	daemon/daemon/common.h	/^		double dramEnergy;$/;"	m	struct:PCMDaemon::PCMMemorySocketCounter
dramEnergyMetricsAvailable	cpucounters.h	/^    bool dramEnergyMetricsAvailable() const$/;"	f	class:pcm::PCM
dramEnergyMetricsAvailable	daemon/daemon/common.h	/^		bool dramEnergyMetricsAvailable;$/;"	m	struct:PCMDaemon::PCMMemory
dram_energy_status	cpucounters.h	/^    std::vector<std::shared_ptr<CounterWidthExtender> > dram_energy_status;$/;"	m	class:pcm::PCM
drawBar	utils.cpp	/^void drawBar(const int nempty, const T & first, const int width, const T & last)$/;"	f	namespace:pcm
drawStackedBar	utils.cpp	/^void drawStackedBar(const std::string & label, std::vector<StackedBarItem> & h, const int width)$/;"	f	namespace:pcm
driverDescription_	PCM_Win/windriver.h	/^    const std::wstring driverDescription_;$/;"	m	class:pcm::Driver
driverName_	PCM_Win/windriver.h	/^    const std::wstring driverName_;$/;"	m	class:pcm::Driver
driverPath	PCM_Win/windriver.h	/^    const std::wstring& driverPath() const$/;"	f	class:pcm::Driver
driverPath_	PCM_Win/windriver.h	/^    const std::wstring driverPath_;$/;"	m	class:pcm::Driver
driver_filename	winpmem/winpmem.h	/^  TCHAR driver_filename[MAX_PATH];$/;"	m	class:pcm::WinPmem
driver_filename	winpmem/winpmem.h	/^static TCHAR driver_filename[MAX_PATH];$/;"	m	namespace:pcm
drv_	PCM-Service_Win/PCMService.h	/^        Driver* drv_;$/;"	m	class:PCMServiceNS::PCMService
dummyFunction	WinMSRDriver/Win7/msrmain.c	/^NTSTATUS dummyFunction(PDEVICE_OBJECT DeviceObject, PIRP Irp)$/;"	f
dyn_debug_level	debug.cpp	/^    void dyn_debug_level( int debugLevel ) {$/;"	f	namespace:pcm::debug
dyn_debug_output	debug.h	/^    void dyn_debug_output( std::ostream& out, LVL level, PF pretty_function, F file, L line, Args... args ) {$/;"	f	namespace:pcm::debug
dyn_debug_output_helper	debug.h	/^    void dyn_debug_output_helper( std::stringstream& out, T t ) {$/;"	f	namespace:pcm::debug
dyn_debug_output_helper	debug.h	/^    void dyn_debug_output_helper( std::stringstream& out, T t, Args... args ) {$/;"	f	namespace:pcm::debug
dyn_hex_table_output	debug.h	/^    void dyn_hex_table_output( int debugLevel, std::ostream& out, ssize_t len, T* inputBuffer_ ) {$/;"	f	namespace:pcm::debug
eax	cpucounters.cpp	/^    struct { unsigned int eax, ebx, ecx, edx; } reg;$/;"	m	struct:pcm::PCM_CPUID_INFO::__anon1	file:
ebx	cpucounters.cpp	/^    struct { unsigned int eax, ebx, ecx, edx; } reg;$/;"	m	struct:pcm::PCM_CPUID_INFO::__anon1	file:
ecx	cpucounters.cpp	/^    struct { unsigned int eax, ebx, ecx, edx; } reg;$/;"	m	struct:pcm::PCM_CPUID_INFO::__anon1	file:
edcPMUs	cpucounters.h	/^    UncorePMUVector edcPMUs;$/;"	m	class:pcm::ServerPCICFGUncore
edge	types.h	/^            uint64 edge : 1;$/;"	m	struct:pcm::EventSelectRegister::__anon10::__anon11
edge	types.h	/^            uint64 edge : 1;$/;"	m	struct:pcm::UncoreEventSelectRegister::__anon14::__anon15
edge_det	types.h	/^            uint64 edge_det : 1;$/;"	m	struct:pcm::IIOPMUCNTCTLRegister::__anon21::__anon22
edx	cpucounters.cpp	/^    struct { unsigned int eax, ebx, ecx, edx; } reg;$/;"	m	struct:pcm::PCM_CPUID_INFO::__anon1	file:
en	types.h	/^            uint64 en : 1;$/;"	m	struct:pcm::BecktonUncorePMUCNTCTLRegister::__anon19::__anon20
enable	types.h	/^            uint64 enable : 1;$/;"	m	struct:pcm::EventSelectRegister::__anon10::__anon11
enable	types.h	/^            uint64 enable : 1;$/;"	m	struct:pcm::IIOPMUCNTCTLRegister::__anon21::__anon22
enable	types.h	/^            uint64 enable : 1;$/;"	m	struct:pcm::UncoreEventSelectRegister::__anon14::__anon15
enableForceRTMAbortMode	cpucounters.cpp	/^void PCM::enableForceRTMAbortMode()$/;"	f	class:pcm::PCM
enableJKTWorkaround	cpucounters.cpp	/^void PCM::enableJKTWorkaround(bool enable)$/;"	f	class:pcm::PCM
enableJKTWorkaround	cpucounters.cpp	/^void ServerPCICFGUncore::enableJKTWorkaround(bool enable)$/;"	f	class:pcm::ServerPCICFGUncore
enableNMIWatchdog	cpucounters.cpp	/^void enableNMIWatchdog()$/;"	f	namespace:pcm
enable_pmi	types.h	/^            uint64 enable_pmi : 1;$/;"	m	struct:pcm::UncoreEventSelectRegister::__anon14::__anon15
enable_pmi0	types.h	/^            uint64 enable_pmi0 : 1;$/;"	m	struct:pcm::FixedEventControlRegister::__anon12::__anon13
enable_pmi1	types.h	/^            uint64 enable_pmi1 : 1;$/;"	m	struct:pcm::FixedEventControlRegister::__anon12::__anon13
enable_pmi2	types.h	/^            uint64 enable_pmi2 : 1;$/;"	m	struct:pcm::FixedEventControlRegister::__anon12::__anon13
endBusNumber	types.h	/^    unsigned char endBusNumber;$/;"	m	struct:pcm::MCFGRecord
endObject	pcm-sensor-server.cpp	/^    void endObject( enum JSONPrinter::LineEndAction lea, char const ch ) {$/;"	f	class:JSONPrinter	file:
energy_status	cpucounters.h	/^    std::vector<std::shared_ptr<CounterWidthExtender> > energy_status;$/;"	m	class:pcm::PCM
enumeratePerfPMUs	cpucounters.cpp	/^std::vector<int> enumeratePerfPMUs(const std::string & type, int max_id)$/;"	f	namespace:pcm
errorMessage	cpucounters.h	/^    std::string errorMessage;$/;"	m	class:pcm::PCM
event	cpucounters.cpp	/^    perf_event_attr event;$/;"	m	class:pcm::PerfVirtualControlRegister	file:
event	pcm-pcie.h	/^uint64 BromolowPlatform::event(uint socket, eventFilter filter, uint idx)$/;"	f	class:BromolowPlatform
event	pcm-pcie.h	/^uint64 GrantleyPlatform::event(uint socket, eventFilter filter, uint idx)$/;"	f	class:GrantleyPlatform
event	pcm-pcie.h	/^uint64 PurleyPlatform::event(uint socket, eventFilter filter, uint idx)$/;"	f	class:PurleyPlatform
event	pcm-tsx.cpp	/^    unsigned char event;$/;"	m	struct:TSXEvent	file:
eventCount	pcm-pcie.h	/^    array<eventCount_t, total> eventCount;$/;"	m	class:LegacyPlatform
eventCount_t	pcm-pcie.h	/^    typedef vector <vector <uint64>> eventCount_t;$/;"	t	class:LegacyPlatform
eventDefinition	pcm-tsx.cpp	/^vector<TSXEvent> eventDefinition = {$/;"	v
eventFilter	pcm-pcie.h	/^    enum eventFilter {TOTAL, MISS, HIT, fltLast};$/;"	g	class:IPlatform
eventGroupOffset	pcm-pcie.h	/^uint LegacyPlatform::eventGroupOffset(eventGroup_t &eventGroup)$/;"	f	class:LegacyPlatform
eventGroup_t	cpucounters.h	/^typedef std::vector<uint64> eventGroup_t;$/;"	t	namespace:pcm
eventGroups	pcm-pcie.h	/^    vector<eventGroup_t> eventGroups;$/;"	m	class:LegacyPlatform
eventIdx	pcm-pcie.h	/^    enum eventIdx {$/;"	g	class:BromolowPlatform
eventIdx	pcm-pcie.h	/^    enum eventIdx {$/;"	g	class:GrantleyPlatform
eventIdx	pcm-pcie.h	/^    enum eventIdx {$/;"	g	class:PurleyPlatform
eventNames	cpucounters.h	/^        std::string eventNames[4];$/;"	m	struct:pcm::PCM::CustomIIOEventDescription
eventNames	pcm-pcie.h	/^    vector<string> eventNames;$/;"	m	class:LegacyPlatform
eventOpcodes	cpucounters.h	/^        IIOPMUCNTCTLRegister eventOpcodes[4];$/;"	m	struct:pcm::PCM::CustomIIOEventDescription
eventSample	pcm-pcie.h	/^    vector<vector<uint64>> eventSample;$/;"	m	class:LegacyPlatform
event_number	cpucounters.h	/^        int32 event_number, umask_value;$/;"	m	struct:pcm::PCM::CustomCoreEventDescription
event_select	types.h	/^            uint64 event_select : 8;$/;"	m	struct:pcm::EventSelectRegister::__anon10::__anon11
event_select	types.h	/^            uint64 event_select : 8;$/;"	m	struct:pcm::IIOPMUCNTCTLRegister::__anon21::__anon22
event_select	types.h	/^            uint64 event_select : 8;$/;"	m	struct:pcm::UncoreEventSelectRegister::__anon14::__anon15
events	pcm-core.cpp	/^} events[PERF_MAX_CUSTOM_COUNTERS];$/;"	v	typeref:struct:CoreEvent
events	pcm-tsx.cpp	/^std::vector<int> events;$/;"	v
evnt0	types.h	/^            uint64 evnt0 : 3;$/;"	m	struct:pcm::BecktonUncorePMUZDPCTLFVCRegister::__anon16::__anon17
evnt0	types.h	/^            uint64 evnt0 : 3;$/;"	m	struct:pcm::BecktonUncorePMUZDPCTLFVCRegister::__anon16::__anon18
evnt1	types.h	/^            uint64 evnt1 : 3;$/;"	m	struct:pcm::BecktonUncorePMUZDPCTLFVCRegister::__anon16::__anon17
evnt1	types.h	/^            uint64 evnt1 : 3;$/;"	m	struct:pcm::BecktonUncorePMUZDPCTLFVCRegister::__anon16::__anon18
evnt2	types.h	/^            uint64 evnt2 : 3;$/;"	m	struct:pcm::BecktonUncorePMUZDPCTLFVCRegister::__anon16::__anon17
evnt2	types.h	/^            uint64 evnt2 : 3;$/;"	m	struct:pcm::BecktonUncorePMUZDPCTLFVCRegister::__anon16::__anon18
evnt3	types.h	/^            uint64 evnt3 : 3;$/;"	m	struct:pcm::BecktonUncorePMUZDPCTLFVCRegister::__anon16::__anon17
evnt3	types.h	/^            uint64 evnt3 : 3;$/;"	m	struct:pcm::BecktonUncorePMUZDPCTLFVCRegister::__anon16::__anon18
execUsage	daemon/daemon/common.h	/^		double execUsage = 0.;$/;"	m	struct:PCMDaemon::PCMCoreCounter
execute	pcm-sensor-server.cpp	/^void PeriodicCounterFetcher::execute() {$/;"	f	class:PeriodicCounterFetcher
execute	threadpool.cpp	/^void ThreadPool::execute( ThreadPool* tp ) {$/;"	f	class:pcm::ThreadPool
exist	lspci.h	/^    bool exist = false;$/;"	m	struct:pcm::pci
exists	pci.cpp	/^bool PciHandle::exists(uint32 groupnr_, uint32 bus_, uint32 device_, uint32 function_)$/;"	f	class:pcm::PciHandle
exit_	pcm-sensor-server.cpp	/^    std::atomic<bool> exit_;$/;"	m	class:PeriodicCounterFetcher	file:
exit_cleanup	utils.cpp	/^void exit_cleanup(void)$/;"	f	namespace:pcm
extended_value	width_extender.h	/^    uint64 extended_value;$/;"	m	class:pcm::CounterWidthExtender
externalMethod	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::externalMethod(uint32_t selector, IOExternalMethodArguments* args,													IOExternalMethodDispatch* dispatch, OSObject* target, void* reference)$/;"	f	class:PcmMsrClientClassName
extractCoreFixedCounterValue	cpucounters.cpp	/^uint64 PCM::extractCoreFixedCounterValue(uint64 val)$/;"	f	class:pcm::PCM
extractCoreGenCounterValue	cpucounters.cpp	/^uint64 PCM::extractCoreGenCounterValue(uint64 val)$/;"	f	class:pcm::PCM
extractQOSMonitoring	cpucounters.cpp	/^uint64 PCM::extractQOSMonitoring(uint64 val)$/;"	f	class:pcm::PCM
extractThermalHeadroom	cpucounters.cpp	/^int32 extractThermalHeadroom(uint64 val)$/;"	f	namespace:pcm
extractUncoreFixedCounterValue	cpucounters.cpp	/^uint64 PCM::extractUncoreFixedCounterValue(uint64 val)$/;"	f	class:pcm::PCM
extractUncoreGenCounterValue	cpucounters.cpp	/^uint64 PCM::extractUncoreGenCounterValue(uint64 val)$/;"	f	class:pcm::PCM
extract_bits	cpucounters.cpp	/^uint64 extract_bits(uint64 myin, uint32 beg, uint32 end)$/;"	f	namespace:pcm
extract_bits_ui	cpucounters.cpp	/^uint32 extract_bits_ui(uint32 myin, uint32 beg, uint32 end)$/;"	f	namespace:pcm
fProvider	MacMSRDriver/PcmMsr/PcmMsrClient.h	/^    PcmMsrDriverClassName*                  fProvider;$/;"	m	class:PcmMsrClientClassName
favicon_ico	favicon.ico.h	/^signed char favicon_ico[] = {$/;"	v
favicon_ico_len	favicon.ico.h	/^unsigned int favicon_ico_len = 198;$/;"	v
fc_mask	types.h	/^            uint64 fc_mask : 3;$/;"	m	struct:pcm::IIOPMUCNTCTLRegister::__anon21::__anon22
fd	cpucounters.cpp	/^    int fd;$/;"	m	class:pcm::PerfVirtualControlRegister	file:
fd	pci.h	/^    int32 fd;$/;"	m	class:pcm::PciHandleMM
fd_	winpmem/winpmem.h	/^  HANDLE fd_;$/;"	m	class:pcm::WinPmem
fib	realtime.cpp	/^long long int fib(long long int num)$/;"	f
fields	types.h	/^        } fields; \/\/ nehalem-ex version$/;"	m	union:pcm::BecktonUncorePMUZDPCTLFVCRegister::__anon16	typeref:struct:pcm::BecktonUncorePMUZDPCTLFVCRegister::__anon16::__anon17
fields	types.h	/^        } fields;$/;"	m	union:pcm::BecktonUncorePMUCNTCTLRegister::__anon19	typeref:struct:pcm::BecktonUncorePMUCNTCTLRegister::__anon19::__anon20
fields	types.h	/^        } fields;$/;"	m	union:pcm::EventSelectRegister::__anon10	typeref:struct:pcm::EventSelectRegister::__anon10::__anon11
fields	types.h	/^        } fields;$/;"	m	union:pcm::FixedEventControlRegister::__anon12	typeref:struct:pcm::FixedEventControlRegister::__anon12::__anon13
fields	types.h	/^        } fields;$/;"	m	union:pcm::IIOPMUCNTCTLRegister::__anon21	typeref:struct:pcm::IIOPMUCNTCTLRegister::__anon21::__anon22
fields	types.h	/^        } fields;$/;"	m	union:pcm::UncoreEventSelectRegister::__anon14	typeref:struct:pcm::UncoreEventSelectRegister::__anon14::__anon15
fields_wsm	types.h	/^        } fields_wsm; \/\/ westmere-ex version$/;"	m	union:pcm::BecktonUncorePMUZDPCTLFVCRegister::__anon16	typeref:struct:pcm::BecktonUncorePMUZDPCTLFVCRegister::__anon16::__anon18
filename	pmu-query.py	/^            filename=a$/;"	v
filename	pmu-query.py	/^filename=None$/;"	v
fill	utils.h	/^    char fill;$/;"	m	struct:pcm::StackedBarItem
filter	cpucounters.h	/^    HWRegisterPtr filter[2];$/;"	m	class:pcm::UncorePMU
filterNames	pcm-pcie.h	/^    vector<string> filterNames, bwNames;$/;"	m	class:IPlatform
filterNr	cpucounters.cpp	/^    int filterNr;$/;"	m	class:pcm::PerfVirtualFilterRegister	file:
final	pcm-pcie.h	/^    virtual void cleanup() final;$/;"	m	class:LegacyPlatform
final	pcm-pcie.h	/^    virtual void getEvents() final;$/;"	m	class:LegacyPlatform
final	pcm-pcie.h	/^    virtual void printAggregatedEvents() final;$/;"	m	class:LegacyPlatform
final	pcm-pcie.h	/^    virtual void printEvents() final;$/;"	m	class:LegacyPlatform
final	pcm-pcie.h	/^    virtual void printHeader() final;$/;"	m	class:LegacyPlatform
final	pcm-sensor-server.cpp	/^    virtual void run() final;$/;"	m	class:HTTPSServer	file:
findCoreByTileID	topology.h	/^    Core* findCoreByTileID( int32 tileID ) {$/;"	f	class:pcm::Socket
findEvent	pcm-tsx.cpp	/^int findEvent(const char * name)$/;"	f
findProperty	pcm-sensor-server.cpp	/^    struct HTTPMethodProperty const& findProperty( enum HTTPRequestMethod rm ) {$/;"	f	class:HTTPMethodProperties	file:
findProperty	pcm-sensor-server.cpp	/^    struct HTTPMethodProperty const& findProperty( std::string rm ) {$/;"	f	class:HTTPMethodProperties	file:
findThreadByOSID	topology.h	/^    HyperThread* findThreadByOSID( int32 osID ) {$/;"	f	class:pcm::Core
findThreadByOSID	topology.h	/^    HyperThread* findThreadByOSID( int32 osID ) {$/;"	f	class:pcm::Socket
findThreadByOSID	topology.h	/^    HyperThread* findThreadByOSID( int32 osID ) {$/;"	f	class:pcm::SystemRoot
fixed	cpucounters.cpp	/^    bool fixed;$/;"	m	class:pcm::PerfVirtualControlRegister	file:
fixed	cpucounters.h	/^        std::vector<RawEventConfig> fixed;$/;"	m	struct:pcm::PCM::RawPMUConfig
fixedCfg	cpucounters.h	/^        FixedEventControlRegister * fixedCfg; \/\/ if NULL, then default configuration performed for fixed counters$/;"	m	struct:pcm::PCM::ExtendedCustomCoreEventDescription
fixedCounterControl	cpucounters.h	/^    HWRegisterPtr fixedCounterControl;$/;"	m	class:pcm::UncorePMU
fixedCounterValue	cpucounters.h	/^    HWRegisterPtr fixedCounterValue;$/;"	m	class:pcm::UncorePMU
flag_mode	types.h	/^            uint64 flag_mode : 1;$/;"	m	struct:pcm::BecktonUncorePMUCNTCTLRegister::__anon19::__anon20
float_format	pcm.cpp	/^double float_format(IntType n)$/;"	f
floats_	pcm-sensor-server.cpp	/^    std::vector<double> floats_;$/;"	m	class:HTTPHeader	file:
fltLast	pcm-pcie.h	/^    enum eventFilter {TOTAL, MISS, HIT, fltLast};$/;"	e	enum:IPlatform::eventFilter
flushLine	pcm-raw.cpp	/^bool flushLine = false;$/;"	v
forceRTMAbortMode	cpucounters.h	/^    bool forceRTMAbortMode;$/;"	m	class:pcm::PCM
fraction	utils.h	/^    double fraction;$/;"	m	struct:pcm::StackedBarItem
fragment_	pcm-sensor-server.cpp	/^    std::string fragment_;$/;"	m	struct:URL	file:
free	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^void PcmMsrDriverClassName::free()$/;"	f	class:PcmMsrDriverClassName
freeze	cpucounters.cpp	/^void UncorePMU::freeze(const uint32 extra)$/;"	f	class:pcm::UncorePMU
freezeCounters	cpucounters.cpp	/^void ServerPCICFGUncore::freezeCounters()$/;"	f	class:pcm::ServerPCICFGUncore
freezeServerUncoreCounters	cpucounters.cpp	/^void PCM::freezeServerUncoreCounters()$/;"	f	class:pcm::PCM
freq_band	pcm-power.cpp	/^int freq_band[3];$/;"	v
func	WinMSRDriver/Win7/msrstruct.h	/^    ULONG bus, dev, func, reg, bytes;$/;"	m	struct:PCICFG_Request
funcno	lspci.h	/^    uint8_t funcno;$/;"	m	struct:pcm::bdf
function	pci.h	/^    uint32 function;$/;"	m	class:pcm::PciHandle
function	pci.h	/^    uint32 function;$/;"	m	class:pcm::PciHandleM
function	pci.h	/^    uint32 function;$/;"	m	class:pcm::PciHandleMM
fvid	types.h	/^            uint64 fvid : 5;$/;"	m	struct:pcm::BecktonUncorePMUZDPCTLFVCRegister::__anon16::__anon17
fvid	types.h	/^            uint64 fvid : 6;$/;"	m	struct:pcm::BecktonUncorePMUZDPCTLFVCRegister::__anon16::__anon18
g_pci_driver	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^PcmMsrDriverClassName *g_pci_driver = NULL;$/;"	v
get	cpuasynchcounter.h	/^    T get(int param, uint32 core)$/;"	f	class:AsynchronCounterState
get	cpuasynchcounter.h	/^    T get(uint32 core)$/;"	f	class:AsynchronCounterState
getActiveAverageFrequency	cpucounters.h	/^double getActiveAverageFrequency(const CounterStateType & before, const CounterStateType & after) \/\/ in Hz$/;"	f	namespace:pcm
getActiveRelativeFrequency	cpucounters.h	/^double getActiveRelativeFrequency(const CounterStateType & before, const CounterStateType & after) \/\/ fraction of nominal frequency$/;"	f	namespace:pcm
getAggregators	pcm-sensor-server.cpp	/^    std::pair<std::shared_ptr<Aggregator>,std::shared_ptr<Aggregator>> getAggregators( size_t index, size_t index2 ) {$/;"	f	class:HTTPServer
getAllCounterStates	cpucounters.cpp	/^void PCM::getAllCounterStates(SystemCounterState & systemState, std::vector<SocketCounterState> & socketStates, std::vector<CoreCounterState> & coreStates)$/;"	f	class:pcm::PCM
getAllIncomingQPILinkBytes	cpucounters.h	/^inline uint64 getAllIncomingQPILinkBytes(const SystemCounterState & before, const SystemCounterState & after)$/;"	f	namespace:pcm
getAllIncomingQPILinkBytes	cpucounters.h	/^inline uint64 getAllIncomingQPILinkBytes(const SystemCounterState & now)$/;"	f	namespace:pcm
getAllOutgoingQPILinkBytes	cpucounters.h	/^inline uint64 getAllOutgoingQPILinkBytes(const SystemCounterState & before, const SystemCounterState & after)$/;"	f	namespace:pcm
getAverageFrequency	cpucounters.h	/^double getAverageFrequency(const CounterStateType & before, const CounterStateType & after) \/\/ in Hz$/;"	f	namespace:pcm
getBusFromSocket	cpucounters.cpp	/^int getBusFromSocket(const uint32 socket)$/;"	f	namespace:pcm
getBytesPerFlit	cpucounters.h	/^    double getBytesPerFlit() const$/;"	f	class:pcm::PCM
getBytesPerFlit	cpucounters.h	/^    static double getBytesPerFlit(int32 cpu_model_)$/;"	f	class:pcm::PCM
getBytesPerLinkCycle	cpucounters.h	/^    double getBytesPerLinkCycle() const$/;"	f	class:pcm::PCM
getBytesPerLinkCycle	cpucounters.h	/^    static double getBytesPerLinkCycle(int32 cpu_model_)$/;"	f	class:pcm::PCM
getBytesPerLinkTransfer	cpucounters.h	/^    double getBytesPerLinkTransfer() const$/;"	f	class:pcm::PCM
getBytesReadFromEDC	cpucounters.h	/^uint64 getBytesReadFromEDC(const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getBytesReadFromMC	cpucounters.h	/^uint64 getBytesReadFromMC(const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getBytesReadFromPMM	cpucounters.h	/^uint64 getBytesReadFromPMM(const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getBytesWrittenToEDC	cpucounters.h	/^uint64 getBytesWrittenToEDC(const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getBytesWrittenToMC	cpucounters.h	/^uint64 getBytesWrittenToMC(const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getBytesWrittenToPMM	cpucounters.h	/^uint64 getBytesWrittenToPMM(const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getCBOCounter	cpucounters.h	/^uint64 getCBOCounter(uint32 cbo, uint32 counter, const CounterStateType& before, const CounterStateType& after)$/;"	f	namespace:pcm
getCBOCounterState	cpucounters.cpp	/^uint64 PCM::getCBOCounterState(const uint32 socket_, const uint32 ctr_)$/;"	f	class:pcm::PCM
getCKEOffAverageCycles	pcm-power.cpp	/^int64 getCKEOffAverageCycles(uint32 channel, uint32 rank, const ServerUncoreCounterState & before, const ServerUncoreCounterState & after)$/;"	f
getCKEOffResidency	pcm-power.cpp	/^double getCKEOffResidency(uint32 channel, uint32 rank, const ServerUncoreCounterState & before, const ServerUncoreCounterState & after)$/;"	f
getCPUBrandString	cpucounters.cpp	/^std::string PCM::getCPUBrandString()$/;"	f	class:pcm::PCM
getCPUFamilyModelString	cpucounters.cpp	/^std::string PCM::getCPUFamilyModelString()$/;"	f	class:pcm::PCM
getCPUMicrocodeLevel	cpucounters.h	/^    int64 getCPUMicrocodeLevel() const { return cpu_microcode_level; }$/;"	f	class:pcm::PCM
getCPUModel	cpucounters.h	/^    uint32 getCPUModel() const { return (uint32)cpu_model; }$/;"	f	class:pcm::PCM
getCPUStepping	cpucounters.h	/^    uint32 getCPUStepping() const { return (uint32)cpu_stepping; }$/;"	f	class:pcm::PCM
getConsumedEnergy	cpucounters.h	/^uint64 getConsumedEnergy(const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getConsumedJoules	cpucounters.h	/^double getConsumedJoules(const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getCoreCStateResidency	cpucounters.h	/^inline double getCoreCStateResidency(int state, const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getCoreCStateResidency	cpucounters.h	/^inline uint64 getCoreCStateResidency(int state, const CounterStateType& now)$/;"	f	namespace:pcm
getCoreCounter	pcm-sensor-server.cpp	/^    CoreCounterState const getCoreCounter( std::shared_ptr<Aggregator> ag, uint32 tid ) const {$/;"	f	class:JSONPrinter
getCoreCounter	pcm-sensor-server.cpp	/^    CoreCounterState const getCoreCounter( std::shared_ptr<Aggregator> ag, uint32 tid ) const {$/;"	f	class:PrometheusPrinter
getCoreCounterState	cpucounters.cpp	/^CoreCounterState PCM::getCoreCounterState(uint32 core)$/;"	f	class:pcm::PCM
getCoreCounterState	cpucounters.cpp	/^CoreCounterState getCoreCounterState(uint32 core)$/;"	f	namespace:pcm
getCoreIPC	cpucounters.h	/^inline double getCoreIPC(const SystemCounterState & before, const SystemCounterState & after) \/\/ instructions per cycle$/;"	f	namespace:pcm
getCoreId	cpucounters.h	/^    int32 getCoreId(uint32 os_id) const { return (int32)topology[os_id].core_id; }$/;"	f	class:pcm::PCM
getCoreId	msr.h	/^    int32 getCoreId() { return (int32)cpu_id; }$/;"	f	class:pcm::MsrHandle
getCoreId	msr.h	/^    int32 getCoreId()$/;"	f	class:pcm::SafeMsrHandle
getCycles	cpucounters.h	/^uint64 getCycles(const CounterStateType & before, const CounterStateType & after) \/\/ clocks$/;"	f	namespace:pcm
getCycles	cpucounters.h	/^uint64 getCycles(const CounterStateType & now) \/\/ clocks$/;"	f	namespace:pcm
getCyclesPerTransition	pcm-power.cpp	/^int64 getCyclesPerTransition(uint32 channel, uint32 rank, const ServerUncoreCounterState & before, const ServerUncoreCounterState & after)$/;"	f
getDRAMClocks	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getDRAMClocks(uint32 channel)$/;"	f	class:pcm::ServerPCICFGUncore
getDRAMClocks	cpucounters.h	/^uint64 getDRAMClocks(uint32 channel, const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getDRAMConsumedEnergy	cpucounters.h	/^uint64 getDRAMConsumedEnergy(const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getDRAMConsumedJoules	cpucounters.h	/^double getDRAMConsumedJoules(const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getDataBytesPerFlit	cpucounters.h	/^    double getDataBytesPerFlit() const$/;"	f	class:pcm::PCM
getDataBytesPerFlit	cpucounters.h	/^    static double getDataBytesPerFlit(int32 cpu_model_)$/;"	f	class:pcm::PCM
getEDCChannelsPerSocket	cpucounters.h	/^    size_t getEDCChannelsPerSocket() const$/;"	f	class:pcm::PCM
getEDCCounter	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getEDCCounter(uint32 channel, uint32 counter)$/;"	f	class:pcm::ServerPCICFGUncore
getEDCCounter	cpucounters.h	/^uint64 getEDCCounter(uint32 channel, uint32 counter, const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getEdcReads	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getEdcReads()$/;"	f	class:pcm::ServerPCICFGUncore
getEdcWrites	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getEdcWrites()$/;"	f	class:pcm::ServerPCICFGUncore
getErrorMessage	cpucounters.h	/^    const std::string & getErrorMessage() const$/;"	f	class:pcm::PCM
getEventCount	pcm-pcie.h	/^inline uint64 LegacyPlatform::getEventCount (uint skt, uint idx)$/;"	f	class:LegacyPlatform
getEventGroup	pcm-pcie.h	/^void LegacyPlatform::getEventGroup(eventGroup_t &eventGroup)$/;"	f	class:LegacyPlatform
getEvents	pcm-pcie.h	/^void LegacyPlatform::getEvents()$/;"	f	class:LegacyPlatform
getExecUsage	cpucounters.h	/^double getExecUsage(const CounterStateType & before, const CounterStateType & after) \/\/ usage$/;"	f	namespace:pcm
getFD	cpucounters.cpp	/^    int getFD() const { return fd; }$/;"	f	class:pcm::PerfVirtualControlRegister
getFirstRank	pcm-power.cpp	/^int getFirstRank(int imc_profile)$/;"	f
getFlitsPerLinkCycle	cpucounters.h	/^    static double getFlitsPerLinkCycle(int32 cpu_model_)$/;"	f	class:pcm::PCM
getFuture	threadpool.h	/^    std::future<ReturnType> getFuture() {$/;"	f	class:pcm::LambdaJob
getHALocalRequests	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getHALocalRequests()$/;"	f	class:pcm::ServerPCICFGUncore
getHARequests	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getHARequests()$/;"	f	class:pcm::ServerPCICFGUncore
getHeader	pcm-sensor-server.cpp	/^    HTTPHeader const & getHeader( std::string const & header ) const {$/;"	f	class:HTTPMessage
getIIOCounter	cpucounters.h	/^uint64 getIIOCounter(uint32 stack, uint32 counter, const CounterStateType& before, const CounterStateType& after)$/;"	f	namespace:pcm
getIIOCounterState	cpucounters.cpp	/^IIOCounterState PCM::getIIOCounterState(int socket, int IIOStack, int counter)$/;"	f	class:pcm::PCM
getIIOCounterStates	cpucounters.cpp	/^void PCM::getIIOCounterStates(int socket, int IIOStack, IIOCounterState * result)$/;"	f	class:pcm::PCM
getIORequestBytesFromMC	cpucounters.h	/^uint64 getIORequestBytesFromMC(const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getIPC	cpucounters.h	/^double getIPC(const CounterStateType & before, const CounterStateType & after) \/\/ instructions per cycle$/;"	f	namespace:pcm
getIdent	pcm-pcie.h	/^static uint getIdent (const string &s)$/;"	f
getImcReads	client_bw.cpp	/^uint64 ClientBW::getImcReads()$/;"	f	class:pcm::ClientBW
getImcReads	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getImcReads()$/;"	f	class:pcm::ServerPCICFGUncore
getImcReadsForChannels	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getImcReadsForChannels(uint32 beginChannel, uint32 endChannel)$/;"	f	class:pcm::ServerPCICFGUncore
getImcReadsForController	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getImcReadsForController(uint32 controller)$/;"	f	class:pcm::ServerPCICFGUncore
getImcWrites	client_bw.cpp	/^uint64 ClientBW::getImcWrites()$/;"	f	class:pcm::ClientBW
getImcWrites	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getImcWrites()$/;"	f	class:pcm::ServerPCICFGUncore
getIncomingDataFlits	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getIncomingDataFlits(uint32 port)$/;"	f	class:pcm::ServerPCICFGUncore
getIncomingQPILinkBytes	cpucounters.h	/^inline uint64 getIncomingQPILinkBytes(uint32 socketNr, uint32 linkNr, const SystemCounterState & before, const SystemCounterState & after)$/;"	f	namespace:pcm
getIncomingQPILinkBytes	cpucounters.h	/^inline uint64 getIncomingQPILinkBytes(uint32 socketNr, uint32 linkNr, const SystemCounterState & now)$/;"	f	namespace:pcm
getIncomingQPILinkUtilization	cpucounters.h	/^inline double getIncomingQPILinkUtilization(uint32 socketNr, uint32 linkNr, const SystemCounterState & before, const SystemCounterState & after)$/;"	f	namespace:pcm
getInstance	cpucounters.cpp	/^PCM * PCM::getInstance()$/;"	f	class:pcm::PCM
getInstance	pcm-sensor-server.cpp	/^    static SignalHandler* getInstance() {$/;"	f	class:SignalHandler
getInstance	threadpool.h	/^    static ThreadPool& getInstance() {$/;"	f	class:pcm::ThreadPool
getInstructionsRetired	cpucounters.h	/^uint64 getInstructionsRetired(const CounterStateType & before, const CounterStateType & after) \/\/ instructions$/;"	f	namespace:pcm
getInstructionsRetired	cpucounters.h	/^uint64 getInstructionsRetired(const CounterStateType & now) \/\/ instructions$/;"	f	namespace:pcm
getInvariantTSC	cpucounters.h	/^uint64 getInvariantTSC(const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getIoRequests	client_bw.cpp	/^uint64 ClientBW::getIoRequests()$/;"	f	class:pcm::ClientBW
getJoulesPerEnergyUnit	cpucounters.h	/^    double getJoulesPerEnergyUnit() const { return joulesPerEnergyUnit; }$/;"	f	class:pcm::PCM
getL2CacheHitRatio	cpucounters.h	/^double getL2CacheHitRatio(const CounterStateType& before, const CounterStateType& after) \/\/ 0.0 - 1.0$/;"	f	namespace:pcm
getL2CacheHits	cpucounters.h	/^uint64 getL2CacheHits(const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getL2CacheMisses	cpucounters.h	/^uint64 getL2CacheMisses(const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getL3CacheHitRatio	cpucounters.h	/^double getL3CacheHitRatio(const CounterStateType& before, const CounterStateType& after) \/\/ 0.0 - 1.0$/;"	f	namespace:pcm
getL3CacheHits	cpucounters.h	/^uint64 getL3CacheHits(const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getL3CacheHitsNoSnoop	cpucounters.h	/^uint64 getL3CacheHitsNoSnoop(const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getL3CacheHitsSnoop	cpucounters.h	/^uint64 getL3CacheHitsSnoop(const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getL3CacheMisses	cpucounters.h	/^uint64 getL3CacheMisses(const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getL3CacheOccupancy	cpucounters.h	/^uint64 getL3CacheOccupancy(const CounterStateType & now)$/;"	f	namespace:pcm
getL3OCC	resctrl.cpp	/^    size_t Resctrl::getL3OCC(int core)$/;"	f	class:pcm::Resctrl
getL3ScalingFactor	cpucounters.cpp	/^uint32 PCM::getL3ScalingFactor() const$/;"	f	class:pcm::PCM
getLLCReadMissLatency	cpucounters.h	/^inline double getLLCReadMissLatency(const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getLinkTransfersPerLinkCycle	cpucounters.h	/^    static double getLinkTransfersPerLinkCycle()$/;"	f	class:pcm::PCM
getLocalMemoryBW	cpucounters.h	/^uint64 getLocalMemoryBW(const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getLocalMemoryRequestRatio	cpucounters.h	/^inline double getLocalMemoryRequestRatio(const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getM2MCounter	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getM2MCounter(uint32 box, uint32 counter)$/;"	f	class:pcm::ServerPCICFGUncore
getM2MCounter	cpucounters.h	/^uint64 getM2MCounter(uint32 controller, uint32 counter, const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getM3UPICounter	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getM3UPICounter(uint32 port, uint32 counter)$/;"	f	class:pcm::ServerPCICFGUncore
getM3UPICounter	cpucounters.h	/^uint64 getM3UPICounter(uint32 port, uint32 counter, const CounterStateType& before, const CounterStateType& after)$/;"	f	namespace:pcm
getMBL	resctrl.cpp	/^    size_t Resctrl::getMBL(int core)$/;"	f	class:pcm::Resctrl
getMBT	resctrl.cpp	/^    size_t Resctrl::getMBT(int core)$/;"	f	class:pcm::Resctrl
getMCChannels	cpucounters.h	/^    size_t getMCChannels(uint32 socket, uint32 controller) const$/;"	f	class:pcm::PCM
getMCChannelsPerSocket	cpucounters.h	/^    size_t getMCChannelsPerSocket() const$/;"	f	class:pcm::PCM
getMCCounter	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getMCCounter(uint32 channel, uint32 counter)$/;"	f	class:pcm::ServerPCICFGUncore
getMCCounter	cpucounters.h	/^uint64 getMCCounter(uint32 channel, uint32 counter, const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getMCDRAMClocks	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getMCDRAMClocks(uint32 channel)$/;"	f	class:pcm::ServerPCICFGUncore
getMCDRAMClocks	cpucounters.h	/^uint64 getMCDRAMClocks(uint32 channel, const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getMCPerSocket	cpucounters.h	/^    uint32 getMCPerSocket() const$/;"	f	class:pcm::PCM
getMaxCustomCoreEvents	cpucounters.cpp	/^int32 PCM::getMaxCustomCoreEvents()$/;"	f	class:pcm::PCM
getMaxIPC	cpucounters.h	/^    uint32 getMaxIPC() const$/;"	f	class:pcm::PCM
getMaxNumOfCBoxes	cpucounters.cpp	/^uint32 PCM::getMaxNumOfCBoxes() const$/;"	f	class:pcm::PCM
getMaxNumOfIIOStacks	cpucounters.cpp	/^uint32 PCM::getMaxNumOfIIOStacks() const$/;"	f	class:pcm::PCM
getMaxRMID	cpucounters.cpp	/^unsigned PCM::getMaxRMID() const$/;"	f	class:pcm::PCM
getMethodAsEnum	pcm-sensor-server.cpp	/^    static enum HTTPRequestMethod getMethodAsEnum( std::string const& rms ) {$/;"	f	class:HTTPMethodProperties
getMethodAsString	pcm-sensor-server.cpp	/^    static std::string const& getMethodAsString( enum HTTPRequestMethod rme ) {$/;"	f	class:HTTPMethodProperties::std
getMetric	resctrl.cpp	/^    size_t Resctrl::getMetric(Resctrl::FileMapType & fileMap, int core)$/;"	f	class:pcm::Resctrl
getNominalFrequency	cpucounters.cpp	/^uint64 PCM::getNominalFrequency() const$/;"	f	class:pcm::PCM
getNormalizedPCUCounter	pcm-power.cpp	/^double getNormalizedPCUCounter(uint32 counter, const ServerUncoreCounterState & before, const ServerUncoreCounterState & after)$/;"	f
getNormalizedPCUCounter	pcm-power.cpp	/^double getNormalizedPCUCounter(uint32 counter, const ServerUncoreCounterState & before, const ServerUncoreCounterState & after, PCM * m)$/;"	f
getNormalizedQPIL0pTxCycles	cpucounters.h	/^double getNormalizedQPIL0pTxCycles(uint32 port, const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getNormalizedQPIL1Cycles	cpucounters.h	/^double getNormalizedQPIL1Cycles(uint32 port, const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getNullAndCurrentAggregator	pcm-sensor-server.cpp	/^std::pair<std::shared_ptr<Aggregator>,std::shared_ptr<Aggregator>> getNullAndCurrentAggregator() {$/;"	f
getNumClients	MacMSRDriver/DriverInterface.c	/^kern_return_t getNumClients(io_connect_t connect, uint32_t* num_insts)$/;"	f
getNumCores	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^uint32_t PcmMsrDriverClassName::getNumCores()$/;"	f	class:PcmMsrDriverClassName
getNumCores	cpuasynchcounter.h	/^    uint32 getNumCores()$/;"	f	class:AsynchronCounterState
getNumCores	cpucounters.cpp	/^uint32 PCM::getNumCores() const$/;"	f	class:pcm::PCM
getNumEDCChannels	cpucounters.h	/^    size_t getNumEDCChannels() const { return edcPMUs.size(); }$/;"	f	class:pcm::ServerPCICFGUncore
getNumInstances	MacMSRDriver/MSRAccessor.cpp	/^uint32_t MSRAccessor::getNumInstances(){$/;"	f	class:MSRAccessor
getNumInstances	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^IOReturn PcmMsrDriverClassName::getNumInstances(uint32_t* num_insts){$/;"	f	class:PcmMsrDriverClassName
getNumInstances	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::getNumInstances(uint32_t* num_insts){$/;"	f	class:PcmMsrClientClassName
getNumInstances	cpucounters.cpp	/^uint32 PCM::getNumInstances()$/;"	f	class:pcm::PCM
getNumInstances	msr.h	/^    uint32 getNumInstances()$/;"	f	class:pcm::SafeMsrHandle
getNumMC	cpucounters.h	/^    uint32 getNumMC() const { return (uint32)num_imc_channels.size(); }$/;"	f	class:pcm::ServerPCICFGUncore
getNumMCChannels	cpucounters.cpp	/^size_t ServerPCICFGUncore::getNumMCChannels(const uint32 controller) const$/;"	f	class:pcm::ServerPCICFGUncore
getNumMCChannels	cpucounters.h	/^    size_t getNumMCChannels() const { return (size_t)imcPMUs.size(); }$/;"	f	class:pcm::ServerPCICFGUncore
getNumOnlineCores	cpucounters.cpp	/^uint32 PCM::getNumOnlineCores() const$/;"	f	class:pcm::PCM
getNumOnlineSockets	cpucounters.cpp	/^uint32 PCM::getNumOnlineSockets() const$/;"	f	class:pcm::PCM
getNumQPIPorts	cpucounters.h	/^    size_t getNumQPIPorts() const { return xpiPMUs.size(); }$/;"	f	class:pcm::ServerPCICFGUncore
getNumSockets	cpuasynchcounter.h	/^    uint32 getNumSockets()$/;"	f	class:AsynchronCounterState
getNumSockets	cpucounters.cpp	/^uint32 PCM::getNumSockets() const$/;"	f	class:pcm::PCM
getNumberOfCustomEvents	cpucounters.h	/^uint64 getNumberOfCustomEvents(int32 eventCounterNr, const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getNumberOfEvents	cpucounters.h	/^inline uint64 getNumberOfEvents(const CounterType & before, const CounterType & after)$/;"	f	namespace:pcm
getNumberOfIterations	utils.h	/^    unsigned getNumberOfIterations() const$/;"	f	class:pcm::MainLoop
getOutgoingFlits	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getOutgoingFlits(uint32 port)$/;"	f	class:pcm::ServerPCICFGUncore
getOutgoingQPILinkBytes	cpucounters.h	/^inline uint64 getOutgoingQPILinkBytes(uint32 socketNr, uint32 linkNr, const SystemCounterState & before, const SystemCounterState & after)$/;"	f	namespace:pcm
getOutgoingQPILinkUtilization	cpucounters.h	/^inline double getOutgoingQPILinkUtilization(uint32 socketNr, uint32 linkNr, const SystemCounterState & before, const SystemCounterState & after)$/;"	f	namespace:pcm
getPCIeCounterData	cpucounters.cpp	/^uint64 PCM::getPCIeCounterData(const uint32 socket_, const uint32 ctr_)$/;"	f	class:pcm::PCM
getPCIeCounterState	cpucounters.cpp	/^PCIeCounterState PCM::getPCIeCounterState(const uint32 socket_)$/;"	f	class:pcm::PCM
getPCMCore	daemon/daemon/daemon.cpp	/^	void Daemon::getPCMCore()$/;"	f	class:PCMDaemon::Daemon
getPCMCounters	daemon/daemon/daemon.cpp	/^	void Daemon::getPCMCounters()$/;"	f	class:PCMDaemon::Daemon
getPCMDashboardJSON	dashboard.cpp	/^std::string getPCMDashboardJSON(const PCMDashboardType type, int ns, int nu, int nc)$/;"	f
getPCMMemory	daemon/daemon/daemon.cpp	/^	void Daemon::getPCMMemory()$/;"	f	class:PCMDaemon::Daemon
getPCMQPI	daemon/daemon/daemon.cpp	/^	void Daemon::getPCMQPI()$/;"	f	class:PCMDaemon::Daemon
getPCMSystem	daemon/daemon/daemon.cpp	/^	void Daemon::getPCMSystem()$/;"	f	class:PCMDaemon::Daemon
getPCUClocks	cpucounters.h	/^uint64 getPCUClocks(const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getPCUCounter	cpucounters.h	/^uint64 getPCUCounter(uint32 counter, const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getPCUFrequency	cpucounters.h	/^    uint64 getPCUFrequency() const$/;"	f	class:pcm::PCM
getPMMReads	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getPMMReads()$/;"	f	class:pcm::ServerPCICFGUncore
getPMMWrites	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getPMMWrites()$/;"	f	class:pcm::ServerPCICFGUncore
getPMUCounter	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getPMUCounter(std::vector<UncorePMU> & pmu, const uint32 id, const uint32 counter)$/;"	f	class:pcm::ServerPCICFGUncore
getPMUID	cpucounters.cpp	/^    int getPMUID() const { return pmuID; }$/;"	f	class:pcm::PerfVirtualControlRegister
getPPDCycles	pcm-power.cpp	/^uint64 getPPDCycles(uint32 channel, const ServerUncoreCounterState & before, const ServerUncoreCounterState & after)$/;"	f
getPackageCStateResidency	cpucounters.h	/^inline double getPackageCStateResidency(int state, const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getPackageCStateResidency	cpucounters.h	/^inline uint64 getPackageCStateResidency(int state, const CounterStateType& now)$/;"	f	namespace:pcm
getPackageMaximumPower	cpucounters.h	/^    int32 getPackageMaximumPower() const { return pkgMaximumPower; }$/;"	f	class:pcm::PCM
getPackageMinimumPower	cpucounters.h	/^    int32 getPackageMinimumPower() const { return pkgMinimumPower; }$/;"	f	class:pcm::PCM
getPackageThermalHeadroom	cpucounters.h	/^    int32 getPackageThermalHeadroom() const { return PackageThermalHeadroom; }$/;"	f	class:pcm::ServerUncoreCounterState
getPackageThermalSpecPower	cpucounters.h	/^    int32 getPackageThermalSpecPower() const { return pkgThermalSpecPower; }$/;"	f	class:pcm::PCM
getPlatform	pcm-pcie.cpp	/^IPlatform *IPlatform::getPlatform(PCM *m, bool csv, bool print_bandwidth, bool print_additional_info, uint32 delay)$/;"	f	class:IPlatform
getQPIClocks	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getQPIClocks(uint32 port)$/;"	f	class:pcm::ServerPCICFGUncore
getQPIClocks	cpucounters.h	/^uint64 getQPIClocks(uint32 port, const CounterStateType& before, const CounterStateType& after)$/;"	f	namespace:pcm
getQPIL0pTxCycles	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getQPIL0pTxCycles(uint32 port)$/;"	f	class:pcm::ServerPCICFGUncore
getQPIL0pTxCycles	cpucounters.h	/^uint64 getQPIL0pTxCycles(uint32 port, const CounterStateType& before, const CounterStateType& after)$/;"	f	namespace:pcm
getQPIL1Cycles	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getQPIL1Cycles(uint32 port)$/;"	f	class:pcm::ServerPCICFGUncore
getQPIL1Cycles	cpucounters.h	/^uint64 getQPIL1Cycles(uint32 port, const CounterStateType& before, const CounterStateType& after)$/;"	f	namespace:pcm
getQPILLCounter	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getQPILLCounter(uint32 port, uint32 counter)$/;"	f	class:pcm::ServerPCICFGUncore
getQPILinkSpeed	cpucounters.h	/^    uint64 getQPILinkSpeed(const uint32 linkNr) const$/;"	f	class:pcm::ServerPCICFGUncore
getQPILinkSpeed	cpucounters.h	/^    uint64 getQPILinkSpeed(uint32 socketNr, uint32 linkNr) const$/;"	f	class:pcm::PCM
getQPILinksPerSocket	cpuasynchcounter.h	/^    uint32 getQPILinksPerSocket()$/;"	f	class:AsynchronCounterState
getQPILinksPerSocket	cpucounters.h	/^    uint64 getQPILinksPerSocket() const$/;"	f	class:pcm::PCM
getQPItoMCTrafficRatio	cpucounters.h	/^inline double getQPItoMCTrafficRatio(const SystemCounterState & before, const SystemCounterState & after)$/;"	f	namespace:pcm
getRawData_NoOverflowProtection	utils.h	/^    uint64 getRawData_NoOverflowProtection() const { return data; }$/;"	f	class:pcm::checked_uint64
getReadBw	pcm-pcie.h	/^uint64 BromolowPlatform::getReadBw()$/;"	f	class:BromolowPlatform
getReadBw	pcm-pcie.h	/^uint64 BromolowPlatform::getReadBw(uint socket, eventFilter filter)$/;"	f	class:BromolowPlatform
getReadBw	pcm-pcie.h	/^uint64 GrantleyPlatform::getReadBw()$/;"	f	class:GrantleyPlatform
getReadBw	pcm-pcie.h	/^uint64 GrantleyPlatform::getReadBw(uint socket, eventFilter filter)$/;"	f	class:GrantleyPlatform
getReadBw	pcm-pcie.h	/^uint64 PurleyPlatform::getReadBw()$/;"	f	class:PurleyPlatform
getReadBw	pcm-pcie.h	/^uint64 PurleyPlatform::getReadBw(uint socket, eventFilter filter)$/;"	f	class:PurleyPlatform
getRefCycles	cpucounters.h	/^uint64 getRefCycles(const CounterStateType & before, const CounterStateType & after) \/\/ clocks$/;"	f	namespace:pcm
getRelativeFrequency	cpucounters.h	/^double getRelativeFrequency(const CounterStateType & before, const CounterStateType & after) \/\/ fraction of nominal frequency$/;"	f	namespace:pcm
getRemoteMemoryBW	cpucounters.h	/^uint64 getRemoteMemoryBW(const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getRunState	cpucounters.h	/^    int getRunState(void) { return run_state; }$/;"	f	class:pcm::PCM
getSMICount	cpucounters.h	/^uint64 getSMICount(const CounterStateType & before, const CounterStateType & after)$/;"	f	namespace:pcm
getSMT	cpucounters.cpp	/^bool PCM::getSMT() const$/;"	f	class:pcm::PCM
getSecondRank	pcm-power.cpp	/^int getSecondRank(int imc_profile)$/;"	f
getSelfRefreshCycles	pcm-power.cpp	/^uint64 getSelfRefreshCycles(uint32 channel, const ServerUncoreCounterState & before, const ServerUncoreCounterState & after)$/;"	f
getSelfRefreshTransitions	pcm-power.cpp	/^uint64 getSelfRefreshTransitions(uint32 channel, const ServerUncoreCounterState & before, const ServerUncoreCounterState & after)$/;"	f
getServerUncoreCounterState	cpucounters.cpp	/^ServerUncoreCounterState PCM::getServerUncoreCounterState(uint32 socket)$/;"	f	class:pcm::PCM
getSocket	cpuasynchcounter.h	/^    T getSocket(int param, uint32 socket)$/;"	f	class:AsynchronCounterState
getSocket	cpuasynchcounter.h	/^    T getSocket(uint32 socket)$/;"	f	class:AsynchronCounterState
getSocket	cpuasynchcounter.h	/^    T getSocket(uint32 socket, uint32 param)$/;"	f	class:AsynchronCounterState
getSocketCounter	pcm-sensor-server.cpp	/^    SocketCounterState const getSocketCounter( std::shared_ptr<Aggregator> ag, uint32 sid ) const {$/;"	f	class:JSONPrinter
getSocketCounter	pcm-sensor-server.cpp	/^    SocketCounterState const getSocketCounter( std::shared_ptr<Aggregator> ag, uint32 sid ) const {$/;"	f	class:PrometheusPrinter
getSocketCounterState	cpucounters.cpp	/^SocketCounterState PCM::getSocketCounterState(uint32 socket)$/;"	f	class:pcm::PCM
getSocketCounterState	cpucounters.cpp	/^SocketCounterState getSocketCounterState(uint32 socket)$/;"	f	namespace:pcm
getSocketId	cpuasynchcounter.h	/^    uint32 getSocketId(uint32 c)$/;"	f	class:AsynchronCounterState
getSocketId	cpucounters.h	/^    int32 getSocketId(uint32 core_id) const { return (int32)topology[core_id].socket; }$/;"	f	class:pcm::PCM
getSocketIncomingQPILinkBytes	cpucounters.h	/^inline uint64 getSocketIncomingQPILinkBytes(uint32 socketNr, const SystemCounterState & now)$/;"	f	namespace:pcm
getSupportedUarchCodenames	cpucounters.cpp	/^std::string PCM::getSupportedUarchCodenames() const$/;"	f	class:pcm::PCM
getSystem	cpuasynchcounter.h	/^    T getSystem()$/;"	f	class:AsynchronCounterState
getSystem	cpuasynchcounter.h	/^    T getSystem(int param)$/;"	f	class:AsynchronCounterState
getSystemCounter	pcm-sensor-server.cpp	/^    SystemCounterState getSystemCounter( std::shared_ptr<Aggregator> ag ) const {$/;"	f	class:JSONPrinter
getSystemCounter	pcm-sensor-server.cpp	/^    SystemCounterState getSystemCounter( std::shared_ptr<Aggregator> ag ) const {$/;"	f	class:PrometheusPrinter
getSystemCounterState	cpucounters.cpp	/^SystemCounterState PCM::getSystemCounterState()$/;"	f	class:pcm::PCM
getSystemCounterState	cpucounters.cpp	/^SystemCounterState getSystemCounterState()$/;"	f	namespace:pcm
getSystemTopology	cpucounters.h	/^    SystemRoot const & getSystemTopology() const {$/;"	f	class:pcm::PCM
getThermalHeadroom	cpucounters.h	/^    int32 getThermalHeadroom() const { return ThermalHeadroom; }$/;"	f	class:pcm::BasicCounterState
getThermalHeadroom	cpucounters.h	/^int32 getThermalHeadroom(const CounterStateType & \/* before *\/, const CounterStateType & after)$/;"	f	namespace:pcm
getThreadId	cpucounters.h	/^    int32 getThreadId(uint32 os_id) const { return (int32)topology[os_id].thread_id; }$/;"	f	class:pcm::PCM
getThreadsPerCore	cpucounters.cpp	/^uint32 PCM::getThreadsPerCore() const$/;"	f	class:pcm::PCM
getTickCount	cpucounters.cpp	/^uint64 PCM::getTickCount(uint64 multiplier, uint32 core)$/;"	f	class:pcm::PCM
getTickCountRDTSCP	cpucounters.cpp	/^uint64 PCM::getTickCountRDTSCP(uint64 multiplier)$/;"	f	class:pcm::PCM
getTileId	cpucounters.h	/^    int32 getTileId(uint32 os_id) const { return (int32)topology[os_id].tile_id; }$/;"	f	class:pcm::PCM
getTimestamp	daemon/daemon/daemon.cpp	/^	uint64 Daemon::getTimestamp()$/;"	f	class:PCMDaemon::Daemon
getTopologyInfo	MacMSRDriver/DriverInterface.c	/^kern_return_t getTopologyInfo(io_connect_t connect, topologyEntry* data, size_t* data_size)$/;"	f
getTotalExecUsage	cpucounters.h	/^inline double getTotalExecUsage(const SystemCounterState & before, const SystemCounterState & after) \/\/ usage$/;"	f	namespace:pcm
getUArchCodename	cpucounters.cpp	/^const char * PCM::getUArchCodename(const int32 cpu_model_param) const$/;"	f	class:pcm::PCM
getUBOXCounter	cpucounters.h	/^uint64 getUBOXCounter(uint32 counter, const CounterStateType& before, const CounterStateType& after)$/;"	f	namespace:pcm
getUPIL0TxCycles	cpucounters.cpp	/^uint64 ServerPCICFGUncore::getUPIL0TxCycles(uint32 port)$/;"	f	class:pcm::ServerPCICFGUncore
getUncoreClocks	cpucounters.cpp	/^uint64 PCM::getUncoreClocks(const uint32 socket_)$/;"	f	class:pcm::PCM
getUncoreClocks	cpucounters.h	/^uint64 getUncoreClocks(const CounterStateType& before, const CounterStateType& after)$/;"	f	namespace:pcm
getUncoreCounterStates	cpucounters.cpp	/^void PCM::getUncoreCounterStates(SystemCounterState & systemState, std::vector<SocketCounterState> & socketStates)$/;"	f	class:pcm::PCM
getUnsupportedMessage	cpucounters.cpp	/^std::string PCM::getUnsupportedMessage() const$/;"	f	class:pcm::PCM
getWriteBw	pcm-pcie.h	/^uint64 BromolowPlatform::getWriteBw()$/;"	f	class:BromolowPlatform
getWriteBw	pcm-pcie.h	/^uint64 BromolowPlatform::getWriteBw(uint socket, eventFilter filter)$/;"	f	class:BromolowPlatform
getWriteBw	pcm-pcie.h	/^uint64 GrantleyPlatform::getWriteBw()$/;"	f	class:GrantleyPlatform
getWriteBw	pcm-pcie.h	/^uint64 GrantleyPlatform::getWriteBw(uint socket, eventFilter filter)$/;"	f	class:GrantleyPlatform
getWriteBw	pcm-pcie.h	/^uint64 PurleyPlatform::getWriteBw()$/;"	f	class:PurleyPlatform
getWriteBw	pcm-pcie.h	/^uint64 PurleyPlatform::getWriteBw(uint socket, eventFilter filter)$/;"	f	class:PurleyPlatform
getXPICounter	cpucounters.h	/^uint64 getXPICounter(uint32 port, uint32 counter, const CounterStateType& before, const CounterStateType& after)$/;"	f	namespace:pcm
get_IIO_Samples	pcm-iio.cpp	/^result_content get_IIO_Samples(PCM *m, vector<struct iio_skx> iio_skx_v, struct counter ctr, uint32_t delay_ms)$/;"	f
get_frequency_from_cpuid	cpucounters.cpp	/^uint64 get_frequency_from_cpuid() \/\/ from Pat Fay (Intel)$/;"	f	namespace:pcm
getopt	freegetopt/getopt.cpp	/^int getopt(int argc, char** argv, char* optstr)$/;"	f
global	cpucounters.cpp	/^    bool global;$/;"	m	class:pcm::InstanceLock	file:
globalSemaphore	cpucounters.cpp	/^    sem_t * globalSemaphore;$/;"	m	class:pcm::InstanceLock	file:
globalSemaphoreName	cpucounters.cpp	/^    const char * globalSemaphoreName;$/;"	m	class:pcm::InstanceLock	file:
good	cpucounters.cpp	/^bool PCM::good()$/;"	f	class:pcm::PCM
gpCounterCfg	cpucounters.h	/^        EventSelectRegister * gpCounterCfg;   \/\/ general purpose counters, if NULL, then default configuration performed for GP counters$/;"	m	struct:pcm::PCM::ExtendedCustomCoreEventDescription
groupName_	daemon/daemon/daemon.h	/^		std::string groupName_;$/;"	m	class:PCMDaemon::Daemon
groupnr	cpucounters.h	/^    uint32 groupnr;$/;"	m	class:pcm::ServerPCICFGUncore
hDriver	msr.h	/^    HANDLE hDriver;$/;"	m	class:pcm::MsrHandle
hDriver	pci.h	/^    HANDLE hDriver;$/;"	m	class:pcm::PciHandle
hOpenLibSys	cpucounters.cpp	/^HMODULE hOpenLibSys = NULL;$/;"	m	namespace:pcm	file:
hSCManager	PCM_Win/windriver.h	/^    SC_HANDLE hSCManager;$/;"	m	class:pcm::Driver
hService	PCM_Win/windriver.h	/^    SC_HANDLE hService;$/;"	m	class:pcm::Driver
h_event_name	lspci.h	/^  std::string h_event_name;$/;"	m	struct:pcm::counter
h_id	lspci.h	/^    uint32_t h_id;$/;"	m	struct:pcm::counter
h_id	lspci.h	/^typedef uint32_t h_id;$/;"	t	namespace:pcm
haPMUs	cpucounters.h	/^    UncorePMUVector haPMUs;$/;"	m	class:pcm::ServerPCICFGUncore
handle	cpucounters.h	/^    std::shared_ptr<CounterWidthExtender> handle;$/;"	m	class:pcm::CounterWidthExtenderRegister
handle	cpucounters.h	/^    std::shared_ptr<MMIORange> handle;$/;"	m	class:pcm::MMIORegister32
handle	cpucounters.h	/^    std::shared_ptr<MMIORange> handle;$/;"	m	class:pcm::MMIORegister64
handle	cpucounters.h	/^    std::shared_ptr<PciHandleType> handle;$/;"	m	class:pcm::PCICFGRegister32
handle	cpucounters.h	/^    std::shared_ptr<PciHandleType> handle;$/;"	m	class:pcm::PCICFGRegister64
handle	cpucounters.h	/^    std::shared_ptr<SafeMsrHandle> handle;$/;"	m	class:pcm::MSRRegister
handleClose	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^void PcmMsrDriverClassName::handleClose(IOService* forClient, IOOptionBits opts){$/;"	f	class:PcmMsrDriverClassName
handleIsOpen	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^bool PcmMsrDriverClassName::handleIsOpen(const IOService* forClient) const{$/;"	f	class:PcmMsrDriverClassName
handleOpen	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^bool PcmMsrDriverClassName::handleOpen(IOService * forClient, IOOptionBits opts, void* args){$/;"	f	class:PcmMsrDriverClassName
handleSignal	pcm-sensor-server.cpp	/^void SignalHandler::handleSignal( int signum )$/;"	f	class:SignalHandler
hasBecktonUncore	cpucounters.h	/^    bool hasBecktonUncore() const$/;"	f	class:pcm::PCM
hasCHA	cpucounters.h	/^    bool hasCHA() const$/;"	f	class:pcm::PCM
hasClientMCCounters	cpucounters.h	/^    bool hasClientMCCounters() const$/;"	f	class:pcm::PCM
hasFragment_	pcm-sensor-server.cpp	/^    bool hasFragment_;$/;"	m	struct:URL	file:
hasHeader	pcm-sensor-server.cpp	/^    bool hasHeader( std::string const & header ) const {$/;"	f	class:HTTPMessage
hasHost_	pcm-sensor-server.cpp	/^    bool hasHost_;$/;"	m	struct:URL	file:
hasPCICFGUncore	cpucounters.h	/^    bool hasPCICFGUncore() const \/\/ has PCICFG uncore PMON$/;"	f	class:pcm::PCM
hasPasswd_	pcm-sensor-server.cpp	/^    bool hasPasswd_;$/;"	m	struct:URL	file:
hasPort_	pcm-sensor-server.cpp	/^    bool hasPort_;$/;"	m	struct:URL	file:
hasQuery_	pcm-sensor-server.cpp	/^    bool hasQuery_;$/;"	m	struct:URL	file:
hasScheme_	pcm-sensor-server.cpp	/^    bool hasScheme_;$/;"	m	struct:URL	file:
hasUPI	cpucounters.h	/^    bool hasUPI() const \/\/ Intel(r) Ultra Path Interconnect$/;"	f	class:pcm::PCM
hasUser_	pcm-sensor-server.cpp	/^    bool hasUser_;$/;"	m	struct:URL	file:
headerName	pcm-sensor-server.cpp	/^    std::string headerName() { return name_; }$/;"	f	class:HTTPHeader
headerType	pcm-sensor-server.cpp	/^    static enum HeaderType headerType( std::string const & str ) {$/;"	f	class:HTTPHeaderProperties
headerTypeAsString	pcm-sensor-server.cpp	/^    static std::string const& headerTypeAsString( enum HeaderType ht ) {$/;"	f	class:HTTPHeaderProperties::std
headerTypeToString_	pcm-sensor-server.cpp	/^    std::unordered_map<enum HeaderType, std::string, std::hash<int>> const headerTypeToString_ = {$/;"	m	class:HTTPHeaderProperties::std	file:
headerValueAsDouble	pcm-sensor-server.cpp	/^    double headerValueAsDouble() const {$/;"	f	class:HTTPHeader
headerValueAsList	pcm-sensor-server.cpp	/^    std::vector<std::string> const headerValueAsList() const {$/;"	f	class:HTTPHeader::std
headerValueAsMimeType	pcm-sensor-server.cpp	/^    enum MimeType headerValueAsMimeType() const {$/;"	f	class:HTTPHeader
headerValueAsNumber	pcm-sensor-server.cpp	/^    size_t headerValueAsNumber() const {$/;"	f	class:HTTPHeader
headerValueAsString	pcm-sensor-server.cpp	/^    std::string const & headerValueAsString() const {$/;"	f	class:HTTPHeader::std
header_type	lspci.h	/^    int8_t header_type;$/;"	m	struct:pcm::pci
headers_	pcm-sensor-server.cpp	/^    std::unordered_map<std::string, HTTPHeader> headers_;$/;"	m	class:HTTPMessage	file:
hierarchy_	pcm-sensor-server.cpp	/^    std::vector<std::string> hierarchy_;$/;"	m	class:PrometheusPrinter	file:
high	types.h	/^        DWORD high;$/;"	m	struct:pcm::cvt_ds::__anon23
host	pcm-sensor-server.cpp	/^    std::string const host() const {$/;"	f	class:HTTPMessage::std
host_	pcm-sensor-server.cpp	/^    std::string host_;$/;"	m	struct:URL	file:
hs_	pcm-sensor-server.cpp	/^    HTTPServer*       hs_;$/;"	m	class:PeriodicCounterFetcher	file:
hs_	pcm-sensor-server.cpp	/^    HTTPServer*  hs_;$/;"	m	class:HTTPConnection	file:
httpHeaderProperties	pcm-sensor-server.cpp	/^    std::vector<HTTPHeaderProperty> const httpHeaderProperties = {$/;"	m	class:HTTPHeaderProperties::std	file:
httpMethodProperties	pcm-sensor-server.cpp	/^    std::vector<struct HTTPMethodProperty> const httpMethodProperties = {$/;"	m	class:HTTPMethodProperties::std	file:
httpServer_	pcm-sensor-server.cpp	/^    static HTTPServer* httpServer_;$/;"	m	class:SignalHandler	file:
httpServer_	pcm-sensor-server.cpp	/^HTTPServer* SignalHandler::httpServer_ = nullptr;$/;"	m	class:SignalHandler	file:
http_callback	pcm-sensor-server.cpp	/^typedef void (*http_callback)( HTTPServer *, HTTPRequest const &, HTTPResponse & );$/;"	t	file:
hyperThread	topology.h	/^    HyperThread* hyperThread( size_t threadNo ) const {$/;"	f	class:pcm::Core
iMC_PMM_MemoryMode_Miss_socket	pcm-memory.cpp	/^    float iMC_PMM_MemoryMode_Miss_socket[max_sockets];$/;"	m	struct:memdata	file:
iMC_PMM_MemoryMode_Miss_socket_chan	pcm-memory.cpp	/^    float iMC_PMM_MemoryMode_Miss_socket_chan[max_sockets][ServerUncoreCounterState::maxChannels];$/;"	m	struct:memdata	file:
iMC_PMM_Rd_socket	pcm-memory.cpp	/^    float iMC_PMM_Rd_socket[max_sockets];$/;"	m	struct:memdata	file:
iMC_PMM_Rd_socket_chan	pcm-memory.cpp	/^    float iMC_PMM_Rd_socket_chan[max_sockets][ServerUncoreCounterState::maxChannels];$/;"	m	struct:memdata	file:
iMC_PMM_Wr_socket	pcm-memory.cpp	/^    float iMC_PMM_Wr_socket[max_sockets];$/;"	m	struct:memdata	file:
iMC_PMM_Wr_socket_chan	pcm-memory.cpp	/^    float iMC_PMM_Wr_socket_chan[max_sockets][ServerUncoreCounterState::maxChannels];$/;"	m	struct:memdata	file:
iMC_Rd_socket	pcm-memory.cpp	/^    float iMC_Rd_socket[max_sockets];$/;"	m	struct:memdata	file:
iMC_Rd_socket_chan	pcm-memory.cpp	/^    float iMC_Rd_socket_chan[max_sockets][ServerUncoreCounterState::maxChannels];$/;"	m	struct:memdata	file:
iMC_Wr_socket	pcm-memory.cpp	/^    float iMC_Wr_socket[max_sockets];$/;"	m	struct:memdata	file:
iMC_Wr_socket_chan	pcm-memory.cpp	/^    float iMC_Wr_socket_chan[max_sockets][ServerUncoreCounterState::maxChannels];$/;"	m	struct:memdata	file:
iMCbus	cpucounters.h	/^    int32 iMCbus,UPIbus,M2Mbus;$/;"	m	class:pcm::ServerPCICFGUncore
iclEventDefinition	pcm-tsx.cpp	/^const vector<TSXEvent> iclEventDefinition = {$/;"	v
idx	lspci.h	/^    int idx; \/* Some counters need to be placed in specific index *\/$/;"	m	struct:pcm::counter
ignoreSignal	pcm-sensor-server.cpp	/^    void ignoreSignal( int signum ) {$/;"	f	class:SignalHandler
ignored	types.h	/^            uint64 ignored : 1;$/;"	m	struct:pcm::IIOPMUCNTCTLRegister::__anon21::__anon22
iioPMUs	cpucounters.h	/^    std::vector<std::map<int32, UncorePMU> > iioPMUs;$/;"	m	class:pcm::PCM
iio_skx	lspci.h	/^struct iio_skx {$/;"	s	namespace:pcm
iio_stack_names	pcm-iio.cpp	/^static const std::string iio_stack_names[6] = {$/;"	v	file:
imcPMUs	cpucounters.h	/^    UncorePMUVector imcPMUs;$/;"	m	class:pcm::ServerPCICFGUncore
in_tx	types.h	/^            uint64 in_tx : 1;$/;"	m	struct:pcm::EventSelectRegister::__anon10::__anon11
in_txcp	types.h	/^            uint64 in_txcp : 1;$/;"	m	struct:pcm::EventSelectRegister::__anon10::__anon11
inc_sel	types.h	/^            uint64 inc_sel : 5;$/;"	m	struct:pcm::BecktonUncorePMUCNTCTLRegister::__anon19::__anon20
incoming	daemon/daemon/common.h	/^		PCMQPISocketCounter incoming[MAX_SOCKETS];$/;"	m	struct:PCMDaemon::PCMQPI
incomingQPIPackets	cpucounters.h	/^    std::vector<std::vector<uint64> > incomingQPIPackets; \/\/ each 64 byte$/;"	m	class:pcm::SystemCounterState
incomingQPITrafficMetricsAvailable	cpucounters.h	/^    bool incomingQPITrafficMetricsAvailable() const$/;"	f	class:pcm::PCM
incomingQPITrafficMetricsAvailable	daemon/daemon/common.h	/^		bool incomingQPITrafficMetricsAvailable;$/;"	m	struct:PCMDaemon::PCMQPI
incomingTotal	daemon/daemon/common.h	/^		uint64 incomingTotal;$/;"	m	struct:PCMDaemon::PCMQPI
incrementNumClients	MacMSRDriver/DriverInterface.c	/^kern_return_t incrementNumClients(io_connect_t connect, uint32_t* num_insts)$/;"	f
incrementNumInstances	MacMSRDriver/MSRAccessor.cpp	/^uint32_t MSRAccessor::incrementNumInstances(){$/;"	f	class:MSRAccessor
incrementNumInstances	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^IOReturn PcmMsrDriverClassName::incrementNumInstances(uint32_t* num_insts){$/;"	f	class:PcmMsrDriverClassName
incrementNumInstances	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::incrementNumInstances(uint32_t* num_insts){$/;"	f	class:PcmMsrClientClassName
incrementNumInstances	cpucounters.cpp	/^uint32 PCM::incrementNumInstances()$/;"	f	class:pcm::PCM
incrementNumInstances	msr.h	/^    uint32 incrementNumInstances()$/;"	f	class:pcm::SafeMsrHandle
increment_index	freegetopt/getopt.cpp	/^static void increment_index()$/;"	f	file:
indent_	pcm-sensor-server.cpp	/^        std::string indent_;$/;"	m	class:Indent	file:
indentation	pcm-sensor-server.cpp	/^    Indent            indentation;$/;"	m	class:JSONPrinter	file:
indstr_	pcm-sensor-server.cpp	/^        std::string indstr_;$/;"	m	class:Indent	file:
indstrlen_	pcm-sensor-server.cpp	/^        size_t const indstrlen_;$/;"	m	class:Indent	file:
influxDBCore_Aggregate_Core_Counters	dashboard.cpp	/^std::string influxDBCore_Aggregate_Core_Counters(const std::string& S, const std::string& m)$/;"	f
influxDBCore_Aggregate_Core_Counters	dashboard.cpp	/^std::string influxDBCore_Aggregate_Core_Counters(const std::string& m)$/;"	f
influxDBUncore_Uncore_Counters	dashboard.cpp	/^std::string influxDBUncore_Uncore_Counters(const std::string& S, const std::string& m)$/;"	f
influxDB_Counters	dashboard.cpp	/^std::string influxDB_Counters(const std::string& S, const std::string& m, const char * domain)$/;"	f
influxDB_Counters	dashboard.cpp	/^std::string influxDB_Counters(const std::string& m, const char* domain)$/;"	f
init	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^bool PcmMsrDriverClassName::init(OSDictionary *dict)$/;"	f	class:PcmMsrDriverClassName
init	pcm-pcie.h	/^void IPlatform::init()$/;"	f	class:IPlatform
init	resctrl.cpp	/^    void Resctrl::init()$/;"	f	class:pcm::Resctrl
initBuses	cpucounters.cpp	/^void ServerPCICFGUncore::initBuses(uint32 socket_, const PCM * pcm)$/;"	f	class:pcm::ServerPCICFGUncore
initCHARequestEvents	cpucounters.cpp	/^void PCM::initCHARequestEvents(uint64 * config)$/;"	f	class:pcm::PCM
initCStateSupportTables	cpucounters.cpp	/^void PCM::initCStateSupportTables()$/;"	f	class:pcm::PCM
initDirect	cpucounters.cpp	/^void ServerPCICFGUncore::initDirect(uint32 socket_, const PCM * pcm)$/;"	f	class:pcm::ServerPCICFGUncore
initEnergyMonitoring	cpucounters.cpp	/^void PCM::initEnergyMonitoring()$/;"	f	class:pcm::PCM
initFreeze	cpucounters.cpp	/^bool UncorePMU::initFreeze(const uint32 extra, const char* xPICheckMsg)$/;"	f	class:pcm::UncorePMU
initLLCReadMissLatencyEvents	cpucounters.cpp	/^void PCM::initLLCReadMissLatencyEvents(uint64 * events, uint32 & opCode)$/;"	f	class:pcm::PCM
initMSR	cpucounters.cpp	/^bool PCM::initMSR()$/;"	f	class:pcm::PCM
initMemTest	cpucounters.cpp	/^void ServerPCICFGUncore::initMemTest(ServerPCICFGUncore::MemTestParam & param)$/;"	f	class:pcm::ServerPCICFGUncore
initPerf	cpucounters.cpp	/^void ServerPCICFGUncore::initPerf(uint32 socket_, const PCM * \/*pcm*\/)$/;"	f	class:pcm::ServerPCICFGUncore
initQOSevent	cpucounters.cpp	/^void PCM::initQOSevent(const uint64 event, const int32 core)$/;"	f	class:pcm::PCM
initRDT	cpucounters.cpp	/^void PCM::initRDT()$/;"	f	class:pcm::PCM
initRegisterLocations	cpucounters.cpp	/^void ServerPCICFGUncore::initRegisterLocations(const PCM * pcm)$/;"	f	class:pcm::ServerPCICFGUncore
initSocket2Bus	cpucounters.cpp	/^void ServerPCICFGUncore::initSocket2Bus(std::vector<std::pair<uint32, uint32> > & socket2bus, uint32 device, uint32 function, const uint32 DEV_IDS[], uint32 devIdsSize)$/;"	f	class:pcm::ServerPCICFGUncore
initUncoreObjects	cpucounters.cpp	/^void PCM::initUncoreObjects()$/;"	f	class:pcm::PCM
initUncorePMUsDirect	cpucounters.cpp	/^void PCM::initUncorePMUsDirect()$/;"	f	class:pcm::PCM
initUncorePMUsPerf	cpucounters.cpp	/^void PCM::initUncorePMUsPerf()$/;"	f	class:pcm::PCM
initWinRing0Lib	cpucounters.cpp	/^bool PCM::initWinRing0Lib()$/;"	f	class:pcm::PCM
initialiseSSL	pcm-sensor-server.cpp	/^    void initialiseSSL() {$/;"	f	class:HTTPSServer
initializeServerSocket	pcm-sensor-server.cpp	/^    int initializeServerSocket() {$/;"	f	class:Server	file:
inputBuffer_	pcm-sensor-server.cpp	/^    CharT inputBuffer_[SIZE];$/;"	m	class:basic_socketbuf	file:
insertListDelimiter	pcm-sensor-server.cpp	/^    void insertListDelimiter() {$/;"	f	class:JSONPrinter	file:
insert_rd	pcm-latency.cpp	/^    double insert_rd;$/;"	m	struct:core_info	file:
instRetHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable instRetHash_;$/;"	m	class:PCMServiceNS::MeasureThread
installHandler	pcm-sensor-server.cpp	/^    void installHandler( void (*handler)(int), int signum ) {$/;"	f	class:SignalHandler
install_driver	winpmem/winpmem.cpp	/^int WinPmem::install_driver(bool delete_driver) {$/;"	f	class:pcm::WinPmem
instance	cpucounters.cpp	/^PCM * PCM::instance = NULL;$/;"	m	class:pcm::PCM	file:
instance	cpucounters.h	/^    static PCM * instance;$/;"	m	class:pcm::PCM
instructionsPerCycle	daemon/daemon/common.h	/^		double instructionsPerCycle = 0.;$/;"	m	struct:PCMDaemon::PCMCoreCounter
instructionsRetired	daemon/daemon/common.h	/^		uint64 instructionsRetired = 0;$/;"	m	struct:PCMDaemon::PCMCoreCounter
int32	daemon/daemon/common.h	/^	typedef int int32;$/;"	t	namespace:PCMDaemon
int32	types.h	/^typedef signed int int32;$/;"	t	namespace:pcm
int64	daemon/daemon/common.h	/^	typedef long int64;$/;"	t	namespace:PCMDaemon
int64	types.h	/^typedef signed long long int64;$/;"	t	namespace:pcm
integers_	pcm-sensor-server.cpp	/^    std::vector<long long> integers_;$/;"	m	class:HTTPHeader	file:
internal_read	width_extender.h	/^    uint64 internal_read()$/;"	f	class:pcm::CounterWidthExtender
interval	dashboard.cpp	/^constexpr const char* interval = "[4s]";$/;"	v
invert	types.h	/^            uint64 invert : 1;$/;"	m	struct:pcm::EventSelectRegister::__anon10::__anon11
invert	types.h	/^            uint64 invert : 1;$/;"	m	struct:pcm::IIOPMUCNTCTLRegister::__anon21::__anon22
invert	types.h	/^            uint64 invert : 1;$/;"	m	struct:pcm::UncoreEventSelectRegister::__anon14::__anon15
ipcHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable ipcHash_;$/;"	m	class:PCMServiceNS::MeasureThread
isActiveRelativeFrequencyAvailable	cpucounters.h	/^    bool isActiveRelativeFrequencyAvailable() const$/;"	f	class:pcm::PCM
isAtom	cpucounters.h	/^    bool isAtom() const$/;"	f	class:pcm::PCM
isAtom	cpucounters.h	/^    static bool isAtom(const int32 cpu_model_)$/;"	f	class:pcm::PCM
isBlocked	cpucounters.h	/^    bool isBlocked(void) { return blocked; }$/;"	f	class:pcm::PCM
isCLX	cpucounters.h	/^    bool isCLX() const \/\/ Cascade Lake-SP$/;"	f	class:pcm::PCM
isCPUModelSupported	cpucounters.cpp	/^bool PCM::isCPUModelSupported(const int model_)$/;"	f	class:pcm::PCM
isCPX	cpucounters.h	/^    bool isCPX() const$/;"	f	class:pcm::PCM
isCPX	cpucounters.h	/^    static bool isCPX(int cpu_model_, int cpu_stepping_) \/\/ Cooper Lake$/;"	f	class:pcm::PCM
isClientCPU	cpucounters.h	/^    bool isClientCPU() const$/;"	f	class:pcm::PCM
isCoreCStateResidencySupported	cpucounters.h	/^    bool isCoreCStateResidencySupported(int state)$/;"	f	class:pcm::PCM
isCoreOnline	cpucounters.cpp	/^bool PCM::isCoreOnline(int32 os_core_id) const$/;"	f	class:pcm::PCM
isForceRTMAbortModeAvailable	cpucounters.cpp	/^bool PCM::isForceRTMAbortModeAvailable() const$/;"	f	class:pcm::PCM
isForceRTMAbortModeEnabled	cpucounters.cpp	/^bool PCM::isForceRTMAbortModeEnabled() const$/;"	f	class:pcm::PCM
isMounted	resctrl.cpp	/^    bool Resctrl::isMounted()$/;"	f	class:pcm::Resctrl
isNMIWatchdogEnabled	cpucounters.cpp	/^bool isNMIWatchdogEnabled()$/;"	f	namespace:pcm
isOnline	topology.h	/^    bool isOnline() const {$/;"	f	class:pcm::Core
isOnline	topology.h	/^    bool isOnline() const {$/;"	f	class:pcm::HyperThread
isOnline	topology.h	/^    bool isOnline() const {$/;"	f	class:pcm::Socket
isPackageCStateResidencySupported	cpucounters.h	/^    bool isPackageCStateResidencySupported(int state)$/;"	f	class:pcm::PCM
isRDTDisabled	cpucounters.cpp	/^bool PCM::isRDTDisabled() const$/;"	f	class:pcm::PCM
isSecureBoot	cpucounters.cpp	/^bool PCM::isSecureBoot() const$/;"	f	class:pcm::PCM
isServerCPU	cpucounters.h	/^    bool isServerCPU() const$/;"	f	class:pcm::PCM
isSkxCompatible	cpucounters.h	/^    bool isSkxCompatible() const$/;"	f	class:pcm::PCM
isSocketOnline	cpucounters.cpp	/^bool PCM::isSocketOnline(int32 socket_id) const$/;"	f	class:pcm::PCM
isSomeCoreOfflined	cpucounters.cpp	/^bool PCM::isSomeCoreOfflined()$/;"	f	class:pcm::PCM
iterateVectorAndCallAccept	pcm-sensor-server.cpp	/^void JSONPrinter::iterateVectorAndCallAccept(Vector const& v) {$/;"	f	class:JSONPrinter
iterateVectorAndCallAccept	pcm-sensor-server.cpp	/^void PrometheusPrinter::iterateVectorAndCallAccept(Vector const& v) {$/;"	f	class:PrometheusPrinter
joulesPerEnergyUnit	cpucounters.h	/^    double joulesPerEnergyUnit;$/;"	m	class:pcm::PCM
json_core_data	pmu-query.py	/^        json_core_data=urllib2.urlopen('https:\/\/download.01.org\/perfmon'+core_path)$/;"	v
json_offcore_data	pmu-query.py	/^        json_offcore_data=urllib2.urlopen('https:\/\/download.01.org\/perfmon'+offcore_path)$/;"	v
junk	lspci.h	/^            uint8_t junk;$/;"	m	struct:pcm::pci::__anon32::__anon33
kBuildTopology	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    kBuildTopology,$/;"	e	enum:__anon28
kCloseDriver	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    kCloseDriver,$/;"	e	enum:__anon28
kDecrementNumInstances	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    kDecrementNumInstances,$/;"	e	enum:__anon28
kGetNumInstances	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    kGetNumInstances,$/;"	e	enum:__anon28
kIncrementNumInstances	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    kIncrementNumInstances,$/;"	e	enum:__anon28
kMapMemory	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    kMapMemory,$/;"	e	enum:__anon28
kNumberOfMethods	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    kNumberOfMethods$/;"	e	enum:__anon28
kOpenDriver	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    kOpenDriver,$/;"	e	enum:__anon28
kPcmMsrDriverClassName	MacMSRDriver/MSRKernel.h	16;"	d
kPcmMsrDriverClassName	MacMSRDriver/PcmMsr/UserKernelShared.h	16;"	d
kRead	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    kRead,$/;"	e	enum:__anon28
kReadMSR	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    kReadMSR,$/;"	e	enum:__anon28
kReadMemory	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    kReadMemory,$/;"	e	enum:__anon28
kTopologyEntry	MacMSRDriver/PcmMsr/UserKernelShared.h	/^} kTopologyEntry;$/;"	t	typeref:struct:__anon27
kUnmapMemory	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    kUnmapMemory,$/;"	e	enum:__anon28
kWrite	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    kWrite,$/;"	e	enum:__anon28
kWriteMSR	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    kWriteMSR,$/;"	e	enum:__anon28
k_pcm_msr_data_t	MacMSRDriver/PcmMsr/UserKernelShared.h	/^} k_pcm_msr_data_t;$/;"	t	typeref:struct:__anon25
key	memoptest.cpp	/^    int key[1] = { 0 };$/;"	m	struct:T	file:
key	readmem.cpp	/^    int key[1] = { 0 };$/;"	m	struct:T	file:
key	realtime.cpp	/^    int key[1] = { 0 };$/;"	m	struct:T	file:
l2CacheHitRatio	daemon/daemon/common.h	/^		double l2CacheHitRatio = 0.;$/;"	m	struct:PCMDaemon::PCMCoreCounter
l2CacheMPI	daemon/daemon/common.h	/^		double l2CacheMPI = 0.;$/;"	m	struct:PCMDaemon::PCMCoreCounter
l2CacheMissHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable l2CacheMissHash_;$/;"	m	class:PCMServiceNS::MeasureThread
l2CacheMisses	daemon/daemon/common.h	/^		uint64 l2CacheMisses = 0;$/;"	m	struct:PCMDaemon::PCMCoreCounter
l3CacheHitRatio	daemon/daemon/common.h	/^		double l3CacheHitRatio = 0.;$/;"	m	struct:PCMDaemon::PCMCoreCounter
l3CacheMPI	daemon/daemon/common.h	/^		double l3CacheMPI = 0.;$/;"	m	struct:PCMDaemon::PCMCoreCounter
l3CacheMissHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable l3CacheMissHash_;$/;"	m	class:PCMServiceNS::MeasureThread
l3CacheMisses	daemon/daemon/common.h	/^		uint64 l3CacheMisses = 0;$/;"	m	struct:PCMDaemon::PCMCoreCounter
l3CacheOccupancy	daemon/daemon/common.h	/^		uint64 l3CacheOccupancy;$/;"	m	struct:PCMDaemon::PCMCoreCounter
l3CacheOccupancyAvailable	daemon/daemon/common.h	/^		bool l3CacheOccupancyAvailable;$/;"	m	struct:PCMDaemon::PCMCoreCounter
l3CacheReference	daemon/daemon/common.h	/^		uint64 l3CacheReference = 0;$/;"	m	struct:PCMDaemon::PCMCoreCounter
l3cache_occ_format	pcm.cpp	/^std::string l3cache_occ_format(uint64 o)$/;"	f
label	utils.h	/^    std::string label; \/\/ not used currently$/;"	m	struct:pcm::StackedBarItem
lastProgrammedCustomCounters	cpucounters.h	/^    std::vector<std::vector<EventSelectRegister> > lastProgrammedCustomCounters;$/;"	m	class:pcm::PCM
lastUpdateTscBegin	daemon/daemon/common.h	/^		uint64 lastUpdateTscBegin;$/;"	m	struct:PCMDaemon::SharedPCMState
lastUpdateTscEnd	daemon/daemon/common.h	/^		uint64 lastUpdateTscEnd;$/;"	m	struct:PCMDaemon::SharedPCMState
lastUpdatedClientTsc_	daemon/client/client.h	/^		PCMDaemon::uint64 lastUpdatedClientTsc_;$/;"	m	class:PCMDaemon::Client
lastValue	cpucounters.cpp	/^    uint64 lastValue;$/;"	m	class:pcm::PerfVirtualDummyUnitControlRegister	file:
lastValue	cpucounters.cpp	/^    uint64 lastValue;$/;"	m	class:pcm::PerfVirtualFilterRegister	file:
last_error	winpmem/winpmem.h	/^  TCHAR last_error[1024];$/;"	m	class:pcm::WinPmem
last_raw_value	width_extender.h	/^    uint64 last_raw_value;$/;"	m	class:pcm::CounterWidthExtender
latency	pcm-latency.cpp	/^    double latency;$/;"	m	struct:core_info	file:
latency	pcm-latency.cpp	/^    uint64_t latency;$/;"	m	struct:socket_info_pci	file:
len_	pcm-sensor-server.cpp	/^        size_t len_;$/;"	m	class:Indent	file:
length	types.h	/^    unsigned length;$/;"	m	struct:pcm::MCFGHeader
link_ctrl	lspci.h	/^            uint16_t link_ctrl;$/;"	m	struct:pcm::pci::__anon34::__anon35
link_info	lspci.h	/^        uint32_t link_info;$/;"	m	union:pcm::pci::__anon34
link_speed	lspci.h	/^                    uint16_t link_speed : 4;$/;"	m	struct:pcm::pci::__anon34::__anon35::__anon36::__anon37
link_sta	lspci.h	/^                uint16_t link_sta;$/;"	m	union:pcm::pci::__anon34::__anon35::__anon36
link_trained	lspci.h	/^                    uint16_t link_trained : 1;$/;"	m	struct:pcm::pci::__anon34::__anon35::__anon36::__anon37
link_width	lspci.h	/^                    uint16_t link_width : 6;$/;"	m	struct:pcm::pci::__anon34::__anon35::__anon36::__anon37
links	daemon/daemon/common.h	/^		PCMQPILinkCounter links[QPI_MAX_LINKS];$/;"	m	struct:PCMDaemon::PCMQPISocketCounter
linux_arch_perfmon	cpucounters.h	/^    bool linux_arch_perfmon = false;$/;"	m	class:pcm::PCM
listSeparatorChar	pcm-sensor-server.cpp	/^    static char listSeparatorChar( std::string const & headerName ) {$/;"	f	class:HTTPHeaderProperties
listSeparatorChar_	pcm-sensor-server.cpp	/^        char listSeparatorChar_;$/;"	m	struct:HTTPHeaderProperties::HTTPHeaderProperty	file:
listenIP_	pcm-sensor-server.cpp	/^    std::string& listenIP_;$/;"	m	class:Server	file:
load_PCIDB	lspci.h	/^void load_PCIDB(PCIDB & pciDB)$/;"	f	namespace:pcm
load_driver_	mmio.cpp	/^    virtual int load_driver_()$/;"	f	class:pcm::PCMPmem
load_events	pcm-iio.cpp	/^vector<struct counter> load_events(const char* fn)$/;"	f
localMemoryAccesses	daemon/daemon/common.h	/^		uint64 localMemoryAccesses = 0;$/;"	m	struct:PCMDaemon::PCMCoreCounter
localMemoryBW	daemon/daemon/common.h	/^		uint64 localMemoryBW;$/;"	m	struct:PCMDaemon::PCMCoreCounter
localMemoryBWAvailable	daemon/daemon/common.h	/^		bool localMemoryBWAvailable;$/;"	m	struct:PCMDaemon::PCMCoreCounter
localMemoryRequestRatioMetricAvailable	cpucounters.h	/^    bool localMemoryRequestRatioMetricAvailable() const$/;"	f	class:pcm::PCM
lock	msr.h	/^    void lock()$/;"	f	class:pcm::SafeMsrHandle
lock	mutex.h	/^        void lock()$/;"	f	class:pcm::Mutex
log_	PCM-Service_Win/PCMService.h	/^        System::Diagnostics::EventLog^ log_;$/;"	m	class:PCMServiceNS::MeasureThread
logicalID_	topology.h	/^    int32   logicalID_;$/;"	m	class:pcm::Socket
low	types.h	/^        DWORD low;$/;"	m	struct:pcm::cvt_ds::__anon23
m	cpuasynchcounter.h	/^    PCM * m;$/;"	m	class:AsynchronCounterState
m	cpucounters.cpp	/^    std::mutex m;$/;"	m	class:pcm::CoreTaskQueue	file:
m	mutex.h	/^            Mutex & m;$/;"	m	class:pcm::Mutex::Scope
m2mPMUs	cpucounters.h	/^    UncorePMUVector m2mPMUs;$/;"	m	class:pcm::ServerPCICFGUncore
m3upiPMUs	cpucounters.h	/^    UncorePMUVector m3upiPMUs;$/;"	m	class:pcm::ServerPCICFGUncore
m_	PCM-Service_Win/PCMService.h	/^        PCM* m_;$/;"	m	class:PCMServiceNS::MeasureThread
m_bandwidth	pcm-pcie.h	/^    bool m_bandwidth;$/;"	m	class:IPlatform
m_csv	pcm-pcie.h	/^    bool m_csv;$/;"	m	class:IPlatform
m_delay	pcm-pcie.h	/^    uint32 m_delay;$/;"	m	class:LegacyPlatform
m_pcm	pcm-pcie.h	/^    PCM *m_pcm;$/;"	m	class:IPlatform
m_socketCount	pcm-pcie.h	/^    uint m_socketCount;$/;"	m	class:IPlatform
m_verbose	pcm-pcie.h	/^    bool m_verbose;$/;"	m	class:IPlatform
main	c_example.c	/^int main(int argc, const char *argv[])$/;"	f
main	daemon/client/main.cpp	/^int main(int argc, char *argv[])$/;"	f
main	daemon/daemon/main.cpp	/^int main(int argc, char *argv[])$/;"	f
main	daemon/daemon/test/main.cpp	/^int main()$/;"	f
main	dashboardtest.cpp	/^int main()$/;"	f
main	memoptest.cpp	/^int main(int argc, char * argv[])$/;"	f
main	msrtest.cpp	/^int main()$/;"	f
main	pcm-core.cpp	/^int main(int argc, char * argv[])$/;"	f
main	pcm-iio.cpp	/^int main(int \/*argc*\/, char * \/*argv*\/[])$/;"	f
main	pcm-latency.cpp	/^int main(int argc, char * argv[])$/;"	f
main	pcm-lspci.cpp	/^int main(int \/*argc*\/, char * \/*argv*\/[])$/;"	f
main	pcm-memory.cpp	/^int main(int argc, char * argv[])$/;"	f
main	pcm-mmio.cpp	/^int main(int argc, char * argv[])$/;"	f
main	pcm-msr.cpp	/^int main(int argc, char * argv[])$/;"	f
main	pcm-numa.cpp	/^int main(int argc, char * argv[])$/;"	f
main	pcm-pcicfg.cpp	/^int main(int argc, char * argv[])$/;"	f
main	pcm-pcie.cpp	/^int main(int argc, char * argv[])$/;"	f
main	pcm-power.cpp	/^int main(int argc, char * argv[])$/;"	f
main	pcm-raw.cpp	/^int main(int argc, char* argv[])$/;"	f
main	pcm-sensor-server.cpp	/^int main( int argc, char* argv[] ) {$/;"	f
main	pcm-sensor.cpp	/^int main()$/;"	f
main	pcm-tsx.cpp	/^int main(int argc, char * argv[])$/;"	f
main	pcm.cpp	/^int main(int argc, char * argv[])$/;"	f
main	readmem.cpp	/^int main(int argc, char * argv[])$/;"	f
main	realtime.cpp	/^int main(int argc, char * argv[])$/;"	f
mapMemory	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^void* PcmMsrDriverClassName::mapMemory (uint32_t address, UInt8 **virtual_address)$/;"	f	class:PcmMsrDriverClassName
mapMemory	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::mapMemory(const uint64_t* input, uint32_t inputSize, uint64_t* output, uint32_t outputSize)$/;"	f	class:PcmMsrClientClassName
map_dict	pmu-query.py	/^    map_dict = csv.DictReader(map_file_raw)$/;"	v
map_file	pmu-query.py	/^    map_file = []$/;"	v
map_file_raw	pmu-query.py	/^    map_file_raw=urllib2.urlopen('https:\/\/download.01.org\/perfmon\/mapfile.csv')$/;"	v
mask	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    bool mask;$/;"	m	struct:__anon25
match	pcm-core.cpp	/^bool match(const char * subtoken, const char * name, int * result)$/;"	f
match	pcm-raw.cpp	/^bool match(const string& subtoken, const string& sname, uint64* result)$/;"	f
match	utils.h	/^    void match(std::istream & istr) const$/;"	f	class:pcm::s_expect
matchSupportedWithAcceptedMimeTypes	pcm-sensor-server.cpp	/^enum MimeType matchSupportedWithAcceptedMimeTypes( HTTPHeader const& h ) {$/;"	f
maxCBOs	cpucounters.h	/^        maxCBOs = 128,$/;"	e	enum:pcm::ServerUncoreCounterState::__anon7
maxChannels	cpucounters.h	/^        maxChannels = 8,$/;"	e	enum:pcm::ServerUncoreCounterState::__anon7
maxControllers	cpucounters.h	/^        maxControllers = 2,$/;"	e	enum:pcm::ServerUncoreCounterState::__anon7
maxCounters	cpucounters.h	/^        maxCounters = 4$/;"	e	enum:pcm::ServerUncoreCounterState::__anon7
maxIIOStacks	cpucounters.h	/^        maxIIOStacks = 16,$/;"	e	enum:pcm::ServerUncoreCounterState::__anon7
maxXPILinks	cpucounters.h	/^        maxXPILinks = 6,$/;"	e	enum:pcm::ServerUncoreCounterState::__anon7
max_cpuid	cpucounters.h	/^    int32 max_cpuid;$/;"	m	class:pcm::PCM
max_edc_channels	pcm-memory.cpp	/^const uint32 max_edc_channels = ServerUncoreCounterState::maxChannels;$/;"	v
max_imc_channels	pcm-memory.cpp	/^uint32 max_imc_channels = ServerUncoreCounterState::maxChannels;$/;"	v
max_imc_controllers	pcm-memory.cpp	/^const uint32 max_imc_controllers = ServerUncoreCounterState::maxControllers;$/;"	v
max_physical_memory_	winpmem/winpmem.h	/^  __int64 max_physical_memory_;$/;"	m	class:pcm::WinPmem
max_qpi_speed	cpucounters.h	/^    uint64 max_qpi_speed; \/\/ in GBytes\/second$/;"	m	class:pcm::PCM
max_sockets	pcm-iio.cpp	/^const uint8_t max_sockets = 4;$/;"	v
max_sockets	pcm-latency.cpp	/^const uint8_t max_sockets = 64;$/;"	v
max_sockets	pcm-pcie.h	/^const uint32 max_sockets = 4;$/;"	v
mcfgHeader	pci.h	/^    static MCFGHeader mcfgHeader;$/;"	m	class:pcm::PciHandleMM
mcfgRecords	pci.h	/^    static std::vector<MCFGRecord> mcfgRecords;$/;"	m	class:pcm::PciHandleMM
measure	realtime.cpp	/^void measure(DS & ds, size_t repeat, size_t nelements)$/;"	f
memdata	pcm-memory.cpp	/^typedef struct memdata {$/;"	s	file:
memdata_t	pcm-memory.cpp	/^} memdata_t;$/;"	t	typeref:struct:memdata	file:
memory	daemon/daemon/common.h	/^		PCMMemory memory;$/;"	m	struct:PCMDaemon::SharedPCMCounters
memoryIOTrafficMetricAvailable	cpucounters.h	/^    bool memoryIOTrafficMetricAvailable() const$/;"	f	class:pcm::PCM
memoryTrafficMetricsAvailable	cpucounters.h	/^    bool memoryTrafficMetricsAvailable() const$/;"	f	class:pcm::PCM
memory_bw_local	cpucounters.h	/^    std::vector<std::shared_ptr<CounterWidthExtender> > memory_bw_local;$/;"	m	class:pcm::PCM
memory_bw_total	cpucounters.h	/^    std::vector<std::shared_ptr<CounterWidthExtender> > memory_bw_total;$/;"	m	class:pcm::PCM
method	pcm-sensor-server.cpp	/^    enum HTTPRequestMethod method() const {$/;"	f	class:HTTPRequest
methodName_	pcm-sensor-server.cpp	/^        std::string methodName_;$/;"	m	struct:HTTPMethodProperties::HTTPMethodProperty	file:
method_	pcm-sensor-server.cpp	/^        enum HTTPRequestMethod method_;$/;"	m	struct:HTTPMethodProperties::HTTPMethodProperty	typeref:enum:HTTPMethodProperties::HTTPMethodProperty::HTTPRequestMethod	file:
method_	pcm-sensor-server.cpp	/^    enum HTTPRequestMethod method_;$/;"	m	class:HTTPRequest	typeref:enum:HTTPRequest::HTTPRequestMethod	file:
metric	dashboard.cpp	/^    std::string metric;$/;"	m	class:pcm::InfluxDBTarget	file:
mimeTypeMap	pcm-sensor-server.cpp	/^std::unordered_map<enum MimeType, std::string, std::hash<int>> mimeTypeMap = {$/;"	v
mimeTypeToOutputFormat	pcm-sensor-server.cpp	/^std::unordered_map<enum MimeType, enum OutputFormat, std::hash<int>> mimeTypeToOutputFormat = {$/;"	v
mmapAddr	pci.h	/^    char * mmapAddr;$/;"	m	class:pcm::PciHandleMM
mmioRange	client_bw.h	/^    std::shared_ptr<MMIORange> mmioRange;$/;"	m	class:pcm::ClientBW
mode	cpucounters.h	/^    ProgramMode mode;$/;"	m	class:pcm::PCM
mode_	daemon/daemon/daemon.h	/^		Mode mode_;$/;"	m	class:PCMDaemon::Daemon
mrbHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable mrbHash_;$/;"	m	class:PCMServiceNS::MeasureThread
msr	width_extender.h	/^        std::shared_ptr<SafeMsrHandle> msr;$/;"	m	struct:pcm::CounterWidthExtender::MBLCounter
msr	width_extender.h	/^        std::shared_ptr<SafeMsrHandle> msr;$/;"	m	struct:pcm::CounterWidthExtender::MBTCounter
msr	width_extender.h	/^        std::shared_ptr<SafeMsrHandle> msr;$/;"	m	struct:pcm::CounterWidthExtender::MsrHandleCounter
msrHandle	topology.h	/^    std::shared_ptr<SafeMsrHandle> msrHandle() const {$/;"	f	class:pcm::Core
msrHandle	topology.h	/^    std::shared_ptr<SafeMsrHandle> msrHandle() const {$/;"	f	class:pcm::HyperThread
msrHandle_	topology.h	/^    std::shared_ptr<SafeMsrHandle> msrHandle_;$/;"	m	class:pcm::HyperThread
msrLocalPath	PCM_Win/windriver.h	/^    static std::wstring msrLocalPath()$/;"	f	class:pcm::Driver
msr_addr	width_extender.h	/^        uint64 msr_addr;$/;"	m	struct:pcm::CounterWidthExtender::MsrHandleCounter
msr_address	WinMSRDriver/Win7/msrstruct.h	/^    ULONG64 msr_address;$/;"	m	struct:MSR_Request
msr_num	MacMSRDriver/MSRKernel.h	/^    uint32_t msr_num;$/;"	m	struct:__anon29
msr_num	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    uint32_t msr_num;$/;"	m	struct:__anon24
msr_num	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    uint32_t msr_num;$/;"	m	struct:__anon25
msr_value	pcm-core.cpp	/^	uint64 msr_value;$/;"	m	struct:CoreEvent	file:
multiplier	cpucounters.h	/^        int multiplier[4]; \/\/Some IIO event requires transformation to get meaningful output (i.e. DWord to bytes)$/;"	m	struct:pcm::PCM::CustomIIOEventDescription
multiplier	lspci.h	/^    int multiplier;$/;"	m	struct:pcm::counter
mutex	mmio.cpp	/^Mutex MMIORange::mutex;$/;"	m	class:pcm::MMIORange	file:
mutex	mmio.h	/^    static Mutex mutex;$/;"	m	class:pcm::MMIORange
mutex	msr.h	/^    Mutex mutex;$/;"	m	class:pcm::SafeMsrHandle
mutex_	mutex.h	/^        HANDLE mutex_;$/;"	m	class:pcm::Mutex
mwbHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable mwbHash_;$/;"	m	class:PCMServiceNS::MeasureThread
my_get_callback	pcm-sensor-server.cpp	/^void my_get_callback( HTTPServer* hs, HTTPRequest const & req, HTTPResponse & resp )$/;"	f
my_timestamp	memoptest.cpp	/^inline double my_timestamp()$/;"	f
my_timestamp	readmem.cpp	/^inline double my_timestamp()$/;"	f
my_timestamp	realtime.cpp	/^inline double my_timestamp()$/;"	f
nGPCounters	cpucounters.h	/^        uint32 nGPCounters;                   \/\/ number of general purpose counters$/;"	m	struct:pcm::PCM::ExtendedCustomCoreEventDescription
name	pcm-core.cpp	/^	char name[256];$/;"	m	struct:CoreEvent	file:
name	pcm-latency.cpp	/^    string name;$/;"	m	struct:res_core	file:
name	pcm-latency.cpp	/^    string name;$/;"	m	struct:res_uncore	file:
name	pcm-tsx.cpp	/^    const char * name;$/;"	m	struct:TSXEvent	file:
name	pmu-query.py	/^    name=raw_input("Event to query (empty enter to quit):")$/;"	v
name	pmu-query.py	/^name=raw_input("Event to query (empty enter to quit):")$/;"	v
nameMap	pcm-iio.cpp	/^map<string,std::pair<h_id,std::map<string,v_id>>> nameMap;$/;"	v
name_	pcm-sensor-server.cpp	/^        std::string     name_;$/;"	m	struct:HTTPHeaderProperties::HTTPHeaderProperty	file:
name_	pcm-sensor-server.cpp	/^    std::string name_;$/;"	m	class:HTTPHeader	file:
needToRestoreNMIWatchdog	cpucounters.h	/^    bool needToRestoreNMIWatchdog;$/;"	m	class:pcm::PCM
networkSocket_	pcm-sensor-server.cpp	/^    static int networkSocket_;$/;"	m	class:SignalHandler	file:
networkSocket_	pcm-sensor-server.cpp	/^int SignalHandler::networkSocket_ = 0;$/;"	m	class:SignalHandler	file:
noexcept	pcm-sensor-server.cpp	/^    Server( std::string listenIP, uint16_t port ) noexcept( false ) : listenIP_(listenIP), port_( port ) {$/;"	f	class:Server
nominal_frequency	cpucounters.h	/^    uint64 nominal_frequency;$/;"	m	class:pcm::PCM
nonopt	freegetopt/getopt.cpp	/^static int nonopt = 0;                 \/* How many nonopts we've found *\/$/;"	v	file:
now	pcm-sensor-server.cpp	/^        std::time_t now;$/;"	m	class:date	file:
now	pcm-sensor-server.cpp	/^        std::tm now;$/;"	m	class:datetime	file:
nrecords	types.h	/^    unsigned nrecords() const$/;"	f	struct:pcm::MCFGHeader
null_stream	utils.h	/^struct null_stream : public std::streambuf$/;"	s	namespace:pcm
numInstancesSemaphore	cpucounters.h	/^    HANDLE numInstancesSemaphore;     \/\/ global semaphore that counts the number of PCM instances on the system$/;"	m	class:pcm::PCM
numInstancesSemaphore	cpucounters.h	/^    sem_t * numInstancesSemaphore;$/;"	m	class:pcm::PCM
numOfChannels	daemon/daemon/common.h	/^		uint32 numOfChannels;$/;"	m	struct:PCMDaemon::PCMMemorySocketCounter
numOfCores	daemon/daemon/common.h	/^		uint32 numOfCores;$/;"	m	struct:PCMDaemon::PCMSystem
numOfOnlineCores	daemon/daemon/common.h	/^		uint32 numOfOnlineCores;$/;"	m	struct:PCMDaemon::PCMSystem
numOfOnlineSockets	daemon/daemon/common.h	/^		uint32 numOfOnlineSockets;$/;"	m	struct:PCMDaemon::PCMSystem
numOfQPILinksPerSocket	daemon/daemon/common.h	/^		uint32 numOfQPILinksPerSocket;$/;"	m	struct:PCMDaemon::PCMSystem
numOfSockets	daemon/daemon/common.h	/^		uint32 numOfSockets;$/;"	m	struct:PCMDaemon::PCMSystem
num_clients	MacMSRDriver/PcmMsr/PcmMsr.h	/^    uint32_t num_clients = 0;$/;"	m	class:PcmMsrDriverClassName
num_cores	MacMSRDriver/MSRAccessorPublic.h	/^    uint64_t num_cores;$/;"	m	class:MSRAccessor
num_cores	MacMSRDriver/PcmMsr/PcmMsr.h	/^    uint32_t num_cores;$/;"	m	class:PcmMsrDriverClassName
num_cores	cpucounters.h	/^    int32 num_cores;$/;"	m	class:pcm::PCM
num_imc_channels	cpucounters.h	/^    std::vector<uint32> num_imc_channels; \/\/ number of memory channels in each memory controller$/;"	m	class:pcm::ServerPCICFGUncore
num_online_cores	cpucounters.h	/^    int32 num_online_cores;$/;"	m	class:pcm::PCM
num_online_sockets	cpucounters.h	/^    int32 num_online_sockets;$/;"	m	class:pcm::PCM
num_phys_cores_per_socket	cpucounters.h	/^    int32 num_phys_cores_per_socket;$/;"	m	class:pcm::PCM
num_sockets	cpucounters.h	/^    int32 num_sockets;$/;"	m	class:pcm::PCM
numberOfIterations	utils.h	/^    unsigned numberOfIterations = 0;$/;"	m	class:pcm::MainLoop
occ_ctr_rst	types.h	/^            uint64 occ_ctr_rst : 1;$/;"	m	struct:pcm::UncoreEventSelectRegister::__anon14::__anon15
occ_rd	pcm-latency.cpp	/^    double occ_rd;$/;"	m	struct:core_info	file:
offcore_events	pmu-query.py	/^        offcore_events=json.load(json_offcore_data)$/;"	v
offcore_events	pmu-query.py	/^offcore_events=[]$/;"	v
offcore_path	pmu-query.py	/^                offcore_path = model['Filename']$/;"	v
offcore_path	pmu-query.py	/^    offcore_path = ''$/;"	v
offlinedThreadsAtStart	topology.h	/^    std::vector<HyperThread*> const & offlinedThreadsAtStart( void ) const {$/;"	f	class:pcm::SystemRoot::std
offlinedThreadsAtStart_	topology.h	/^    std::vector<HyperThread*> offlinedThreadsAtStart_;$/;"	m	class:pcm::SystemRoot
offset	cpucounters.h	/^    size_t offset;$/;"	m	class:pcm::MMIORegister32
offset	cpucounters.h	/^    size_t offset;$/;"	m	class:pcm::MMIORegister64
offset	cpucounters.h	/^    size_t offset;$/;"	m	class:pcm::MSRRegister
offset	cpucounters.h	/^    size_t offset;$/;"	m	class:pcm::PCICFGRegister32
offset	cpucounters.h	/^    size_t offset;$/;"	m	class:pcm::PCICFGRegister64
offset_0	lspci.h	/^        uint32_t offset_0;$/;"	m	union:pcm::pci::__anon30
offset_18	lspci.h	/^        uint32_t offset_18;$/;"	m	union:pcm::pci::__anon32
old_affinity	cpucounters.cpp	/^    cpu_set_t old_affinity;$/;"	m	class:pcm::TemporalThreadAffinity	file:
opcodeFieldMap	pcm-iio.cpp	/^map<string,PCM::PerfmonField> opcodeFieldMap;$/;"	v
open	pcm-sensor-server.cpp	/^    int open( std::string& hostname, uint16_t port ) {$/;"	f	class:basic_socketstream
openConnection	MacMSRDriver/MSRAccessor.cpp	/^kern_return_t MSRAccessor::openConnection(){$/;"	f	class:MSRAccessor
openMSRClient	MacMSRDriver/DriverInterface.c	/^kern_return_t openMSRClient(io_connect_t connect)$/;"	f
openUserClient	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::openUserClient(void)$/;"	f	class:PcmMsrClientClassName
operator ()	dashboard.cpp	/^    std::string operator () () const$/;"	f	class:Dashboard
operator ()	dashboard.cpp	/^    std::string operator () (const int id) const$/;"	f	class:BarGaugePanel
operator ()	dashboard.cpp	/^    std::string operator () (const int id) const$/;"	f	class:GaugePanel
operator ()	dashboard.cpp	/^    std::string operator () (const int id) const$/;"	f	class:GraphPanel
operator ()	dashboard.cpp	/^    std::string operator () (const std::string & refId) const$/;"	f	class:pcm::InfluxDBTarget
operator ()	utils.h	/^    void operator ()(Body body)$/;"	f	class:pcm::MainLoop
operator ()	width_extender.h	/^        uint64 operator () () { return clientBW->getImcReads(); }$/;"	f	struct:pcm::CounterWidthExtender::ClientImcReadsCounter
operator ()	width_extender.h	/^        uint64 operator () () { return clientBW->getImcWrites(); }$/;"	f	struct:pcm::CounterWidthExtender::ClientImcWritesCounter
operator ()	width_extender.h	/^        uint64 operator () () { return clientBW->getIoRequests(); }$/;"	f	struct:pcm::CounterWidthExtender::ClientIoRequestsCounter
operator ()	width_extender.h	/^        uint64 operator () ()$/;"	f	struct:pcm::CounterWidthExtender::MBLCounter
operator ()	width_extender.h	/^        uint64 operator () ()$/;"	f	struct:pcm::CounterWidthExtender::MBTCounter
operator ()	width_extender.h	/^        uint64 operator () ()$/;"	f	struct:pcm::CounterWidthExtender::MsrHandleCounter
operator ++	pcm-sensor-server.cpp	/^        Indent operator++(int) {$/;"	f	class:Indent
operator +=	cpucounters.h	/^    BasicCounterState & operator += (const BasicCounterState & o)$/;"	f	class:pcm::BasicCounterState
operator +=	cpucounters.h	/^    SocketCounterState& operator += ( const BasicCounterState& ccs )$/;"	f	class:pcm::SocketCounterState
operator +=	cpucounters.h	/^    SocketCounterState& operator += ( const UncoreCounterState& ucs )$/;"	f	class:pcm::SocketCounterState
operator +=	cpucounters.h	/^    SystemCounterState & operator += ( const SocketCounterState& scs )$/;"	f	class:pcm::SystemCounterState
operator +=	cpucounters.h	/^    SystemCounterState & operator += ( const UncoreCounterState& ucs )$/;"	f	class:pcm::SystemCounterState
operator +=	cpucounters.h	/^    UncoreCounterState & operator += (const UncoreCounterState & o)$/;"	f	class:pcm::UncoreCounterState
operator +=	utils.h	/^    const checked_uint64& operator += (const checked_uint64& o)$/;"	f	class:pcm::checked_uint64
operator -	utils.h	/^    uint64 operator - (const checked_uint64& o) const$/;"	f	class:pcm::checked_uint64
operator --	pcm-sensor-server.cpp	/^        Indent& operator--() {$/;"	f	class:Indent
operator <	lspci.h	/^bool operator < (const bdf &l, const bdf &r) {$/;"	f	namespace:pcm
operator <<	pcm-sensor-server.cpp	/^basic_socketstream<CharT, Traits>& operator<<( basic_socketstream<CharT, Traits>& ws, HTTPResponse& m ) {$/;"	f
operator <<	pcm-sensor-server.cpp	/^std::ostream& operator<<(  std::ostream& os, URL const & url ) {$/;"	f
operator <<	pcm-sensor-server.cpp	/^std::ostream& operator<<( std::ostream& os, date const & d ) {$/;"	f
operator <<	pcm-sensor-server.cpp	/^std::ostream& operator<<( std::ostream& os, datetime const & dt ) {$/;"	f
operator <<	pcm-sensor-server.cpp	/^std::stringstream& operator <<( std::stringstream& stream, Indent in ) {$/;"	f
operator <<	types.h	/^inline std::ostream & operator << (std::ostream & o, const FixedEventControlRegister & reg)$/;"	f	namespace:pcm
operator =	cpucounters.h	/^    SocketCounterState & operator = ( UncoreCounterState&& ucs ) {$/;"	f	class:pcm::SocketCounterState
operator ==	memoptest.cpp	/^    bool operator == (const T & k) const$/;"	f	struct:T
operator ==	readmem.cpp	/^    bool operator == (const T & k) const$/;"	f	struct:T
operator ==	realtime.cpp	/^    bool operator == (const T & k) const$/;"	f	struct:T
operator >>	pcm-sensor-server.cpp	/^basic_socketstream<CharT, Traits>& operator>>( basic_socketstream<CharT, Traits>& rs, HTTPRequest& m ) {$/;"	f
operator >>	utils.h	/^inline std::istream & operator >> (std::istream & istr, s_expect && s)$/;"	f	namespace:pcm
operator >>	utils.h	/^inline std::istream & operator >> (std::istream && istr, s_expect && s)$/;"	f	namespace:pcm
operator uint64	types.h	/^    operator uint64() { return value; }$/;"	f	struct:pcm::IIOPMUCNTCTLRegister
opt_offset	freegetopt/getopt.cpp	/^static int opt_offset = 0;             \/* Index into compounded "-option" *\/$/;"	v	file:
optarg	freegetopt/getopt.cpp	/^char* optarg = NULL;$/;"	v
opterr	freegetopt/getopt.cpp	/^int opterr = 1;$/;"	v
optind	freegetopt/getopt.cpp	/^int optind = 0;$/;"	v
optopt	freegetopt/getopt.cpp	/^int optopt = '?';$/;"	v
os	types.h	/^            uint64 os : 1;$/;"	m	struct:pcm::EventSelectRegister::__anon10::__anon11
os0	types.h	/^            uint64 os0 : 1;$/;"	m	struct:pcm::FixedEventControlRegister::__anon12::__anon13
os1	types.h	/^            uint64 os1 : 1;$/;"	m	struct:pcm::FixedEventControlRegister::__anon12::__anon13
os2	types.h	/^            uint64 os2 : 1;$/;"	m	struct:pcm::FixedEventControlRegister::__anon12::__anon13
osID	topology.h	/^    int32 osID() const {$/;"	f	class:pcm::HyperThread
osID_	topology.h	/^    int32 osID_;$/;"	m	class:pcm::HyperThread
os_id	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    uint32_t os_id;$/;"	m	struct:__anon26
os_id	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    uint32_t os_id;$/;"	m	struct:__anon27
os_id	cpucounters.h	/^    int32 os_id;$/;"	m	struct:pcm::TopologyEntry
out_fd_	winpmem/winpmem.h	/^  HANDLE out_fd_;$/;"	m	class:pcm::WinPmem
outfile	cpucounters.h	/^    std::ofstream * outfile;       \/\/ output file stream$/;"	m	class:pcm::PCM
outgoing	daemon/daemon/common.h	/^		PCMQPISocketCounter outgoing[MAX_SOCKETS];$/;"	m	struct:PCMDaemon::PCMQPI
outgoingQPIFlits	cpucounters.h	/^    std::vector<std::vector<uint64> > outgoingQPIFlits; \/\/ idle or data\/non-data flits depending on the architecture$/;"	m	class:pcm::SystemCounterState
outgoingQPITrafficMetricsAvailable	cpucounters.h	/^    bool outgoingQPITrafficMetricsAvailable() const$/;"	f	class:pcm::PCM
outgoingQPITrafficMetricsAvailable	daemon/daemon/common.h	/^		bool outgoingQPITrafficMetricsAvailable;$/;"	m	struct:PCMDaemon::PCMQPI
outgoingTotal	daemon/daemon/common.h	/^		uint64 outgoingTotal;$/;"	m	struct:PCMDaemon::PCMQPI
outputBuffer_	pcm-sensor-server.cpp	/^    CharT outputBuffer_[SIZE];$/;"	m	class:basic_socketbuf	file:
overflow	pcm-sensor-server.cpp	/^    virtual int_type overflow( int_type ch ) {$/;"	f	class:basic_socketbuf
overflow	utils.h	/^    void overflow(char) { }$/;"	f	struct:pcm::null_stream
overflow_enable	types.h	/^            uint64 overflow_enable : 1;$/;"	m	struct:pcm::IIOPMUCNTCTLRegister::__anon21::__anon22
overflows	utils.h	/^    uint64 overflows;$/;"	m	class:pcm::checked_uint64
override	pcm-sensor-server.cpp	/^    virtual void execute() override;$/;"	m	class:PeriodicCounterFetcher	file:
override	pcm-sensor-server.cpp	/^    virtual void run() override;$/;"	m	class:HTTPServer	file:
override	topology.h	/^    virtual UncoreCounterState uncoreCounterState( void ) const override;$/;"	m	class:pcm::ServerUncore
override	topology.h	/^    virtual void dispatch( SystemRoot const& syp ) override;$/;"	m	class:pcm::Aggregator
p	pmu-query.py	/^        p = subprocess.Popen(['.\/pcm-core.exe -c'],stdout=subprocess.PIPE,shell=True) $/;"	v
p	pmu-query.py	/^        p = subprocess.Popen(['.\/pcm-core.x -c'],stdout=subprocess.PIPE,shell=True)$/;"	v
p	pmu-query.py	/^        p = subprocess.Popen(['pcm-core.exe', '-c'],stdout=subprocess.PIPE,shell=True)$/;"	v
pHandle	msr.h	/^    std::shared_ptr<MsrHandle> pHandle;$/;"	m	class:pcm::SafeMsrHandle
p_status	pmu-query.py	/^    p_status = p.wait()$/;"	v
packageEnergyHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable packageEnergyHash_;$/;"	m	class:PCMServiceNS::MeasureThread
packageEnergyMetricsAvailable	cpucounters.h	/^    bool packageEnergyMetricsAvailable() const$/;"	f	class:pcm::PCM
packageEnergyMetricsAvailable	daemon/daemon/common.h	/^		bool packageEnergyMetricsAvailable;$/;"	m	struct:PCMDaemon::PCMCore
packageThermalMetricsAvailable	cpucounters.h	/^    bool packageThermalMetricsAvailable() const$/;"	f	class:pcm::PCM
padding	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    char padding[108];$/;"	m	struct:__anon27
padding	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    char padding[115];$/;"	m	struct:__anon25
panels	dashboard.cpp	/^    std::vector<std::shared_ptr<Panel>> panels;$/;"	m	class:Dashboard	file:
parameters_	pcm-sensor-server.cpp	/^    std::vector<std::pair<std::string,std::string>> parameters_;$/;"	m	class:HTTPHeader	file:
parse	pcm-sensor-server.cpp	/^    static HTTPHeader parse( std::string& header ) {$/;"	f	class:HTTPHeader
parse	pcm-sensor-server.cpp	/^    static URL parse( std::string fullURL ) {$/;"	f	struct:URL
parseArg	utils.h	/^    bool parseArg(const char * arg)$/;"	f	class:pcm::MainLoop
partialWrite	daemon/daemon/common.h	/^		float partialWrite;$/;"	m	struct:PCMDaemon::PCMMemorySocketCounter
partial_write	pcm-memory.cpp	/^    uint64 partial_write[max_sockets];$/;"	m	struct:memdata	file:
parts	lspci.h	/^        } parts[4]; \/* part 0, 1, 2, 3 *\/$/;"	m	struct:pcm::iio_skx::__anon38	typeref:struct:pcm::iio_skx::__anon38::__anon39
passwd_	pcm-sensor-server.cpp	/^    std::string passwd_;$/;"	m	struct:URL	file:
pathIsStar_	pcm-sensor-server.cpp	/^    bool pathIsStar_;$/;"	m	struct:URL	file:
path_	pcm-sensor-server.cpp	/^    std::string path_;$/;"	m	struct:URL	file:
pause	pcm-sensor-server.cpp	/^    void pause( void ) {$/;"	f	class:PeriodicCounterFetcher
pbox_init_err	types.h	/^            uint64 pbox_init_err : 1;$/;"	m	struct:pcm::BecktonUncorePMUZDPCTLFVCRegister::__anon16::__anon17
pbox_init_err	types.h	/^            uint64 pbox_init_err : 1;$/;"	m	struct:pcm::BecktonUncorePMUZDPCTLFVCRegister::__anon16::__anon18
pcf_	pcm-sensor-server.cpp	/^    PeriodicCounterFetcher* pcf_;$/;"	m	class:HTTPServer	file:
pci	lspci.h	/^struct pci {$/;"	s	namespace:pcm
pciAddress	pci.h	/^    DWORD pciAddress;$/;"	m	class:pcm::PciHandle
pciDevName	cpucounters.h	/^        std::string pciDevName;$/;"	m	struct:pcm::PCM::SimplePCIeDevInfo
pci_driver_driverinterface_h	MacMSRDriver/PCIDriverInterface.h	17;"	d
pcm	PCM_Win/restrictDriverAccess.cpp	/^namespace pcm {$/;"	n	file:
pcm	PCM_Win/windriver.h	/^namespace pcm {$/;"	n
pcm	client_bw.cpp	/^namespace pcm {$/;"	n	file:
pcm	client_bw.h	/^namespace pcm {$/;"	n
pcm	cpucounters.cpp	/^namespace pcm {$/;"	n	file:
pcm	cpucounters.h	/^namespace pcm {$/;"	n
pcm	daemon/daemon/common.h	/^		SharedPCMCounters pcm;$/;"	m	struct:PCMDaemon::SharedPCMState
pcm	dashboard.cpp	/^namespace pcm {$/;"	n	file:
pcm	dashboard.h	/^namespace pcm {$/;"	n
pcm	debug.cpp	/^namespace pcm {$/;"	n	file:
pcm	debug.h	/^namespace pcm {$/;"	n
pcm	lspci.h	/^namespace pcm {$/;"	n
pcm	mmio.cpp	/^namespace pcm {$/;"	n	file:
pcm	mmio.h	/^namespace pcm {$/;"	n
pcm	msr.cpp	/^namespace pcm {$/;"	n	file:
pcm	msr.h	/^namespace pcm {$/;"	n
pcm	mutex.h	/^namespace pcm$/;"	n
pcm	pci.cpp	/^namespace pcm {$/;"	n	file:
pcm	pci.h	/^namespace pcm {$/;"	n
pcm	resctrl.cpp	/^namespace pcm$/;"	n	file:
pcm	resctrl.h	/^        PCM & pcm;$/;"	m	class:pcm::Resctrl
pcm	resctrl.h	/^namespace pcm$/;"	n
pcm	threadpool.cpp	/^namespace pcm {$/;"	n	file:
pcm	threadpool.h	/^namespace pcm {$/;"	n
pcm	topology.cpp	/^namespace pcm {$/;"	n	file:
pcm	topology.h	/^namespace pcm {$/;"	n
pcm	types.h	/^namespace pcm {$/;"	n
pcm	utils.cpp	/^namespace pcm {$/;"	n	file:
pcm	utils.h	/^namespace pcm {$/;"	n
pcm	width_extender.h	/^namespace pcm {$/;"	n
pcm	winpmem/winpmem.cpp	/^namespace pcm {$/;"	n	file:
pcm	winpmem/winpmem.h	/^namespace pcm {$/;"	n
pcmInstance_	daemon/daemon/daemon.h	/^		PCM* pcmInstance_;$/;"	m	class:PCMDaemon::Daemon
pcm_	topology.h	/^    PCM*                      pcm_;$/;"	m	class:pcm::Core
pcm_	topology.h	/^    PCM*                      pcm_;$/;"	m	class:pcm::SystemRoot
pcm_	topology.h	/^    PCM*    pcm_;$/;"	m	class:pcm::Socket
pcm_	topology.h	/^    PCM*   pcm_;$/;"	m	class:pcm::HyperThread
pcm_	topology.h	/^    PCM*  pcm_;$/;"	m	class:pcm::Uncore
pcm_c_build_core_event	c_example.c	/^	int (*pcm_c_build_core_event)(uint8_t id, const char * argv);$/;"	m	struct:__anon8	file:
pcm_c_build_core_event	pcm-core.cpp	/^	int pcm_c_build_core_event(uint8_t idx, const char * argv)$/;"	f
pcm_c_get_core_event	c_example.c	/^	uint64_t (*pcm_c_get_core_event)(uint32_t core_id, uint32_t event_id);$/;"	m	struct:__anon8	file:
pcm_c_get_core_event	pcm-core.cpp	/^	uint64_t pcm_c_get_core_event(uint32_t core_id, uint32_t event_id)$/;"	f
pcm_c_get_cycles	c_example.c	/^	uint64_t (*pcm_c_get_cycles)(uint32_t core_id);$/;"	m	struct:__anon8	file:
pcm_c_get_cycles	pcm-core.cpp	/^	uint64_t pcm_c_get_cycles(uint32_t core_id)$/;"	f
pcm_c_get_instr	c_example.c	/^	uint64_t (*pcm_c_get_instr)(uint32_t core_id);$/;"	m	struct:__anon8	file:
pcm_c_get_instr	pcm-core.cpp	/^	uint64_t pcm_c_get_instr(uint32_t core_id)$/;"	f
pcm_c_init	c_example.c	/^	int (*pcm_c_init)();$/;"	m	struct:__anon8	file:
pcm_c_init	pcm-core.cpp	/^	int pcm_c_init()$/;"	f
pcm_c_start	c_example.c	/^	void (*pcm_c_start)();$/;"	m	struct:__anon8	file:
pcm_c_start	pcm-core.cpp	/^	void pcm_c_start()$/;"	f
pcm_c_stop	c_example.c	/^	void (*pcm_c_stop)();$/;"	m	struct:__anon8	file:
pcm_c_stop	pcm-core.cpp	/^	void pcm_c_stop()$/;"	f
pcm_cpuid	cpucounters.cpp	/^void pcm_cpuid(const unsigned leaf, const unsigned subleaf, PCM_CPUID_INFO & info)$/;"	f	namespace:pcm
pcm_cpuid	cpucounters.cpp	/^void pcm_cpuid(int leaf, PCM_CPUID_INFO & info)$/;"	f	namespace:pcm
pcm_getcpu	c_example.c	/^int pcm_getcpu()$/;"	f
pcm_localtime	utils.h	/^inline tm pcm_localtime()$/;"	f	namespace:pcm
pcm_msr_data_t	MacMSRDriver/MSRKernel.h	/^} pcm_msr_data_t;$/;"	t	typeref:struct:__anon29
pcm_msr_data_t	MacMSRDriver/PcmMsr/UserKernelShared.h	/^} pcm_msr_data_t;$/;"	t	typeref:struct:__anon24
pcm_sscanf	utils.h	/^typedef std::istringstream pcm_sscanf;$/;"	t	namespace:pcm
pcuPMUs	cpucounters.h	/^    std::vector<UncorePMU> pcuPMUs;$/;"	m	class:pcm::PCM
perfEventHandle	cpucounters.h	/^    std::vector<std::vector<int> > perfEventHandle;$/;"	m	class:pcm::PCM
perfmon_config_anythread	cpucounters.h	/^    int32 perfmon_config_anythread;$/;"	m	class:pcm::PCM
perfmon_version	cpucounters.h	/^    uint32 perfmon_version;$/;"	m	class:pcm::PCM
permute_argv_once	freegetopt/getopt.cpp	/^static int permute_argv_once()$/;"	f	file:
pin_control	types.h	/^            uint64 pin_control : 1;$/;"	m	struct:pcm::EventSelectRegister::__anon10::__anon11
pkgCStateMsr	cpucounters.h	/^    uint64 * pkgCStateMsr;     \/\/ MSR addresses of package C-state free-running counters$/;"	m	class:pcm::PCM
pkgMaximumPower	cpucounters.h	/^    int32 pkgThermalSpecPower, pkgMinimumPower, pkgMaximumPower;$/;"	m	class:pcm::PCM
pkgMinimumPower	cpucounters.h	/^    int32 pkgThermalSpecPower, pkgMinimumPower, pkgMaximumPower;$/;"	m	class:pcm::PCM
pkgThermalSpecPower	cpucounters.h	/^    int32 pkgThermalSpecPower, pkgMinimumPower, pkgMaximumPower;$/;"	m	class:pcm::PCM
pmem	mmio.cpp	/^std::shared_ptr<WinPmem> MMIORange::pmem;$/;"	m	class:pcm::MMIORange	file:
pmem	mmio.h	/^    static std::shared_ptr<WinPmem> pmem;$/;"	m	class:pcm::MMIORange
pmi_en	types.h	/^            uint64 pmi_en : 1;$/;"	m	struct:pcm::BecktonUncorePMUCNTCTLRegister::__anon19::__anon20
pmuID	cpucounters.cpp	/^    int pmuID;$/;"	m	class:pcm::PerfVirtualControlRegister	file:
pollIntervalMs_	daemon/client/client.h	/^		int pollIntervalMs_;$/;"	m	class:PCMDaemon::Client
pollIntervalMs_	daemon/daemon/daemon.h	/^		uint32 pollIntervalMs_;$/;"	m	class:PCMDaemon::Daemon
pollMs	daemon/daemon/common.h	/^		uint32 pollMs;$/;"	m	struct:PCMDaemon::SharedPCMState
populatePerfPMUs	cpucounters.cpp	/^void populatePerfPMUs(unsigned socket_, const std::vector<int> & ids, std::vector<UncorePMU> & pmus, bool fixed, bool filter0, bool filter1)$/;"	f	namespace:pcm
port_	pcm-sensor-server.cpp	/^    uint16_t     port_;$/;"	m	class:Server	file:
port_	pcm-sensor-server.cpp	/^    unsigned short port_;$/;"	m	struct:URL	file:
post_cleanup_callback	utils.cpp	/^void (*post_cleanup_callback)(void) = NULL;$/;"	m	namespace:pcm	file:
prefix	Makefile	/^	prefix=${DESTDIR}\/usr$/;"	m
prefix	Makefile	/^prefix=\/usr$/;"	m
prepare_data	pcm-iio.cpp	/^vector<struct data> prepare_data(const vector<uint64_t> &values, const vector<string> &headers)$/;"	f
prev_argc	freegetopt/getopt.cpp	/^static int prev_argc = 0;              \/*    tell if getopt params change *\/$/;"	v	file:
prev_argv	freegetopt/getopt.cpp	/^static char** prev_argv = NULL;        \/* Keep a copy of argv and argc to *\/$/;"	v	file:
primary_bus_number	lspci.h	/^            uint8_t primary_bus_number;$/;"	m	struct:pcm::pci::__anon32::__anon33
print	pcm-pcie.h	/^static void print(const vector<string> &listNames, bool csv)$/;"	f
print	pcm-raw.cpp	/^void print(PCM* m, vector<CoreCounterState>& BeforeState, vector<CoreCounterState>& AfterState, vector<ServerUncoreCounterState>& BeforeUncoreState, vector<ServerUncoreCounterState>& AfterUncoreState, const CsvOutputType outputType)$/;"	f
print	types.h	/^    void print()$/;"	f	struct:pcm::MCFGHeader
print	types.h	/^    void print()$/;"	f	struct:pcm::MCFGRecord
printAggregatedEvent	pcm-pcie.h	/^void LegacyPlatform::printAggregatedEvent(uint idx)$/;"	f	class:LegacyPlatform
printAggregatedEvents	pcm-pcie.h	/^void LegacyPlatform::printAggregatedEvents()$/;"	f	class:LegacyPlatform
printAll	pcm-raw.cpp	/^void printAll(PCM * m, vector<CoreCounterState>& BeforeState, vector<CoreCounterState>& AfterState, vector<ServerUncoreCounterState>& BeforeUncoreState, vector<ServerUncoreCounterState>& AfterUncoreState)$/;"	f
printBandwidth	pcm-pcie.h	/^void LegacyPlatform::printBandwidth()$/;"	f	class:LegacyPlatform
printBandwidth	pcm-pcie.h	/^void LegacyPlatform::printBandwidth(uint skt, eventFilter filter)$/;"	f	class:LegacyPlatform
printBasicCounterState	pcm-sensor-server.cpp	/^    void printBasicCounterState( BasicCounterState const& before, BasicCounterState const& after ) {$/;"	f	class:JSONPrinter	file:
printBasicCounterState	pcm-sensor-server.cpp	/^    void printBasicCounterState( BasicCounterState const& before, BasicCounterState const& after ) {$/;"	f	class:PrometheusPrinter	file:
printComment	pcm-sensor-server.cpp	/^    void printComment( std::string const &comment ) {$/;"	f	class:PrometheusPrinter	file:
printCounter	pcm-sensor-server.cpp	/^void JSONPrinter::printCounter( std::string const & name, Counter c ) {$/;"	f	class:JSONPrinter
printCounter	pcm-sensor-server.cpp	/^void PrometheusPrinter::printCounter( std::string const & name, Counter c ) {$/;"	f	class:PrometheusPrinter
printDate	pcm-sensor-server.cpp	/^        void printDate( std::ostream& os ) const {$/;"	f	class:date
printDateForCSV	utils.h	/^inline void printDateForCSV(const CsvOutputType outputType)$/;"	f	namespace:pcm
printDateTimeString	pcm-sensor-server.cpp	/^        void printDateTimeString( std::ostream& os ) const {$/;"	f	class:datetime
printEvents	pcm-pcie.h	/^void LegacyPlatform::printEvents()$/;"	f	class:LegacyPlatform
printExampleUsageAndExit	daemon/daemon/daemon.cpp	/^	void Daemon::printExampleUsageAndExit(char *argv[])$/;"	f	class:PCMDaemon::Daemon
printHeader	pcm-pcie.h	/^void LegacyPlatform::printHeader()$/;"	f	class:LegacyPlatform
printHelpText	pcm-sensor-server.cpp	/^void printHelpText( std::string const & programName ) {$/;"	f
printHierarchy	pcm-sensor-server.cpp	/^    std::string printHierarchy() {$/;"	f	class:PrometheusPrinter	file:
printIndentationString	pcm-sensor-server.cpp	/^        void printIndentationString(std::stringstream& s) {$/;"	f	class:Indent
printSocketBWFooter	pcm-memory.cpp	/^void printSocketBWFooter(uint32 no_columns, uint32 skt, const memdata_t *md)$/;"	f
printSocketBWHeader	pcm-memory.cpp	/^void printSocketBWHeader(uint32 no_columns, uint32 skt, const bool show_channel_output)$/;"	f
printSocketChannelBW	pcm-memory.cpp	/^void printSocketChannelBW(PCM *\/*m*\/, memdata_t *md, uint32 no_columns, uint32 skt)$/;"	f
printSocketChannelBW	pcm-memory.cpp	/^void printSocketChannelBW(uint32 no_columns, uint32 skt, uint32 num_imc_channels, const ServerUncoreCounterState * uncState1, const ServerUncoreCounterState * uncState2, uint64 elapsedTime, int rankA, int rankB)$/;"	f
printSocketRankBWHeader	pcm-memory.cpp	/^void printSocketRankBWHeader(uint32 no_columns, uint32 skt)$/;"	f
printSocketScopeEvent	pcm-pcie.h	/^void LegacyPlatform::printSocketScopeEvent(uint skt, eventFilter filter, uint idx)$/;"	f	class:LegacyPlatform
printSocketScopeEvents	pcm-pcie.h	/^void LegacyPlatform::printSocketScopeEvents(uint skt, eventFilter filter)$/;"	f	class:LegacyPlatform
printSystemCounterState	pcm-sensor-server.cpp	/^    void printSystemCounterState( SystemCounterState const& before, SystemCounterState const& after ) {$/;"	f	class:JSONPrinter	file:
printSystemCounterState	pcm-sensor-server.cpp	/^    void printSystemCounterState( SystemCounterState const& before, SystemCounterState const& after ) {$/;"	f	class:PrometheusPrinter	file:
printSystemTopology	cpucounters.cpp	/^void PCM::printSystemTopology() const$/;"	f	class:pcm::PCM
printTitle	daemon/client/main.cpp	/^void printTitle(std::string title)$/;"	f
printURL	pcm-sensor-server.cpp	/^    void printURL( std::ostream& os ) const {$/;"	f	struct:URL
printUncoreCounterState	pcm-sensor-server.cpp	/^    void printUncoreCounterState( SocketCounterState const& before, SocketCounterState const& after ) {$/;"	f	class:JSONPrinter	file:
printUncoreCounterState	pcm-sensor-server.cpp	/^    void printUncoreCounterState( SocketCounterState const& before, SocketCounterState const& after ) {$/;"	f	class:PrometheusPrinter	file:
print_all_stats	pcm-latency.cpp	/^void print_all_stats(PCM *m, bool enable_pmm, bool enable_verbose)$/;"	f
print_basic_metrics	pcm.cpp	/^void print_basic_metrics(const PCM * m, const State & state1, const State & state2)$/;"	f
print_basic_metrics_csv	pcm.cpp	/^void print_basic_metrics_csv(const PCM * m, const State & state1, const State & state2, const bool print_last_semicolon = true)$/;"	f
print_basic_metrics_csv_header	pcm.cpp	/^void print_basic_metrics_csv_header(const PCM * m)$/;"	f
print_basic_metrics_csv_semicolons	pcm.cpp	/^void print_basic_metrics_csv_semicolons(const PCM * m, string header)$/;"	f
print_basic_stats	pcm-tsx.cpp	/^void print_basic_stats(const StateType & BeforeState, const StateType & AfterState, bool csv)$/;"	f
print_core_stats	pcm-latency.cpp	/^void print_core_stats(PCM *m, unsigned int core_size_per_socket, vector<vector<vector<struct core_info >>> &sk_th)$/;"	f
print_cpu_details	utils.cpp	/^void print_cpu_details()$/;"	f	namespace:pcm
print_csv	pcm.cpp	/^void print_csv(PCM * m,$/;"	f
print_csv_header	pcm.cpp	/^void print_csv_header(PCM * m,$/;"	f
print_csv_header_helper	pcm.cpp	/^void print_csv_header_helper(string header, int count=1){$/;"	f
print_custom_stats	pcm-core.cpp	/^void print_custom_stats(const StateType & BeforeState, const StateType & AfterState ,bool csv, uint64 txn_rate)$/;"	f
print_custom_stats	pcm-tsx.cpp	/^void print_custom_stats(const StateType & BeforeState, const StateType & AfterState, bool csv)$/;"	f
print_ddr	pcm-latency.cpp	/^void print_ddr(PCM *m, int ddr_ip)$/;"	f
print_events	pcm-pcie.cpp	/^void print_events()$/;"	f
print_help	pcm-memory.cpp	/^void print_help(const string prog_name)$/;"	f
print_help	pcm.cpp	/^void print_help(const string prog_name)$/;"	f
print_help_force_rtm_abort_mode	utils.cpp	/^void print_help_force_rtm_abort_mode(const int alignment)$/;"	f	namespace:pcm
print_mcfg	cpucounters.cpp	/^void print_mcfg(const char * path)$/;"	f	namespace:pcm
print_nameMap	pcm-iio.cpp	/^void print_nameMap() {$/;"	f
print_other_metrics	pcm.cpp	/^void print_other_metrics(const PCM * m, const State & state1, const State & state2)$/;"	f
print_other_metrics_csv	pcm.cpp	/^void print_other_metrics_csv(const PCM * m, const State & state1, const State & state2)$/;"	f
print_output	pcm.cpp	/^void print_output(PCM * m,$/;"	f
print_pci	lspci.h	/^void print_pci(struct pci p, const PCIDB & pciDB)$/;"	f	namespace:pcm
print_stats	pcm-numa.cpp	/^void print_stats(const StateType & BeforeState, const StateType & AfterState, bool csv)$/;"	f
print_usage	pcm-core.cpp	/^void print_usage(const string progname)$/;"	f
print_usage	pcm-latency.cpp	/^void print_usage()$/;"	f
print_usage	pcm-mmio.cpp	/^void print_usage(const char* progname)$/;"	f
print_usage	pcm-msr.cpp	/^void print_usage(const char * progname)$/;"	f
print_usage	pcm-numa.cpp	/^void print_usage(const string progname)$/;"	f
print_usage	pcm-pcicfg.cpp	/^void print_usage(const char * progname)$/;"	f
print_usage	pcm-pcie.cpp	/^void print_usage(const string progname)$/;"	f
print_usage	pcm-power.cpp	/^void print_usage(const string progname)$/;"	f
print_usage	pcm-raw.cpp	/^void print_usage(const string progname)$/;"	f
print_usage	pcm-tsx.cpp	/^void print_usage(const string progname)$/;"	f
print_verbose	pcm-latency.cpp	/^void print_verbose(PCM *m, int ddr_ip)$/;"	f
privateKeyFile_	pcm-sensor-server.cpp	/^    std::string privateKeyFile_;$/;"	m	class:HTTPSServer	file:
probe_capability_pci_express	lspci.h	/^void probe_capability_pci_express(struct pci *p, uint32_t cap_ptr)$/;"	f	namespace:pcm
probe_pci	lspci.h	/^void probe_pci(struct pci *p)$/;"	f	namespace:pcm
processIntanceMutex	cpucounters.cpp	/^pthread_mutex_t processIntanceMutex = PTHREAD_MUTEX_INITIALIZER;$/;"	m	namespace:pcm	file:
program	cpucounters.cpp	/^PCM::ErrorCode PCM::program(const PCM::ProgramMode mode_, const void * parameter_)$/;"	f	class:pcm::PCM
program	cpucounters.cpp	/^PCM::ErrorCode PCM::program(const RawPMUConfigs& allPMUConfigs_)$/;"	f	class:pcm::PCM
program	cpucounters.cpp	/^void ServerPCICFGUncore::program()$/;"	f	class:pcm::ServerPCICFGUncore
program	cpucounters.h	/^    static void program(UncorePMU& pmu, const Iterator& eventsBegin, const Iterator& eventsEnd, const uint32 extra)$/;"	f	class:pcm::PCM
programBecktonUncore	cpucounters.cpp	/^void PCM::programBecktonUncore(int32 core)$/;"	f	class:pcm::PCM
programCbo	cpucounters.cpp	/^void PCM::programCbo()$/;"	f	class:pcm::PCM
programCbo	cpucounters.cpp	/^void PCM::programCbo(const uint64 * events, const uint32 opCode, const uint32 nc_, const uint32 llc_lookup_tid_filter, const uint32 loc, const uint32 rem)$/;"	f	class:pcm::PCM
programCboOpcodeFilter	cpucounters.cpp	/^void PCM::programCboOpcodeFilter(const uint32 opc0, UncorePMU & pmu, const uint32 nc_, const uint32 opc1, const uint32 loc, const uint32 rem)$/;"	f	class:pcm::PCM
programCboRaw	cpucounters.cpp	/^void PCM::programCboRaw(const uint64* events, const uint64 filter0, const uint64 filter1)$/;"	f	class:pcm::PCM
programCoreCounters	cpucounters.cpp	/^PCM::ErrorCode PCM::programCoreCounters(const int i \/* core *\/,$/;"	f	class:pcm::PCM
programEDC	cpucounters.cpp	/^void ServerPCICFGUncore::programEDC(const uint32 * EDCCntConfig)$/;"	f	class:pcm::ServerPCICFGUncore
programHA	cpucounters.cpp	/^void ServerPCICFGUncore::programHA()$/;"	f	class:pcm::ServerPCICFGUncore
programHA	cpucounters.cpp	/^void ServerPCICFGUncore::programHA(const uint32 * config)$/;"	f	class:pcm::ServerPCICFGUncore
programIIOCounters	cpucounters.cpp	/^void PCM::programIIOCounters(IIOPMUCNTCTLRegister rawEvents[4], int IIOStack)$/;"	f	class:pcm::PCM
programIMC	cpucounters.cpp	/^void ServerPCICFGUncore::programIMC(const uint32 * MCCntConfig)$/;"	f	class:pcm::ServerPCICFGUncore
programM2M	cpucounters.cpp	/^void ServerPCICFGUncore::programM2M()$/;"	f	class:pcm::ServerPCICFGUncore
programM2M	cpucounters.cpp	/^void ServerPCICFGUncore::programM2M(const uint64* M2MCntConfig)$/;"	f	class:pcm::ServerPCICFGUncore
programM3UPI	cpucounters.cpp	/^void ServerPCICFGUncore::programM3UPI(const uint32* M3UPICntConfig)$/;"	f	class:pcm::ServerPCICFGUncore
programNehalemEPUncore	cpucounters.cpp	/^void PCM::programNehalemEPUncore(int32 core)$/;"	f	class:pcm::PCM
programPCIeEventGroup	cpucounters.cpp	/^void PCM::programPCIeEventGroup(eventGroup_t &eventGroup)$/;"	f	class:pcm::PCM
programPCU	cpucounters.cpp	/^void PCM::programPCU(uint32* PCUCntConf, const uint64 filter)$/;"	f	class:pcm::PCM
programServerUncoreLatencyMetrics	cpucounters.cpp	/^PCM::ErrorCode PCM::programServerUncoreLatencyMetrics(bool enable_pmm)$/;"	f	class:pcm::PCM
programServerUncoreMemoryMetrics	cpucounters.cpp	/^PCM::ErrorCode PCM::programServerUncoreMemoryMetrics(int rankA, int rankB, bool PMM, bool PMMMixedMode)$/;"	f	class:pcm::PCM
programServerUncoreMemoryMetrics	cpucounters.cpp	/^void ServerPCICFGUncore::programServerUncoreMemoryMetrics(const int rankA, const int rankB, const bool PMM, const bool PMMMixedMode)$/;"	f	class:pcm::ServerPCICFGUncore
programServerUncorePowerMetrics	cpucounters.cpp	/^PCM::ErrorCode PCM::programServerUncorePowerMetrics(int mc_profile, int pcu_profile, int * freq_bands)$/;"	f	class:pcm::PCM
programUBOX	cpucounters.cpp	/^void PCM::programUBOX(const uint64* events)$/;"	f	class:pcm::PCM
programXPI	cpucounters.cpp	/^void ServerPCICFGUncore::programXPI(const uint32 * event)$/;"	f	class:pcm::ServerPCICFGUncore
program_power_metrics	cpucounters.cpp	/^void ServerPCICFGUncore::program_power_metrics(int mc_profile)$/;"	f	class:pcm::ServerPCICFGUncore
programmable	cpucounters.h	/^        std::vector<RawEventConfig> programmable;$/;"	m	struct:pcm::PCM::RawPMUConfig
programmed_pmu	cpucounters.h	/^    bool programmed_pmu;$/;"	m	class:pcm::PCM
prometheusCounters	dashboard.cpp	/^std::string prometheusCounters(const std::string& S, const std::string& m, const bool aggregate = true)$/;"	f
prometheusCounters	dashboard.cpp	/^std::string prometheusCounters(const std::string& m)$/;"	f
prometheusMetric	dashboard.cpp	/^std::string prometheusMetric(const std::string& m)$/;"	f
prometheusSocket	dashboard.cpp	/^std::string prometheusSocket(const std::string& S, const bool aggregate = true)$/;"	f
prometheusSystem	dashboard.cpp	/^std::string prometheusSystem()$/;"	f
prometheusSystem	dashboard.cpp	/^std::string prometheusSystem(const std::string& S)$/;"	f
protocol	pcm-sensor-server.cpp	/^    enum HTTPProtocol protocol() const {$/;"	f	class:HTTPMessage
protocolAsString	pcm-sensor-server.cpp	/^    std::string const & protocolAsString() const {$/;"	f	class:HTTPMessage::std
protocol_	pcm-sensor-server.cpp	/^    enum HTTPProtocol protocol_;$/;"	m	class:HTTPMessage	typeref:enum:HTTPMessage::HTTPProtocol	file:
protocol_	pcm-sensor-server.cpp	/^    std::string protocol_;$/;"	m	class:HTTPConnection	file:
protocol_map_	pcm-sensor-server.cpp	/^    std::unordered_map<enum HTTPProtocol, std::string, std::hash<int>> protocol_map_ = {$/;"	m	class:HTTPMessage	file:
push	cpucounters.cpp	/^    void push(std::packaged_task<void()> & task)$/;"	f	class:pcm::CoreTaskQueue
push	dashboard.cpp	/^    void push(const std::shared_ptr<Panel> & p)$/;"	f	class:Dashboard
push	dashboard.cpp	/^    void push(const std::shared_ptr<Target> & t)$/;"	f	namespace:pcm
putLine	pcm-sensor-server.cpp	/^    void putLine( std::string& line ) {$/;"	f	class:basic_socketstream
qMutex_	threadpool.h	/^    std::mutex qMutex_;$/;"	m	class:pcm::ThreadPool
qpi	PCM-Service_Win/PCMService.h	/^        bool qpi;$/;"	m	struct:PCMServiceNS::CollectionInformation
qpi	daemon/daemon/common.h	/^		PCMQPI qpi;$/;"	m	struct:PCMDaemon::SharedPCMCounters
qpiHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable qpiHash_;$/;"	m	class:PCMServiceNS::MeasureThread
qpiUtilizationMetricsAvailable	cpucounters.h	/^    bool qpiUtilizationMetricsAvailable() const$/;"	f	class:pcm::PCM
qpi_speed	cpucounters.h	/^    std::vector<uint64> qpi_speed;$/;"	m	class:pcm::ServerPCICFGUncore
queueCV_	threadpool.h	/^    std::condition_variable queueCV_;$/;"	m	class:pcm::ThreadPool
ranges_	pcm-sensor-server.cpp	/^    std::vector<std::pair<size_t,size_t>> ranges_;$/;"	m	class:HTTPHeader	file:
raw_counter	width_extender.h	/^    AbstractRawCounter * raw_counter;$/;"	m	class:pcm::CounterWidthExtender
rdmsr	MacMSRDriver/PcmMsr/PcmMsr.cpp	23;"	d	file:
read	MacMSRDriver/MSRAccessor.cpp	/^int32_t MSRAccessor::read(uint32_t core_num, uint64_t msr_num, uint64_t * value){$/;"	f	class:MSRAccessor
read	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^uint32_t PcmMsrDriverClassName::read(uint32_t pci_address)$/;"	f	class:PcmMsrDriverClassName
read	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::read(const uint64_t* input, uint32_t inputSize, uint64_t* output, uint32_t outputSize)$/;"	f	class:PcmMsrClientClassName
read	daemon/client/client.cpp	/^	PCMDaemon::SharedPCMState& Client::read()$/;"	f	class:PCMDaemon::Client
read	daemon/daemon/common.h	/^		float read;$/;"	m	struct:PCMDaemon::PCMMemoryChannelCounter
read	daemon/daemon/common.h	/^		float read;$/;"	m	struct:PCMDaemon::PCMMemorySocketCounter
read	daemon/daemon/common.h	/^		float read;$/;"	m	struct:PCMDaemon::PCMMemorySystemCounter
read	msr.cpp	/^int32 MsrHandle::read(uint64 msr_number, uint64 * value)$/;"	f	class:pcm::MsrHandle
read	msr.h	/^    int32 read(uint64 msr_number, uint64 * value)$/;"	f	class:pcm::SafeMsrHandle
read	width_extender.h	/^    uint64 read() \/\/ read extended value$/;"	f	class:pcm::CounterWidthExtender
read	winpmem/winpmem.h	/^  void read(__int64 start, T & result)$/;"	f	class:pcm::WinPmem
read32	mmio.cpp	/^uint32 MMIORange::read32(uint64 offset)$/;"	f	class:pcm::MMIORange
read32	mmio.h	/^    uint32 read32(uint64 offset)$/;"	f	class:pcm::MMIORange
read32	pci.cpp	/^int32 PciHandle::read32(uint64 offset, uint32 * value)$/;"	f	class:pcm::PciHandle
read64	mmio.cpp	/^uint64 MMIORange::read64(uint64 offset)$/;"	f	class:pcm::MMIORange
read64	mmio.h	/^    uint64 read64(uint64 offset)$/;"	f	class:pcm::MMIORange
read64	pci.cpp	/^int32 PciHandle::read64(uint64 offset, uint64 * value)$/;"	f	class:pcm::PciHandle
readAndAggregate	cpucounters.cpp	/^void BasicCounterState::readAndAggregate(std::shared_ptr<SafeMsrHandle> msr)$/;"	f	class:pcm::BasicCounterState
readAndAggregate	cpucounters.cpp	/^void UncoreCounterState::readAndAggregate(std::shared_ptr<SafeMsrHandle> msr)$/;"	f	class:pcm::UncoreCounterState
readAndAggregate	cpucounters.h	/^    void readAndAggregate(std::shared_ptr<SafeMsrHandle> handle)$/;"	f	class:pcm::SocketCounterState
readAndAggregate	cpucounters.h	/^    void readAndAggregate(std::shared_ptr<SafeMsrHandle> handle)$/;"	f	class:pcm::SystemCounterState
readAndAggregateEnergyCounters	cpucounters.cpp	/^void PCM::readAndAggregateEnergyCounters(const uint32 socket, CounterStateType & result)$/;"	f	class:pcm::PCM
readAndAggregateMemoryBWCounters	cpucounters.cpp	/^void PCM::readAndAggregateMemoryBWCounters(const uint32 core, CounterStateType & result)$/;"	f	class:pcm::PCM
readAndAggregatePackageCStateResidencies	cpucounters.cpp	/^void PCM::readAndAggregatePackageCStateResidencies(std::shared_ptr<SafeMsrHandle> msr, CounterStateType & result)$/;"	f	class:pcm::PCM
readAndAggregateTSC	cpucounters.cpp	/^void BasicCounterState::readAndAggregateTSC(std::shared_ptr<SafeMsrHandle> msr)$/;"	f	class:pcm::BasicCounterState
readAndAggregateUncoreMCCounters	cpucounters.cpp	/^void PCM::readAndAggregateUncoreMCCounters(const uint32 socket, CounterStateType & result)$/;"	f	class:pcm::PCM
readApplicationArguments	daemon/daemon/daemon.cpp	/^	void Daemon::readApplicationArguments(int argc, char *argv[])$/;"	f	class:PCMDaemon::Daemon
readCPUMicrocodeLevel	cpucounters.cpp	/^void PCM::readCPUMicrocodeLevel()$/;"	f	class:pcm::PCM
readChunkedData	pcm-sensor-server.cpp	/^    std::string readChunkedData( socketstream& in ) {$/;"	f	class:HTTPMessage
readCoreCounterConfig	cpucounters.cpp	/^void PCM::readCoreCounterConfig(const bool complainAboutMSR)$/;"	f	class:pcm::PCM
readData	pcm-sensor-server.cpp	/^    std::string readData( socketstream& in, size_t length ) {$/;"	f	class:HTTPMessage
readInternal	mmio.h	/^    void readInternal(uint64 offset, T & res)$/;"	f	class:pcm::MMIORange
readMSR	MacMSRDriver/DriverInterface.c	/^kern_return_t readMSR(io_connect_t connect, pcm_msr_data_t* idata, size_t* idata_size,pcm_msr_data_t* odata, size_t* odata_size)$/;"	f
readMSR	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^IOReturn PcmMsrDriverClassName::readMSR(pcm_msr_data_t* idatas,pcm_msr_data_t* odatas){$/;"	f	class:PcmMsrDriverClassName
readMSR	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::readMSR(pcm_msr_data_t* idata, pcm_msr_data_t* odata)$/;"	f	class:PcmMsrClientClassName
readMaxFromSysFS	cpucounters.cpp	/^int readMaxFromSysFS(const char * path)$/;"	f	namespace:pcm
readMemory	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::readMemory(const uint64_t* input, uint32_t inputSize, uint64_t* output, uint32_t outputSize)$/;"	f	class:PcmMsrClientClassName
readPackageThermalHeadroom	cpucounters.cpp	/^void PCM::readPackageThermalHeadroom(const uint32 socket, CounterStateType & result)$/;"	f	class:pcm::PCM
readPerfData	cpucounters.cpp	/^void PCM::readPerfData(uint32 core, std::vector<uint64> & outData)$/;"	f	class:pcm::PCM
readQPICounters	cpucounters.cpp	/^void PCM::readQPICounters(SystemCounterState & result)$/;"	f	class:pcm::PCM
readSysFS	cpucounters.cpp	/^std::string readSysFS(const char * path, bool silent = false)$/;"	f	namespace:pcm
read_intensive_task	memoptest.cpp	/^void read_intensive_task(Y * p, Y * e, int value)$/;"	f
read_ndctl_info	pcm-sensor-server.cpp	/^std::string read_ndctl_info( std::ofstream& logfile ) {$/;"	f
read_number	utils.cpp	/^uint64 read_number(char* str)$/;"	f	namespace:pcm
readonly	mmio.h	/^    const bool readonly;$/;"	m	class:pcm::MMIORange
refCore	topology.h	/^    Core* refCore() const {$/;"	f	class:pcm::Uncore
refCore_	topology.h	/^    Core*   refCore_;$/;"	m	class:pcm::Socket
refCore_	topology.h	/^    Core* refCore_;$/;"	m	class:pcm::Uncore
refId	dashboard.cpp	/^        char refId[] = "A";$/;"	m	class:pcm::InfluxDBTarget	file:
reg	WinMSRDriver/Win7/msrstruct.h	/^    ULONG bus, dev, func, reg, bytes;$/;"	m	struct:PCICFG_Request
reg	cpucounters.cpp	/^    struct { unsigned int eax, ebx, ecx, edx; } reg;$/;"	m	union:pcm::PCM_CPUID_INFO	typeref:struct:pcm::PCM_CPUID_INFO::__anon1	file:
registerCallback	pcm-sensor-server.cpp	/^    void registerCallback( HTTPRequestMethod rm, http_callback hc )$/;"	f	class:HTTPServer
regs	pcm-core.cpp	/^	EventSelectRegister regs[PERF_MAX_COUNTERS];$/;"	v
relFreqHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable relFreqHash_;$/;"	m	class:PCMServiceNS::MeasureThread
relativeFrequency	daemon/daemon/common.h	/^		double relativeFrequency = 0.;$/;"	m	struct:PCMDaemon::PCMCoreCounter
remoteMemoryAccesses	daemon/daemon/common.h	/^		uint64 remoteMemoryAccesses = 0;$/;"	m	struct:PCMDaemon::PCMCoreCounter
remoteMemoryBW	daemon/daemon/common.h	/^		uint64 remoteMemoryBW;$/;"	m	struct:PCMDaemon::PCMCoreCounter
remoteMemoryBWAvailable	daemon/daemon/common.h	/^		bool remoteMemoryBWAvailable;$/;"	m	struct:PCMDaemon::PCMCoreCounter
removeFromHierarchy	pcm-sensor-server.cpp	/^    void removeFromHierarchy() {$/;"	f	class:PrometheusPrinter	file:
removeNullTerminator	PCM_Win/windriver.h	/^    static void removeNullTerminator(std::wstring& s)$/;"	f	class:pcm::Driver
replaceIllegalCharsWithUnderbar	pcm-sensor-server.cpp	/^    std::string replaceIllegalCharsWithUnderbar( std::string const& s ) {$/;"	f	class:PrometheusPrinter	file:
reportQPISpeed	cpucounters.cpp	/^void PCM::reportQPISpeed() const$/;"	f	class:pcm::PCM
reportQPISpeed	cpucounters.cpp	/^void ServerPCICFGUncore::reportQPISpeed() const$/;"	f	class:pcm::ServerPCICFGUncore
requestHasBody	pcm-sensor-server.cpp	/^    static enum HTTPRequestHasBody requestHasBody( enum HTTPRequestMethod rme ) {$/;"	f	class:HTTPMethodProperties
requestHasBody_	pcm-sensor-server.cpp	/^        enum HTTPRequestHasBody requestHasBody_;$/;"	m	struct:HTTPMethodProperties::HTTPMethodProperty	typeref:enum:HTTPMethodProperties::HTTPMethodProperty::HTTPRequestHasBody	file:
res_core	pcm-latency.cpp	/^struct res_core$/;"	s	file:
res_uncore	pcm-latency.cpp	/^struct res_uncore$/;"	s	file:
resctrl	cpucounters.h	/^    Resctrl resctrl;$/;"	m	class:pcm::PCM
reserved	types.h	/^    char reserved[4];$/;"	m	struct:pcm::MCFGRecord
reserved	types.h	/^    char reserved[8];$/;"	m	struct:pcm::MCFGHeader
reserved1	types.h	/^            uint64 reserved1 : 1;$/;"	m	struct:pcm::IIOPMUCNTCTLRegister::__anon21::__anon22
reserved1	types.h	/^            uint64 reserved1 : 1;$/;"	m	struct:pcm::UncoreEventSelectRegister::__anon14::__anon15
reserved1	types.h	/^            uint64 reserved1 : 52;$/;"	m	struct:pcm::FixedEventControlRegister::__anon12::__anon13
reserved2	types.h	/^            uint64 reserved2 : 1;$/;"	m	struct:pcm::IIOPMUCNTCTLRegister::__anon21::__anon22
reserved2	types.h	/^            uint64 reserved2 : 1;$/;"	m	struct:pcm::UncoreEventSelectRegister::__anon14::__anon15
reserved3	types.h	/^            uint64 reserved3 : 1;$/;"	m	struct:pcm::UncoreEventSelectRegister::__anon14::__anon15
reservedX	types.h	/^            uint64 reservedX : 17;$/;"	m	struct:pcm::IIOPMUCNTCTLRegister::__anon21::__anon22
reservedX	types.h	/^            uint64 reservedX : 30;$/;"	m	struct:pcm::EventSelectRegister::__anon10::__anon11
reservedx	types.h	/^            uint64 reservedx : 32;$/;"	m	struct:pcm::UncoreEventSelectRegister::__anon14::__anon15
reset	types.h	/^            uint64 reset : 1;$/;"	m	struct:pcm::IIOPMUCNTCTLRegister::__anon21::__anon22
reset	width_extender.h	/^    void reset()$/;"	f	class:pcm::CounterWidthExtender
resetPMU	cpucounters.cpp	/^void PCM::resetPMU()$/;"	f	class:pcm::PCM
resetUnfreeze	cpucounters.cpp	/^void UncorePMU::resetUnfreeze(const uint32 extra)$/;"	f	class:pcm::UncorePMU
resolveGroupName	daemon/daemon/daemon.cpp	/^	gid_t Daemon::resolveGroupName(const std::string& groupName)$/;"	f	class:PCMDaemon::Daemon
resp	types.h	/^            uint64 resp : 3;$/;"	m	struct:pcm::BecktonUncorePMUZDPCTLFVCRegister::__anon16::__anon17
resp	types.h	/^            uint64 resp : 3;$/;"	m	struct:pcm::BecktonUncorePMUZDPCTLFVCRegister::__anon16::__anon18
responseBody_	pcm-sensor-server.cpp	/^    std::string responseBody_;$/;"	m	class:HTTPConnection	file:
responseCode	pcm-sensor-server.cpp	/^    enum HTTPResponseCode responseCode() const {$/;"	f	class:HTTPResponse
responseCodeAsString	pcm-sensor-server.cpp	/^    std::string responseCodeAsString() const {$/;"	f	class:HTTPResponse
responseCode_	pcm-sensor-server.cpp	/^    enum HTTPResponseCode responseCode_;$/;"	m	class:HTTPResponse	typeref:enum:HTTPResponse::HTTPResponseCode	file:
responseHasBody	pcm-sensor-server.cpp	/^    static bool responseHasBody( enum HTTPRequestMethod rme ) {$/;"	f	class:HTTPMethodProperties
responseHasBody_	pcm-sensor-server.cpp	/^        bool responseHasBody_;$/;"	m	struct:HTTPMethodProperties::HTTPMethodProperty	file:
responseHeader_	pcm-sensor-server.cpp	/^    std::vector<std::string> responseHeader_;$/;"	m	class:HTTPConnection	file:
response_map_	pcm-sensor-server.cpp	/^    std::unordered_map<enum HTTPResponseCode, std::string, std::hash<int>> response_map_ = {$/;"	m	class:HTTPResponse	file:
restoreOutput	cpucounters.cpp	/^void PCM::restoreOutput()$/;"	f	class:pcm::PCM
restore_signal_handlers	utils.cpp	/^void restore_signal_handlers(void)$/;"	f	namespace:pcm
restrictDriverAccess	PCM_Win/restrictDriverAccess.cpp	/^void restrictDriverAccess(LPCWSTR path)$/;"	f	namespace:pcm
result	dashboard.cpp	/^        result += "        \\"h\\": " + std::to_string(h);$/;"	m	class:pcm::InfluxDBTarget	file:
result	dashboard.cpp	/^        result += "        \\"w\\": " + std::to_string(w) + ",\\n";$/;"	m	class:pcm::InfluxDBTarget	file:
result	dashboard.cpp	/^        result += "        \\"y\\": " + std::to_string(y) + ",\\n";$/;"	m	class:pcm::InfluxDBTarget	file:
result	dashboard.cpp	/^        result += "\\n      ],\\n";$/;"	m	class:pcm::InfluxDBTarget	file:
result	dashboard.cpp	/^        result += R"PCMDELIMITER($/;"	m	class:pcm::InfluxDBTarget	file:
result_content	lspci.h	/^typedef std::vector<stack_content> result_content;$/;"	t	namespace:pcm
retrieveWork	threadpool.h	/^    Work* retrieveWork() {$/;"	f	class:pcm::ThreadPool
revision	types.h	/^    unsigned char revision;$/;"	m	struct:pcm::MCFGHeader
rinsert	pcm-latency.cpp	/^    double rinsert;$/;"	m	struct:socket_info_uncore	file:
rlatency	pcm-latency.cpp	/^    double rlatency;$/;"	m	struct:socket_info_uncore	file:
roccupancy	pcm-latency.cpp	/^    double roccupancy;$/;"	m	struct:socket_info_uncore	file:
root_pci_dev	lspci.h	/^            struct pci root_pci_dev;   \/* single device represent root port *\/$/;"	m	struct:pcm::iio_skx::__anon38::__anon39	typeref:struct:pcm::iio_skx::__anon38::__anon39::pci
rsv1	types.h	/^            uint64 rsv1 : 1;$/;"	m	struct:pcm::BecktonUncorePMUCNTCTLRegister::__anon19::__anon20
rsv2	types.h	/^            uint64 rsv2 : 5;$/;"	m	struct:pcm::BecktonUncorePMUCNTCTLRegister::__anon19::__anon20
run	daemon/daemon/daemon.cpp	/^	int Daemon::run()$/;"	f	class:PCMDaemon::Daemon
run	pcm-sensor-server.cpp	/^void HTTPSServer::run() {$/;"	f	class:HTTPSServer
run	pcm-sensor-server.cpp	/^void HTTPServer::run() {$/;"	f	class:HTTPServer
run_	pcm-sensor-server.cpp	/^    std::atomic<bool> run_;$/;"	m	class:PeriodicCounterFetcher	file:
run_state	cpucounters.h	/^    int run_state;                 \/\/ either running (1) or sleeping (0)$/;"	m	class:pcm::PCM
sBuildTopology	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::sBuildTopology(PcmMsrClientClassName* target, void* reference, IOExternalMethodArguments* args){$/;"	f	class:PcmMsrClientClassName
sCloseDriver	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::sCloseDriver(PcmMsrClientClassName* target, void* reference, IOExternalMethodArguments* arguments)$/;"	f	class:PcmMsrClientClassName
sDecrementNumInstances	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::sDecrementNumInstances(PcmMsrClientClassName* target, void* reference, IOExternalMethodArguments* args){$/;"	f	class:PcmMsrClientClassName
sGetNumInstances	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::sGetNumInstances(PcmMsrClientClassName* target, void* reference, IOExternalMethodArguments* args){$/;"	f	class:PcmMsrClientClassName
sIncrementNumInstances	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::sIncrementNumInstances(PcmMsrClientClassName* target, void* reference, IOExternalMethodArguments* args){$/;"	f	class:PcmMsrClientClassName
sMapMemory	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::sMapMemory(PcmMsrClientClassName* target, void* reference, IOExternalMethodArguments* arguments) {$/;"	f	class:PcmMsrClientClassName
sMethods	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^const IOExternalMethodDispatch PcmMsrClientClassName::sMethods[kNumberOfMethods] = {$/;"	m	class:PcmMsrClientClassName	file:
sMethods	MacMSRDriver/PcmMsr/PcmMsrClient.h	/^    static const IOExternalMethodDispatch   sMethods[kNumberOfMethods];$/;"	m	class:PcmMsrClientClassName
sOpenDriver	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::sOpenDriver(PcmMsrClientClassName* target, void* reference, IOExternalMethodArguments* arguments)$/;"	f	class:PcmMsrClientClassName
sRead	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::sRead(PcmMsrClientClassName* target, void* reference, IOExternalMethodArguments* arguments) {$/;"	f	class:PcmMsrClientClassName
sReadMSR	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::sReadMSR(PcmMsrClientClassName* target, void* reference, IOExternalMethodArguments* arguments){$/;"	f	class:PcmMsrClientClassName
sReadMemory	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::sReadMemory(PcmMsrClientClassName* target, void* reference, IOExternalMethodArguments* arguments) {$/;"	f	class:PcmMsrClientClassName
sUnmapMemory	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::sUnmapMemory(PcmMsrClientClassName* target, void* reference, IOExternalMethodArguments* arguments) {$/;"	f	class:PcmMsrClientClassName
sWrite	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::sWrite(PcmMsrClientClassName* target, void* reference, IOExternalMethodArguments* arguments) {$/;"	f	class:PcmMsrClientClassName
sWriteMSR	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::sWriteMSR(PcmMsrClientClassName* target, void* reference, IOExternalMethodArguments* arguments){$/;"	f	class:PcmMsrClientClassName
s_expect	utils.h	/^    explicit s_expect(const char * s) : std::string(s) {}$/;"	f	class:pcm::s_expect
s_expect	utils.h	/^    explicit s_expect(const std::string & s) : std::string(s) {}$/;"	f	class:pcm::s_expect
s_expect	utils.h	/^class s_expect : public std::string$/;"	c	namespace:pcm
sampleRate_	PCM-Service_Win/PCMService.h	/^        const int sampleRate_;$/;"	m	class:PCMServiceNS::MeasureThread
scanBus	pcm-lspci.cpp	/^void scanBus(int bus, const PCIDB & pciDB)$/;"	f
scheme_	pcm-sensor-server.cpp	/^    std::string scheme_;$/;"	m	struct:URL	file:
secondary_bus_number	lspci.h	/^            uint8_t secondary_bus_number;$/;"	m	struct:pcm::pci::__anon32::__anon33
serverSocket_	pcm-sensor-server.cpp	/^    int          serverSocket_;$/;"	m	class:Server	file:
serverUncoreCounterStatesAfter_	daemon/daemon/daemon.h	/^		ServerUncoreCounterState* serverUncoreCounterStatesAfter_;$/;"	m	class:PCMDaemon::Daemon
serverUncoreCounterStatesBefore_	daemon/daemon/daemon.h	/^		ServerUncoreCounterState* serverUncoreCounterStatesBefore_;$/;"	m	class:PCMDaemon::Daemon
server_pcicfg_uncore	cpucounters.h	/^    std::vector<std::shared_ptr<ServerPCICFGUncore> > server_pcicfg_uncore;$/;"	m	class:pcm::PCM
service	MacMSRDriver/MSRAccessor.h	/^    io_service_t service;$/;"	m	class:MSRAccessor
serviceInstaller1	PCM-Service_Win/PCMInstaller.h	/^    private: System::ServiceProcess::ServiceInstaller^  serviceInstaller1;$/;"	m	class:PMUService::ProjectInstaller
serviceProcessInstaller1	PCM-Service_Win/PCMInstaller.h	/^    private: System::ServiceProcess::ServiceProcessInstaller^  serviceProcessInstaller1;$/;"	m	class:PMUService::ProjectInstaller
service_name	winpmem/winpmem.h	/^  TCHAR *service_name;$/;"	m	class:pcm::WinPmem
setBlocked	cpucounters.h	/^    void setBlocked(const bool new_blocked) { blocked = new_blocked; }$/;"	f	class:pcm::PCM
setCertificateFile	pcm-sensor-server.cpp	/^    void setCertificateFile( std::string const & certificateFile ) { certificateFile_ = certificateFile; }$/;"	f	class:HTTPSServer
setConfigValue	PCM_Win/windriver.h	/^    static std::wstring setConfigValue(const LPCWSTR key, const std::wstring& defaultValue)$/;"	f	class:pcm::Driver
setHTTPServer	pcm-sensor-server.cpp	/^    void setHTTPServer( HTTPServer* hs ) {$/;"	f	class:SignalHandler
setOutput	cpucounters.cpp	/^void PCM::setOutput(const std::string filename)$/;"	f	class:pcm::PCM
setPollInterval	daemon/client/client.cpp	/^	void Client::setPollInterval(int pollMs)$/;"	f	class:PCMDaemon::Client
setPrivateKeyFile	pcm-sensor-server.cpp	/^    void setPrivateKeyFile ( std::string const & privateKeyFile )  { privateKeyFile_  = privateKeyFile;  }$/;"	f	class:HTTPSServer
setProtocol	pcm-sensor-server.cpp	/^    void setProtocol( enum HTTPProtocol protocol ) {$/;"	f	class:HTTPMessage
setProtocol	pcm-sensor-server.cpp	/^    void setProtocol( std::string const & protocolString ) {$/;"	f	class:HTTPMessage
setRefCore	topology.h	/^    void setRefCore( Core* refCore ) {$/;"	f	class:pcm::Uncore
setRefCore	topology.h	/^    void setRefCore() {$/;"	f	class:pcm::Socket
setResponseCode	pcm-sensor-server.cpp	/^    void setResponseCode( enum HTTPResponseCode rc ) {$/;"	f	class:HTTPResponse
setRunState	cpucounters.h	/^    void setRunState(int new_state) { run_state = new_state; }$/;"	f	class:pcm::PCM
setSSL	pcm-sensor-server.cpp	/^    void setSSL( SSL* ssl ) {$/;"	f	class:basic_socketbuf
setSharedMemoryIdLocation	daemon/client/client.cpp	/^	void Client::setSharedMemoryIdLocation(const std::string& location)$/;"	f	class:PCMDaemon::Client
setSocket	pcm-sensor-server.cpp	/^    void setSocket( int s ) {$/;"	f	class:SignalHandler
setSocket	pcm-sensor-server.cpp	/^    void setSocket( int socketFD ) {$/;"	f	class:basic_socketbuf
setTimeout	pcm-sensor-server.cpp	/^    void setTimeout( struct timeval t ) {$/;"	f	class:basic_socketbuf
set_acquisition_mode	winpmem/winpmem.cpp	/^int WinPmem::set_acquisition_mode(__int32 mode) {$/;"	f	class:pcm::WinPmem
set_flag_sel	types.h	/^            uint64 set_flag_sel : 3;$/;"	m	struct:pcm::BecktonUncorePMUCNTCTLRegister::__anon19::__anon20
set_post_cleanup_callback	utils.cpp	/^void set_post_cleanup_callback(void(*cb)(void))$/;"	f	namespace:pcm
set_signal_handlers	utils.cpp	/^void set_signal_handlers(void)$/;"	f	namespace:pcm
setupCustomCoreEventsForNuma	cpucounters.cpp	/^void PCM::setupCustomCoreEventsForNuma(PCM::ExtendedCustomCoreEventDescription& conf) const$/;"	f	class:pcm::PCM
setupPCM	daemon/daemon/daemon.cpp	/^	void Daemon::setupPCM()$/;"	f	class:PCMDaemon::Daemon
setupSharedMemory	daemon/client/client.cpp	/^	void Client::setupSharedMemory()$/;"	f	class:PCMDaemon::Client
setupSharedMemory	daemon/daemon/daemon.cpp	/^	void Daemon::setupSharedMemory()$/;"	f	class:PCMDaemon::Daemon
sharedMemoryId_	daemon/daemon/daemon.cpp	/^	int Daemon::sharedMemoryId_;$/;"	m	class:PCMDaemon::Daemon	file:
sharedMemoryId_	daemon/daemon/daemon.h	/^		static int sharedMemoryId_;$/;"	m	class:PCMDaemon::Daemon
sharedPCMState_	daemon/client/client.h	/^		PCMDaemon::SharedPCMState* sharedPCMState_ = nullptr;$/;"	m	class:PCMDaemon::Client
sharedPCMState_	daemon/daemon/daemon.cpp	/^	SharedPCMState* Daemon::sharedPCMState_;$/;"	m	class:PCMDaemon::Daemon	file:
sharedPCMState_	daemon/daemon/daemon.h	/^		static SharedPCMState* sharedPCMState_;$/;"	m	class:PCMDaemon::Daemon
shmAttached_	daemon/client/client.h	/^		bool shmAttached_;$/;"	m	class:PCMDaemon::Client
shmIdLocation_	daemon/client/client.h	/^		std::string shmIdLocation_;$/;"	m	class:PCMDaemon::Client
shmIdLocation_	daemon/daemon/daemon.cpp	/^	std::string Daemon::shmIdLocation_;$/;"	m	class:PCMDaemon::Daemon	file:
shmIdLocation_	daemon/daemon/daemon.h	/^		static std::string shmIdLocation_;$/;"	m	class:PCMDaemon::Daemon
showSpecControlMSRs	cpucounters.cpp	/^void PCM::showSpecControlMSRs()$/;"	f	class:pcm::PCM
show_partial_core_output	pcm-raw.cpp	/^bool show_partial_core_output = false;$/;"	v
sigCONT_handler	utils.cpp	/^void sigCONT_handler(int \/*signum*\/)$/;"	f	namespace:pcm
sigHUP_handler	utils.cpp	/^void sigHUP_handler(int \/*signum*\/)$/;"	f	namespace:pcm
sigINT_handler	utils.cpp	/^BOOL sigINT_handler(DWORD fdwCtrlType)$/;"	f	namespace:pcm
sigINT_handler	utils.cpp	/^void sigINT_handler(int signum)$/;"	f	namespace:pcm
sigSTOP_handler	utils.cpp	/^void sigSTOP_handler(int \/*signum*\/)$/;"	f	namespace:pcm
sigUSR_handler	utils.cpp	/^void sigUSR_handler(int \/*signum*\/)$/;"	f	namespace:pcm
signature	types.h	/^    char signature[4];$/;"	m	struct:pcm::MCFGHeader
skipInactiveChannels	pcm-memory.cpp	/^bool skipInactiveChannels = true;$/;"	v
sklEventDefinition	pcm-tsx.cpp	/^const vector<TSXEvent> sklEventDefinition = {$/;"	v
skstates1	cpuasynchcounter.h	/^    SocketCounterState * skstates1, * skstates2;$/;"	m	class:AsynchronCounterState
skstates2	cpuasynchcounter.h	/^    SocketCounterState * skstates1, * skstates2;$/;"	m	class:AsynchronCounterState
skt	pcm-latency.cpp	/^    vector<struct socket_info_uncore> skt;$/;"	m	struct:res_uncore	file:
socket	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    uint32_t socket;$/;"	m	struct:__anon26
socket	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    uint32_t socket;$/;"	m	struct:__anon27
socket	PCM-Service_Win/PCMService.h	/^        bool socket;$/;"	m	struct:PCMServiceNS::CollectionInformation
socket	cpucounters.cpp	/^    int socket;$/;"	m	class:pcm::PerfVirtualControlRegister	file:
socket	cpucounters.h	/^    int32 socket;$/;"	m	struct:pcm::TopologyEntry
socket	pcm-latency.cpp	/^    int socket;$/;"	m	struct:core_info	file:
socket	pcm-latency.cpp	/^    vector<struct core_info> socket;$/;"	m	struct:res_core	file:
socket	pcm-sensor-server.cpp	/^    int socket() {$/;"	f	class:basic_socketbuf
socket2M2Mbus	cpucounters.cpp	/^std::vector<std::pair<uint32,uint32> > ServerPCICFGUncore::socket2M2Mbus;$/;"	m	class:pcm::ServerPCICFGUncore	file:
socket2M2Mbus	cpucounters.h	/^    static std::vector<std::pair<uint32, uint32> > socket2M2Mbus;$/;"	m	class:pcm::ServerPCICFGUncore
socket2UPIbus	cpucounters.cpp	/^std::vector<std::pair<uint32,uint32> > ServerPCICFGUncore::socket2UPIbus;$/;"	m	class:pcm::ServerPCICFGUncore	file:
socket2UPIbus	cpucounters.h	/^    static std::vector<std::pair<uint32, uint32> > socket2UPIbus;$/;"	m	class:pcm::ServerPCICFGUncore
socket2busMutex	cpucounters.cpp	/^Mutex ServerPCICFGUncore::socket2busMutex;$/;"	m	class:pcm::ServerPCICFGUncore	file:
socket2busMutex	cpucounters.h	/^    static Mutex socket2busMutex;$/;"	m	class:pcm::ServerPCICFGUncore
socket2iMCbus	cpucounters.cpp	/^std::vector<std::pair<uint32,uint32> > ServerPCICFGUncore::socket2iMCbus;$/;"	m	class:pcm::ServerPCICFGUncore	file:
socket2iMCbus	cpucounters.h	/^    static std::vector<std::pair<uint32, uint32> > socket2iMCbus;$/;"	m	class:pcm::ServerPCICFGUncore
socketBuffer_	pcm-sensor-server.cpp	/^    buf_type socketBuffer_;$/;"	m	class:basic_socketstream	file:
socketCounterState	topology.cpp	/^SocketCounterState Socket::socketCounterState( void ) const {$/;"	f	class:pcm::Socket
socketCounterStates	topology.h	/^    std::vector<SocketCounterState>const & socketCounterStates( void ) const {$/;"	f	class:pcm::Aggregator::std
socketFD_	pcm-sensor-server.cpp	/^    int   socketFD_;$/;"	m	class:basic_socketbuf	file:
socketID	topology.h	/^    int32 socketID() const {$/;"	f	class:pcm::Core
socketID	topology.h	/^    int32 socketID() const {$/;"	f	class:pcm::Socket
socketID	topology.h	/^    int32 socketID() const {$/;"	f	class:pcm::Uncore
socketID_	topology.h	/^    int32                     socketID_;$/;"	m	class:pcm::Core
socketID_	topology.h	/^    int32 socketID_;$/;"	m	class:pcm::Uncore
socketId	daemon/daemon/common.h	/^		int32 socketId = 0;$/;"	m	struct:PCMDaemon::PCMCoreCounter
socketId	daemon/daemon/common.h	/^		uint64 socketId = 0;$/;"	m	struct:PCMDaemon::PCMMemorySocketCounter
socketId	daemon/daemon/common.h	/^		uint64 socketId = 0;$/;"	m	struct:PCMDaemon::PCMQPISocketCounter
socketRefCore	cpucounters.h	/^    std::vector<int32> socketRefCore;$/;"	m	class:pcm::PCM
socketStatesAfter_	daemon/daemon/daemon.h	/^		std::vector<SocketCounterState> socketStatesBefore_, socketStatesAfter_;$/;"	m	class:PCMDaemon::Daemon
socketStatesBefore_	daemon/daemon/daemon.h	/^		std::vector<SocketCounterState> socketStatesBefore_, socketStatesAfter_;$/;"	m	class:PCMDaemon::Daemon
socketStream_	pcm-sensor-server.cpp	/^    socketstream socketStream_;$/;"	m	class:HTTPConnection	file:
socket_id	lspci.h	/^    uint32_t socket_id;$/;"	m	struct:pcm::iio_skx
socket_id	pcm-latency.cpp	/^    int socket_id;$/;"	m	struct:socket_info_pci	file:
socket_id	pcm-latency.cpp	/^    int socket_id;$/;"	m	struct:socket_info_uncore	file:
socket_info_pci	pcm-latency.cpp	/^struct socket_info_pci$/;"	s	file:
socket_info_uncore	pcm-latency.cpp	/^struct socket_info_uncore$/;"	s	file:
sockets	daemon/daemon/common.h	/^		PCMMemorySocketCounter sockets[MAX_SOCKETS];$/;"	m	struct:PCMDaemon::PCMMemory
sockets	topology.h	/^    std::vector<Socket*> const & sockets( void ) const {$/;"	f	class:pcm::SystemRoot::std
sockets_	topology.h	/^    std::vector<Socket*>      sockets_;$/;"	m	class:pcm::SystemRoot
socketstream	pcm-sensor-server.cpp	/^typedef basic_socketstream<char> socketstream;$/;"	t	file:
socsVector_	topology.h	/^    std::vector<SocketCounterState> socsVector_;$/;"	m	class:pcm::Aggregator
split	utils.cpp	/^std::vector<std::string> split(const std::string & str, const char delim)$/;"	f	namespace:pcm
splitHeaderValue	pcm-sensor-server.cpp	/^    std::vector<std::string> splitHeaderValue() const {$/;"	f	class:HTTPHeader	file:
ss	PCM_Win/windriver.h	/^    SERVICE_STATUS ss;$/;"	m	class:pcm::Driver
ss	pcm-sensor-server.cpp	/^    std::stringstream ss;$/;"	m	class:JSONPrinter	file:
ss	pcm-sensor-server.cpp	/^    std::stringstream ss;$/;"	m	class:PrometheusPrinter	file:
ssize_t	debug.h	41;"	d
ssl	pcm-sensor-server.cpp	/^    SSL* ssl() {$/;"	f	class:basic_socketbuf
sslCTX_	pcm-sensor-server.cpp	/^    SSL_CTX* sslCTX_ = nullptr;$/;"	m	class:HTTPSServer	file:
ssl_	pcm-sensor-server.cpp	/^    SSL*  ssl_;$/;"	m	class:basic_socketbuf	file:
sstate1	cpuasynchcounter.h	/^    SystemCounterState sstate1, sstate2;$/;"	m	class:AsynchronCounterState
sstate2	cpuasynchcounter.h	/^    SystemCounterState sstate1, sstate2;$/;"	m	class:AsynchronCounterState
stack	dashboard.cpp	/^    bool stack;$/;"	m	class:GraphPanel	file:
stack_content	lspci.h	/^typedef std::vector<ctr_data> stack_content;$/;"	t	namespace:pcm
stack_name	lspci.h	/^        std::string stack_name;$/;"	m	struct:pcm::iio_skx::__anon38
stacks	lspci.h	/^    } stacks[6]; \/* iio stack 0, 1, 2, 3, 4, 5 *\/$/;"	m	struct:pcm::iio_skx	typeref:struct:pcm::iio_skx::__anon38
start	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^bool PcmMsrDriverClassName::start(IOService* provider){$/;"	f	class:PcmMsrDriverClassName
start	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^bool PcmMsrClientClassName::start(IOService* provider)$/;"	f	class:PcmMsrClientClassName
start	PCM_Win/windriver.h	/^    bool start()$/;"	f	class:pcm::Driver
start	pcm-sensor-server.cpp	/^    void start( void ) {$/;"	f	class:PeriodicCounterFetcher
startAddr	mmio.h	/^    uint64 startAddr;$/;"	m	class:pcm::MMIORange
startBusNumber	types.h	/^    unsigned char startBusNumber;$/;"	m	struct:pcm::MCFGRecord
startHTTPSServer	pcm-sensor-server.cpp	/^int startHTTPSServer( unsigned short port, std::string const & cFile, std::string const & pkFile) {$/;"	f
startHTTPServer	pcm-sensor-server.cpp	/^int startHTTPServer( unsigned short port ) {$/;"	f
startObject	pcm-sensor-server.cpp	/^    void startObject(std::string const& s, char const ch ) {$/;"	f	class:JSONPrinter	file:
status_	topology.h	/^    enum Status status_;$/;"	m	class:pcm::HyperThread	typeref:enum:pcm::HyperThread::Status
std	width_extender.h	/^namespace std {$/;"	n
stop	PCM_Win/windriver.h	/^    void stop()$/;"	f	class:pcm::Driver
stop	pcm-sensor-server.cpp	/^    virtual void stop() {$/;"	f	class:HTTPServer
stop	pcm-sensor-server.cpp	/^    void stop( void ) {$/;"	f	class:PeriodicCounterFetcher
storage_mode	types.h	/^            uint64 storage_mode : 2;$/;"	m	struct:pcm::BecktonUncorePMUCNTCTLRegister::__anon19::__anon20
store_latency_core	pcm-latency.cpp	/^void store_latency_core(PCM *m)$/;"	f
store_latency_uncore	pcm-latency.cpp	/^void store_latency_uncore(PCM *m, bool ddr, int delay_ms)$/;"	f
str	pcm-sensor-server.cpp	/^    std::string str( void ) {$/;"	f	class:JSONPrinter
str	pcm-sensor-server.cpp	/^    std::string str( void ) {$/;"	f	class:PrometheusPrinter
stream_write_task	memoptest.cpp	/^void stream_write_task(Y * p, Y * e, int value)$/;"	f
strtok_r	pcm-core.cpp	21;"	d	file:
strtok_r	pcm-raw.cpp	19;"	d	file:
subordinate_bus_number	lspci.h	/^            uint8_t subordinate_bus_number;$/;"	m	struct:pcm::pci::__anon32::__anon33
subscribers_	daemon/daemon/daemon.h	/^		std::map<std::string, uint32> subscribers_;$/;"	m	class:PCMDaemon::Daemon
super	MacMSRDriver/PcmMsr/PcmMsr.cpp	83;"	d	file:
super	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	20;"	d	file:
supportNHLECountBasicStat	pcm-tsx.cpp	/^bool supportNHLECountBasicStat = true;$/;"	v
supported	cpucounters.cpp	/^    bool supported() const { return false;  }$/;"	f	class:pcm::TemporalThreadAffinity
supported	cpucounters.cpp	/^    bool supported() const { return true; }$/;"	f	class:pcm::TemporalThreadAffinity
supportedOutputMimeTypes	pcm-sensor-server.cpp	/^std::unordered_map<enum MimeType, std::string, std::hash<int>> supportedOutputMimeTypes = {$/;"	v
supportsHLE	cpucounters.cpp	/^bool PCM::supportsHLE() const$/;"	f	class:pcm::PCM
supportsRTM	cpucounters.cpp	/^bool PCM::supportsRTM() const$/;"	f	class:pcm::PCM
suppress_output	winpmem/winpmem.h	/^  int suppress_output;$/;"	m	class:pcm::WinPmem
swapPCMBeforeAfterState	daemon/daemon/daemon.cpp	/^	void Daemon::swapPCMBeforeAfterState()$/;"	f	class:PCMDaemon::Daemon
sycs_	topology.h	/^    SystemCounterState sycs_;$/;"	m	class:pcm::Aggregator
sync	pcm-sensor-server.cpp	/^    virtual int sync() {$/;"	f	class:basic_socketbuf
system	daemon/daemon/common.h	/^		PCMMemorySystemCounter system;$/;"	m	struct:PCMDaemon::PCMMemory
system	daemon/daemon/common.h	/^		PCMSystem system;$/;"	m	struct:PCMDaemon::SharedPCMCounters
systemCounterState	topology.h	/^    SystemCounterState const & systemCounterState( void ) const {$/;"	f	class:pcm::Aggregator
systemCounterState	topology.h	/^    SystemCounterState systemCounterState() const {$/;"	f	class:pcm::SystemRoot
systemStatesAfter_	daemon/daemon/daemon.h	/^		SystemCounterState systemStatesBefore_, systemStatesForQPIBefore_, systemStatesAfter_;$/;"	m	class:PCMDaemon::Daemon
systemStatesBefore_	daemon/daemon/daemon.h	/^		SystemCounterState systemStatesBefore_, systemStatesForQPIBefore_, systemStatesAfter_;$/;"	m	class:PCMDaemon::Daemon
systemStatesForQPIBefore_	daemon/daemon/daemon.h	/^		SystemCounterState systemStatesBefore_, systemStatesForQPIBefore_, systemStatesAfter_;$/;"	m	class:PCMDaemon::Daemon
systemTopology	cpucounters.h	/^    SystemRoot* systemTopology;$/;"	m	class:pcm::PCM
task_	threadpool.h	/^    std::packaged_task<ReturnType()> task_;$/;"	m	class:pcm::LambdaJob
temp_format	pcm.cpp	/^std::string temp_format(int32 t)$/;"	f
thermalHeadroom	daemon/daemon/common.h	/^		int32 thermalHeadroom = 0;$/;"	m	struct:PCMDaemon::PCMCoreCounter
thermalHeadroomHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable thermalHeadroomHash_;$/;"	m	class:PCMServiceNS::MeasureThread
thread	pcm-latency.cpp	/^    int thread;$/;"	m	struct:core_info	file:
threadID	topology.h	/^    int32 threadID() const {$/;"	f	class:pcm::HyperThread
threadID_	topology.h	/^    int32 threadID_;$/;"	m	class:pcm::HyperThread
thread_id	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    uint32_t thread_id;$/;"	m	struct:__anon26
thread_id	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    uint32_t thread_id;$/;"	m	struct:__anon27
thread_id	cpucounters.h	/^    int32 thread_id;$/;"	m	struct:pcm::TopologyEntry
threads	topology.h	/^    std::vector<HyperThread*> threads() const {$/;"	f	class:pcm::Core
threads_	threadpool.h	/^    std::vector<std::thread> threads_;$/;"	m	class:pcm::ThreadPool
threads_	topology.h	/^    std::vector<HyperThread*> threads_;$/;"	m	class:pcm::Core
threads_per_core	cpucounters.h	/^    int32 threads_per_core;$/;"	m	class:pcm::PCM
thresh	types.h	/^            uint64 thresh : 12;$/;"	m	struct:pcm::IIOPMUCNTCTLRegister::__anon21::__anon22
ticksHash_	PCM-Service_Win/PCMService.h	/^        System::Collections::Hashtable ticksHash_;$/;"	m	class:PCMServiceNS::MeasureThread
tileID	topology.h	/^    int32 tileID() const {$/;"	f	class:pcm::Core
tileID_	topology.h	/^    int32                     tileID_;$/;"	m	class:pcm::Core
tile_id	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    uint32_t tile_id;$/;"	m	struct:__anon26
tile_id	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    uint32_t tile_id;$/;"	m	struct:__anon27
tile_id	cpucounters.h	/^    int32 tile_id; \/\/ tile is a constalation of 1 or more cores sharing salem L2 cache. Unique for entire system$/;"	m	struct:pcm::TopologyEntry
timeout_	pcm-sensor-server.cpp	/^    struct timeval timeout_;$/;"	m	class:basic_socketbuf	typeref:struct:basic_socketbuf::timeval	file:
timestamp	daemon/daemon/common.h	/^		uint64 timestamp;$/;"	m	struct:PCMDaemon::SharedPCMState
title	dashboard.cpp	/^    std::string title;$/;"	m	class:Dashboard	file:
toString	pcm-sensor-server.cpp	/^        std::string toString() const {$/;"	f	class:datetime
toggle_write_mode	winpmem/winpmem.cpp	/^int WinPmem::toggle_write_mode() {$/;"	f	class:pcm::WinPmem
topologies	MacMSRDriver/PcmMsr/PcmMsr.h	/^    kTopologyEntry *topologies;$/;"	m	class:PcmMsrDriverClassName
topology	cpucounters.h	/^    std::vector<TopologyEntry> topology;$/;"	m	class:pcm::PCM
topologyEntry	MacMSRDriver/PcmMsr/UserKernelShared.h	/^} topologyEntry;$/;"	t	typeref:struct:__anon26
total	daemon/daemon/common.h	/^		float total;$/;"	m	struct:PCMDaemon::PCMMemoryChannelCounter
total	daemon/daemon/common.h	/^		float total;$/;"	m	struct:PCMDaemon::PCMMemorySocketCounter
total	daemon/daemon/common.h	/^		float total;$/;"	m	struct:PCMDaemon::PCMMemorySystemCounter
total	daemon/daemon/common.h	/^		uint64 total;$/;"	m	struct:PCMDaemon::PCMQPISocketCounter
total	pcm-pcie.h	/^        total$/;"	e	enum:LegacyPlatform::__anon9
tp_	threadpool.h	/^    ThreadPool& tp_;$/;"	m	class:pcm::WorkQueue
tryOpen	cpucounters.cpp	/^FILE * tryOpen(const char * path, const char * mode)$/;"	f	namespace:pcm
type_	pcm-sensor-server.cpp	/^        enum HeaderType type_;$/;"	m	struct:HTTPHeaderProperties::HTTPHeaderProperty	typeref:enum:HTTPHeaderProperties::HTTPHeaderProperty::HeaderType	file:
type_	pcm-sensor-server.cpp	/^    enum HeaderType type_;$/;"	m	class:HTTPHeader	typeref:enum:HTTPHeader::HeaderType	file:
uboxPMUs	cpucounters.h	/^    std::vector<UncorePMU> uboxPMUs;$/;"	m	class:pcm::PCM
ucsFutures_	topology.h	/^    std::vector<std::future<UncoreCounterState>> ucsFutures_;$/;"	m	class:pcm::Aggregator
ui32	types.h	/^    } ui32;$/;"	m	union:pcm::cvt_ds	typeref:struct:pcm::cvt_ds::__anon23
ui64	types.h	/^    UINT64 ui64;$/;"	m	union:pcm::cvt_ds
uint	pcm-pcie.h	/^typedef unsigned int uint;$/;"	t
uint32	daemon/daemon/common.h	/^	typedef unsigned int uint32;$/;"	t	namespace:PCMDaemon
uint32	types.h	/^typedef unsigned int uint32;$/;"	t	namespace:pcm
uint64	daemon/daemon/common.h	/^	typedef unsigned long uint64;$/;"	t	namespace:PCMDaemon
uint64	types.h	/^typedef unsigned long long uint64;$/;"	t	namespace:pcm
umask	pcm-tsx.cpp	/^    unsigned char umask;$/;"	m	struct:TSXEvent	file:
umask	types.h	/^            uint64 umask : 8;$/;"	m	struct:pcm::EventSelectRegister::__anon10::__anon11
umask	types.h	/^            uint64 umask : 8;$/;"	m	struct:pcm::IIOPMUCNTCTLRegister::__anon21::__anon22
umask	types.h	/^            uint64 umask : 8;$/;"	m	struct:pcm::UncoreEventSelectRegister::__anon14::__anon15
umask_value	cpucounters.h	/^        int32 event_number, umask_value;$/;"	m	struct:pcm::PCM::CustomCoreEventDescription
uncore	topology.h	/^    Uncore* uncore( void ) const {$/;"	f	class:pcm::Socket
uncoreCounterState	topology.cpp	/^UncoreCounterState ServerUncore::uncoreCounterState( void ) const$/;"	f	class:pcm::ServerUncore
uncoreTSC	cpucounters.h	/^    uint64 uncoreTSC;$/;"	m	class:pcm::SystemCounterState
uncore_	topology.h	/^    Uncore* uncore_;$/;"	m	class:pcm::Socket
uncore_event	pcm-latency.cpp	/^} uncore_event[10];$/;"	v	typeref:struct:res_uncore
uncore_fixed_counter_num_max	cpucounters.h	/^    uint32 uncore_fixed_counter_num_max;$/;"	m	class:pcm::PCM
uncore_fixed_counter_num_used	cpucounters.h	/^    uint32 uncore_fixed_counter_num_used;$/;"	m	class:pcm::PCM
uncore_fixed_counter_width	cpucounters.h	/^    uint32 uncore_fixed_counter_width;$/;"	m	class:pcm::PCM
uncore_gen_counter_num_max	cpucounters.h	/^    uint32 uncore_gen_counter_num_max;$/;"	m	class:pcm::PCM
uncore_gen_counter_num_used	cpucounters.h	/^    uint32 uncore_gen_counter_num_used;$/;"	m	class:pcm::PCM
uncore_gen_counter_width	cpucounters.h	/^    uint32 uncore_gen_counter_width;$/;"	m	class:pcm::PCM
undefined	lspci.h	/^                    uint16_t undefined : 1;$/;"	m	struct:pcm::pci::__anon34::__anon35::__anon36::__anon37
underflow	pcm-sensor-server.cpp	/^    virtual int_type underflow() {$/;"	f	class:basic_socketbuf
unfreeze	cpucounters.cpp	/^void UncorePMU::unfreeze(const uint32 extra)$/;"	f	class:pcm::UncorePMU
unfreezeCounters	cpucounters.cpp	/^void ServerPCICFGUncore::unfreezeCounters()$/;"	f	class:pcm::ServerPCICFGUncore
unfreezeServerUncoreCounters	cpucounters.cpp	/^void PCM::unfreezeServerUncoreCounters()$/;"	f	class:pcm::PCM
unhandled_exception_handler	utils.cpp	/^LONG unhandled_exception_handler(LPEXCEPTION_POINTERS p)$/;"	f	namespace:pcm
uninstall	PCM_Win/windriver.h	/^    void uninstall()$/;"	f	class:pcm::Driver
uninstall_driver	winpmem/winpmem.cpp	/^int WinPmem::uninstall_driver() {$/;"	f	class:pcm::WinPmem
unitControl	cpucounters.h	/^    HWRegisterPtr unitControl;$/;"	m	class:pcm::UncorePMU
unit_format	utils.h	/^inline std::string unit_format(IntType n)$/;"	f	namespace:pcm
unlock	msr.h	/^    void unlock()$/;"	f	class:pcm::SafeMsrHandle
unlock	mutex.h	/^        void unlock()$/;"	f	class:pcm::Mutex
unmapMemory	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^void PcmMsrDriverClassName::unmapMemory (void *memory_map)$/;"	f	class:PcmMsrDriverClassName
unmapMemory	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::unmapMemory(const uint64_t* input, uint32_t inputSize)$/;"	f	class:PcmMsrClientClassName
unregisterCallback	pcm-sensor-server.cpp	/^    void unregisterCallback( HTTPRequestMethod rm )$/;"	f	class:HTTPServer
updatePCMState	daemon/daemon/daemon.cpp	/^	void Daemon::updatePCMState(SystemCounterState* systemStates, std::vector<SocketCounterState>* socketStates, std::vector<CoreCounterState>* coreStates)$/;"	f	class:PCMDaemon::Daemon
url	pcm-sensor-server.cpp	/^    URL const & url() const {$/;"	f	class:HTTPRequest
url_	pcm-sensor-server.cpp	/^    URL url_;$/;"	m	class:HTTPRequest	file:
useLinuxPerfForUncore	cpucounters.cpp	/^bool PCM::useLinuxPerfForUncore() const$/;"	f	class:pcm::PCM
useResctrl	cpucounters.h	/^    bool useResctrl;$/;"	m	class:pcm::PCM
useSKLPath	cpucounters.h	/^    bool useSKLPath() const$/;"	f	class:pcm::PCM
useSkylakeEvents	cpucounters.h	/^    bool useSkylakeEvents() const$/;"	f	class:pcm::PCM
user_	pcm-sensor-server.cpp	/^    std::string user_;$/;"	m	struct:URL	file:
usr	types.h	/^            uint64 usr : 1;$/;"	m	struct:pcm::EventSelectRegister::__anon10::__anon11
usr0	types.h	/^            uint64 usr0 : 1;$/;"	m	struct:pcm::FixedEventControlRegister::__anon12::__anon13
usr1	types.h	/^            uint64 usr1 : 1;$/;"	m	struct:pcm::FixedEventControlRegister::__anon12::__anon13
usr2	types.h	/^            uint64 usr2 : 1;$/;"	m	struct:pcm::FixedEventControlRegister::__anon12::__anon13
utilization	daemon/daemon/common.h	/^		double utilization;$/;"	m	struct:PCMDaemon::PCMQPILinkCounter
v_event_name	lspci.h	/^  std::string v_event_name;$/;"	m	struct:pcm::counter
v_id	lspci.h	/^    uint32_t v_id;$/;"	m	struct:pcm::counter
v_id	lspci.h	/^typedef uint32_t v_id;$/;"	t	namespace:pcm
valid	cpucounters.h	/^    bool valid() const$/;"	f	class:pcm::UncorePMU
value	MacMSRDriver/MSRKernel.h	/^    uint64_t value;$/;"	m	struct:__anon29
value	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    uint64_t value;$/;"	m	struct:__anon24
value	MacMSRDriver/PcmMsr/UserKernelShared.h	/^    uint64_t value;$/;"	m	struct:__anon25
value	pcm-core.cpp	/^	uint64 value;$/;"	m	struct:CoreEvent	file:
value	pcm-iio.cpp	/^    uint64_t value;$/;"	m	struct:data	file:
value	types.h	/^        uint64 value;$/;"	m	union:pcm::BecktonUncorePMUCNTCTLRegister::__anon19
value	types.h	/^        uint64 value;$/;"	m	union:pcm::BecktonUncorePMUZDPCTLFVCRegister::__anon16
value	types.h	/^        uint64 value;$/;"	m	union:pcm::EventSelectRegister::__anon10
value	types.h	/^        uint64 value;$/;"	m	union:pcm::FixedEventControlRegister::__anon12
value	types.h	/^        uint64 value;$/;"	m	union:pcm::IIOPMUCNTCTLRegister::__anon21
value	types.h	/^        uint64 value;$/;"	m	union:pcm::UncoreEventSelectRegister::__anon14
valueList_	pcm-sensor-server.cpp	/^    std::vector<std::string> valueList_;$/;"	m	class:HTTPHeader	file:
value_	pcm-sensor-server.cpp	/^    std::string value_;$/;"	m	class:HTTPHeader	file:
values	lspci.h	/^        std::vector<uint64_t> values;$/;"	m	struct:pcm::iio_skx::__anon38
vendor_id	lspci.h	/^            uint16_t vendor_id;$/;"	m	struct:pcm::pci::__anon30::__anon31
version	daemon/daemon/common.h	/^		char version[VERSION_SIZE];$/;"	m	struct:PCMDaemon::SharedPCMState
version	winpmem/winpmem.h	/^static TCHAR version[] = TEXT("1.3. Built ") TEXT(__DATE__);$/;"	m	namespace:pcm
vm	cpucounters.h	/^    bool vm = false;$/;"	m	class:pcm::PCM
wQueue	cpucounters.cpp	/^    std::queue<std::packaged_task<void()> > wQueue;$/;"	m	class:pcm::CoreTaskQueue	file:
waitForChild	utils.cpp	/^void waitForChild(void * proc_id)$/;"	f	namespace:pcm
watchdog_delay_ms	width_extender.h	/^    uint32 watchdog_delay_ms;$/;"	m	class:pcm::CounterWidthExtender
what	exceptions/unsupported_processor_exception.hpp	/^	virtual const char* what() const throw()$/;"	f	class:UnsupportedProcessorException
width	cpucounters.h	/^        enum PCIeWidthMode width;$/;"	m	struct:pcm::PCM::SimplePCIeDevInfo	typeref:enum:pcm::PCM::SimplePCIeDevInfo::PCIeWidthMode
width	pcm-iio.cpp	/^    uint32_t width;$/;"	m	struct:data	file:
winsert	pcm-latency.cpp	/^    double winsert;$/;"	m	struct:socket_info_uncore	file:
wlatency	pcm-latency.cpp	/^    double wlatency;$/;"	m	struct:socket_info_uncore	file:
woccupancy	pcm-latency.cpp	/^    double woccupancy;$/;"	m	struct:socket_info_uncore	file:
workProcessed_	threadpool.h	/^    size_t workProcessed_;$/;"	m	class:pcm::WorkQueue
workQ_	threadpool.h	/^    std::queue<Work*> workQ_;$/;"	m	class:pcm::ThreadPool
worker	cpucounters.cpp	/^    std::thread worker;$/;"	m	class:pcm::CoreTaskQueue	file:
workerThread_	PCM-Service_Win/PCMService.h	/^        System::Threading::Thread^ workerThread_;$/;"	m	class:PCMServiceNS::PCMService
wq_	pcm-sensor-server.cpp	/^    WorkQueue    wq_;$/;"	m	class:Server	file:
wq_	topology.h	/^    WorkQueue wq_;$/;"	m	class:pcm::Aggregator
wrap_mode	types.h	/^            uint64 wrap_mode : 1;$/;"	m	struct:pcm::BecktonUncorePMUCNTCTLRegister::__anon19::__anon20
write	MacMSRDriver/MSRAccessor.cpp	/^int32_t MSRAccessor::write(uint32_t core_num, uint64_t msr_num, uint64_t value){$/;"	f	class:MSRAccessor
write	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^void PcmMsrDriverClassName::write(uint32_t pci_address, uint32_t value)$/;"	f	class:PcmMsrDriverClassName
write	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::write(const uint64_t* input, uint32_t inputSize)$/;"	f	class:PcmMsrClientClassName
write	daemon/daemon/common.h	/^		float write;$/;"	m	struct:PCMDaemon::PCMMemoryChannelCounter
write	daemon/daemon/common.h	/^		float write;$/;"	m	struct:PCMDaemon::PCMMemorySocketCounter
write	daemon/daemon/common.h	/^		float write;$/;"	m	struct:PCMDaemon::PCMMemorySystemCounter
write	msr.cpp	/^int32 MsrHandle::write(uint64 msr_number, uint64 value)$/;"	f	class:pcm::MsrHandle
write	msr.h	/^    int32 write(uint64 msr_number, uint64 value)$/;"	f	class:pcm::SafeMsrHandle
write	winpmem/winpmem.h	/^  void write(__int64 start, T val)$/;"	f	class:pcm::WinPmem
write32	mmio.cpp	/^void MMIORange::write32(uint64 offset, uint32 val)$/;"	f	class:pcm::MMIORange
write32	mmio.h	/^    void write32(uint64 offset, uint32 val)$/;"	f	class:pcm::MMIORange
write32	pci.cpp	/^int32 PciHandle::write32(uint64 offset, uint32 value)$/;"	f	class:pcm::PciHandle
write64	mmio.cpp	/^void MMIORange::write64(uint64 offset, uint64 val)$/;"	f	class:pcm::MMIORange
write64	mmio.h	/^    void write64(uint64 offset, uint64 val)$/;"	f	class:pcm::MMIORange
writeAllUnitControl	cpucounters.cpp	/^void ServerPCICFGUncore::writeAllUnitControl(const uint32 value)$/;"	f	class:pcm::ServerPCICFGUncore
writeInternal	mmio.h	/^    void writeInternal(uint64 offset, T val)$/;"	f	class:pcm::MMIORange
writeMSR	MacMSRDriver/DriverInterface.c	/^kern_return_t writeMSR(io_connect_t connect, pcm_msr_data_t* data, size_t* idata_size)$/;"	f
writeMSR	MacMSRDriver/PcmMsr/PcmMsr.cpp	/^IOReturn PcmMsrDriverClassName::writeMSR(pcm_msr_data_t* idata){$/;"	f	class:PcmMsrDriverClassName
writeMSR	MacMSRDriver/PcmMsr/PcmMsrClient.cpp	/^IOReturn PcmMsrClientClassName::writeMSR(pcm_msr_data_t* data)$/;"	f	class:PcmMsrClientClassName
writeSupported	mmio.cpp	/^bool MMIORange::writeSupported;$/;"	m	class:pcm::MMIORange	file:
writeSupported	mmio.h	/^    static bool writeSupported;$/;"	m	class:pcm::MMIORange
writeSysFS	cpucounters.cpp	/^bool writeSysFS(const char * path, const std::string & value, bool silent = false)$/;"	f	namespace:pcm
writeToSocket	pcm-sensor-server.cpp	/^    int_type writeToSocket() {$/;"	f	class:basic_socketbuf
writeUnitControl	cpucounters.h	/^    void writeUnitControl(const uint32 value)$/;"	f	class:pcm::UncorePMU
write_crashdump_header_	mmio.cpp	/^    virtual int write_crashdump_header_(struct PmemMemoryInfo * info)$/;"	f	class:pcm::PCMPmem
write_intensive_task	memoptest.cpp	/^void write_intensive_task(Y * p, Y * e, int value)$/;"	f
write_value	WinMSRDriver/Win7/msrstruct.h	/^    ULONG64 write_value;     \/* value to write if write requet$/;"	m	struct:MSR_Request
write_value	WinMSRDriver/Win7/msrstruct.h	/^    ULONG64 write_value;$/;"	m	struct:PCICFG_Request
wrmsr	MacMSRDriver/PcmMsr/PcmMsr.cpp	21;"	d	file:
wsocketstream	pcm-sensor-server.cpp	/^typedef basic_socketstream<wchar_t> wsocketstream;$/;"	t	file:
xPI	cpucounters.h	/^    const char * xPI() const$/;"	f	class:pcm::PCM
xPICounter	cpucounters.h	/^    std::array<std::array<uint64, maxCounters>, maxXPILinks> xPICounter;$/;"	m	class:pcm::ServerUncoreCounterState
xPI_CLOCKTICKS	cpucounters.h	/^        xPI_CLOCKTICKS = 3$/;"	e	enum:pcm::ServerUncoreCounterState::EventPosition
xPI_L1_POWER_CYCLES	cpucounters.h	/^        xPI_L1_POWER_CYCLES = 2,$/;"	e	enum:pcm::ServerUncoreCounterState::EventPosition
xPI_TxL0P_POWER_CYCLES	cpucounters.h	/^        xPI_TxL0P_POWER_CYCLES = 0,$/;"	e	enum:pcm::ServerUncoreCounterState::EventPosition
xpiPMUs	cpucounters.h	/^    UncorePMUVector xpiPMUs;$/;"	m	class:pcm::ServerPCICFGUncore
yAxisLabel	dashboard.cpp	/^    std::string yAxisLabel;$/;"	m	class:GraphPanel	file:
ycores	pcm-raw.cpp	/^bitset<MAX_CORES> ycores;$/;"	v
~AbstractRawCounter	width_extender.h	/^        virtual ~AbstractRawCounter() { }$/;"	f	struct:pcm::CounterWidthExtender::AbstractRawCounter
~Aggregator	topology.h	/^    virtual ~Aggregator() {}$/;"	f	class:pcm::Aggregator
~AsynchronCounterState	cpuasynchcounter.h	/^    ~AsynchronCounterState()$/;"	f	class:AsynchronCounterState
~BasicCounterState	cpucounters.h	/^    virtual ~BasicCounterState() { }$/;"	f	class:pcm::BasicCounterState
~ClientUncore	topology.h	/^    virtual ~ClientUncore() {}$/;"	f	class:pcm::ClientUncore
~Core	topology.h	/^    virtual ~Core() {$/;"	f	class:pcm::Core
~CounterWidthExtender	cpucounters.cpp	/^CounterWidthExtender::~CounterWidthExtender()$/;"	f	class:pcm::CounterWidthExtender
~Daemon	daemon/daemon/daemon.cpp	/^	Daemon::~Daemon()$/;"	f	class:PCMDaemon::Daemon
~HTTPServer	pcm-sensor-server.cpp	/^    virtual ~HTTPServer() {$/;"	f	class:HTTPServer
~HWRegister	cpucounters.h	/^    virtual ~HWRegister() {}$/;"	f	class:pcm::HWRegister
~HyperThread	topology.h	/^    virtual ~HyperThread() { pcm_ = nullptr; }$/;"	f	class:pcm::HyperThread
~IPlatform	pcm-pcie.h	/^    virtual ~IPlatform() { }$/;"	f	class:IPlatform
~InstanceLock	cpucounters.cpp	/^    ~InstanceLock()$/;"	f	class:pcm::InstanceLock
~MMIORange	mmio.cpp	/^MMIORange::~MMIORange()$/;"	f	class:pcm::MMIORange
~MSRAccessor	MacMSRDriver/MSRAccessor.cpp	/^MSRAccessor::~MSRAccessor(){$/;"	f	class:MSRAccessor
~MsrHandle	msr.cpp	/^MsrHandle::~MsrHandle()$/;"	f	class:pcm::MsrHandle
~Mutex	mutex.h	/^        virtual ~Mutex()$/;"	f	class:pcm::Mutex
~PCM	cpucounters.cpp	/^PCM::~PCM()$/;"	f	class:pcm::PCM
~PCMService	PCM-Service_Win/PCMService.h	/^        ~PCMService()$/;"	f	class:PCMServiceNS::PCMService
~Panel	dashboard.cpp	/^    virtual ~Panel() {}$/;"	f	namespace:pcm
~PciHandle	pci.cpp	/^PciHandle::~PciHandle()$/;"	f	class:pcm::PciHandle
~PerfVirtualControlRegister	cpucounters.cpp	/^    ~PerfVirtualControlRegister()$/;"	f	class:pcm::PerfVirtualControlRegister
~ProjectInstaller	PCM-Service_Win/PCMInstaller.h	/^		~ProjectInstaller()$/;"	f	class:PMUService::ProjectInstaller
~SafeMsrHandle	msr.h	/^    virtual ~SafeMsrHandle()$/;"	f	class:pcm::SafeMsrHandle
~Scope	mutex.h	/^            ~Scope() {$/;"	f	class:pcm::Mutex::Scope
~ServerPCICFGUncore	cpucounters.cpp	/^ServerPCICFGUncore::~ServerPCICFGUncore()$/;"	f	class:pcm::ServerPCICFGUncore
~ServerUncore	topology.h	/^    virtual ~ServerUncore() {}$/;"	f	class:pcm::ServerUncore
~SimpleCounterState	cpucounters.h	/^    virtual ~SimpleCounterState() { }$/;"	f	class:pcm::SimpleCounterState
~Socket	topology.h	/^    virtual ~Socket() {$/;"	f	class:pcm::Socket
~SystemObject	topology.h	/^    virtual ~SystemObject() {};$/;"	f	class:pcm::SystemObject
~SystemRoot	topology.h	/^    virtual ~SystemRoot() {$/;"	f	class:pcm::SystemRoot
~Target	dashboard.cpp	/^    virtual ~Target() {}$/;"	f	class:pcm::Target
~TemporalThreadAffinity	cpucounters.cpp	/^    ~TemporalThreadAffinity()$/;"	f	class:pcm::TemporalThreadAffinity
~ThreadGroupTempAffinity	utils.cpp	/^ThreadGroupTempAffinity::~ThreadGroupTempAffinity()$/;"	f	class:pcm::ThreadGroupTempAffinity
~ThreadPool	threadpool.h	/^    ~ThreadPool() {$/;"	f	class:pcm::ThreadPool
~Uncore	topology.h	/^    virtual ~Uncore() {$/;"	f	class:pcm::Uncore
~UncoreCounterState	cpucounters.h	/^    virtual ~UncoreCounterState() { }$/;"	f	class:pcm::UncoreCounterState
~UncorePMU	cpucounters.h	/^    virtual ~UncorePMU() {}$/;"	f	class:pcm::UncorePMU
~Visitor	topology.h	/^    virtual ~Visitor() {};$/;"	f	class:pcm::Visitor
~WinPmem	winpmem/winpmem.cpp	/^WinPmem::~WinPmem() {$/;"	f	class:pcm::WinPmem
~Work	threadpool.h	/^    virtual ~Work() {}$/;"	f	class:pcm::Work
~basic_socketbuf	pcm-sensor-server.cpp	/^    virtual ~basic_socketbuf() {$/;"	f	class:basic_socketbuf
~basic_socketstream	pcm-sensor-server.cpp	/^    virtual ~basic_socketstream() {}$/;"	f	class:basic_socketstream
